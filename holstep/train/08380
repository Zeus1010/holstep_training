N Qcdvkea.QCDVKEA
C |- (!L. (!N. (!r. (!f. (!w. (!x. (!i. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ ((~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w))))))) ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f))))))))))
T c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 f5 c= cnext_el f5 f3 f6 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D DE_MORGAN_THM
A |- (!t1. (!t2. (((~ (t1 /\ t2)) = ((~ t1) \/ (~ t2))) /\ ((~ (t1 \/ t2)) = ((~ t1) /\ (~ t2))))))
T c/\ c= c~ c/\ f0 f1 c\/ c~ f0 c~ f1 c= c~ c\/ f0 f1 c/\ c~ f0 c~ f1
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D NOT_EXISTS_THM
A |- (!P. ((~ (?x. (P x))) = (!x. (~ (P x)))))
T c= c~ c? / * f0 b0 ! c~ * f0 b0
D NOT_FORALL_THM
A |- (!P. ((~ (!x. (P x))) = (?x. (~ (P x)))))
T c= c~ ! * f0 b0 c? / c~ * f0 b0
D o_DEF
A |- (!f. (!g. ((f o g) = (\x. (f (g x))))))
T c= * * part co f0 f1 / * f0 * f1 b0
D I_DEF
A |- (I = (\x. x))
T c= part cI / b0
D NUMERAL
A |- (!n. ((NUMERAL n) = n))
T c= cNUMERAL f0 f0
D num_INDUCTION
A |- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n))))
T c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 ! * f0 b0
D Ssrnat.addSn
A |- (!m. (!n. (((SUC m) + n) = (SUC (m + n)))))
T c= c+ cSUC f0 f1 cSUC c+ f0 f1
D ADD_0
A |- (!m. ((m + (NUMERAL _0)) = m))
T c= c+ f0 cNUMERAL c_0 f0
D Ssrnat.addnS
A |- (!m. (!n. ((m + (SUC n)) = (SUC (m + n)))))
T c= c+ f0 cSUC f1 cSUC c+ f0 f1
D Ssrnat.addnC
A |- (!m. (!n. ((m + n) = (n + m))))
T c= c+ f0 f1 c+ f1 f0
D Ssrnat.addn_eq0
A |- (!m. (!n. (((m + n) = (NUMERAL _0)) = ((m = (NUMERAL _0)) /\ (n = (NUMERAL _0))))))
T c= c= c+ f0 f1 cNUMERAL c_0 c/\ c= f0 cNUMERAL c_0 c= f1 cNUMERAL c_0
D ONE
A |- ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0)))
T c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
D TWO
A |- ((NUMERAL (BIT0 (BIT1 _0))) = (SUC (NUMERAL (BIT1 _0))))
T c= cNUMERAL cBIT0 cBIT1 c_0 cSUC cNUMERAL cBIT1 c_0
D ADD1
A |- (!m. ((SUC m) = (m + (NUMERAL (BIT1 _0)))))
T c= cSUC f0 c+ f0 cNUMERAL cBIT1 c_0
D MULT_0
A |- (!m. ((m * (NUMERAL _0)) = (NUMERAL _0)))
T c= c* f0 cNUMERAL c_0 cNUMERAL c_0
D MULT_SUC
A |- (!m. (!n. ((m * (SUC n)) = (m + (m * n)))))
T c= c* f0 cSUC f1 c+ f0 c* f0 f1
D EXP_2
A |- (!n. ((n EXP (NUMERAL (BIT0 (BIT1 _0)))) = (n * n)))
T c= cEXP f0 cNUMERAL cBIT0 cBIT1 c_0 c* f0 f0
D LE
A |- ((!m. ((m <= (NUMERAL _0)) = (m = (NUMERAL _0)))) /\ (!m. (!n. ((m <= (SUC n)) = ((m = (SUC n)) \/ (m <= n))))))
T c/\ ! c= c<= b0 cNUMERAL c_0 c= b0 cNUMERAL c_0 ! ! c= c<= b0 cSUC b1 c\/ c= b0 cSUC b1 c<= b0 b1
D LE_0
A |- (!n. ((NUMERAL _0) <= n))
T c<= cNUMERAL c_0 f0
D NOT_LE
A |- (!m. (!n. ((~ (m <= n)) = (n < m))))
T c= c~ c<= f0 f1 c< f1 f0
D LT_EXISTS
A |- (!m. (!n. ((m < n) = (?d. (n = (m + (SUC d)))))))
T c= c< f0 f1 c? / c= f1 c+ f0 cSUC b0
D Ssrnat.eqn_leq
A |- (!m. (!n. ((m = n) = ((m <= n) /\ (n <= m)))))
T c= c= f0 f1 c/\ c<= f0 f1 c<= f1 f0
D ARITH_ZERO
A |- (((NUMERAL (NUMERAL _0)) = (NUMERAL _0)) /\ ((BIT0 _0) = _0))
T c/\ c= cNUMERAL cNUMERAL c_0 cNUMERAL c_0 c= cBIT0 c_0 c_0
D ARITH_SUC
A |- ((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) /\ (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))))
T c/\ ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
D ARITH_ADD
A |- ((!m. (!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n))))) /\ (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))))))))))
T c/\ ! ! c= c+ cNUMERAL b0 cNUMERAL b1 cNUMERAL c+ b0 b1 c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
D ARITH_MULT
A |- ((!m. (!n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n))))) /\ (((_0 * _0) = _0) /\ ((!n. ((_0 * (BIT0 n)) = _0)) /\ ((!n. ((_0 * (BIT1 n)) = _0)) /\ ((!n. (((BIT0 n) * _0) = _0)) /\ ((!n. (((BIT1 n) * _0) = _0)) /\ ((!m. (!n. (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n)))))) /\ ((!m. (!n. (((BIT0 m) * (BIT1 n)) = ((BIT0 m) + (BIT0 (BIT0 (m * n))))))) /\ ((!m. (!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) /\ (!m. (!n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n)))))))))))))))))
T c/\ ! ! c= c* cNUMERAL b0 cNUMERAL b1 cNUMERAL c* b0 b1 c/\ c= c* c_0 c_0 c_0 c/\ ! c= c* c_0 cBIT0 b0 c_0 c/\ ! c= c* c_0 cBIT1 b0 c_0 c/\ ! c= c* cBIT0 b0 c_0 c_0 c/\ ! c= c* cBIT1 b0 c_0 c_0 c/\ ! ! c= c* cBIT0 b0 cBIT0 b1 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT0 b0 cBIT1 b1 c+ cBIT0 b0 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT1 b0 cBIT0 b1 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 ! ! c= c* cBIT1 b0 cBIT1 b1 c+ cBIT1 b0 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1
D ARITH_EXP
A |- ((!m. (!n. (((NUMERAL m) EXP (NUMERAL n)) = (NUMERAL (m EXP n))))) /\ (((_0 EXP _0) = (BIT1 _0)) /\ ((!m. (((BIT0 m) EXP _0) = (BIT1 _0))) /\ ((!m. (((BIT1 m) EXP _0) = (BIT1 _0))) /\ ((!n. ((_0 EXP (BIT0 n)) = ((_0 EXP n) * (_0 EXP n)))) /\ ((!m. (!n. (((BIT0 m) EXP (BIT0 n)) = (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) /\ ((!m. (!n. (((BIT1 m) EXP (BIT0 n)) = (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))) /\ ((!n. ((_0 EXP (BIT1 n)) = _0)) /\ ((!m. (!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))))) /\ (!m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))))))))))))))
T c/\ ! ! c= cEXP cNUMERAL b0 cNUMERAL b1 cNUMERAL cEXP b0 b1 c/\ c= cEXP c_0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT0 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT1 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP c_0 cBIT0 b0 c* cEXP c_0 b0 cEXP c_0 b0 c/\ ! ! c= cEXP cBIT0 b0 cBIT0 b1 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 c/\ ! ! c= cEXP cBIT1 b0 cBIT0 b1 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1 c/\ ! c= cEXP c_0 cBIT1 b0 c_0 c/\ ! ! c= cEXP cBIT0 b0 cBIT1 b1 c* cBIT0 b0 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 ! ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1
D REAL_ADD_SYM
A |- (!x. (!y. (((real_add x) y) = ((real_add y) x))))
T c= creal_add f0 f1 creal_add f1 f0
D REAL_ADD_ASSOC
A |- (!x. (!y. (!z. (((real_add x) ((real_add y) z)) = ((real_add ((real_add x) y)) z)))))
T c= creal_add f0 creal_add f1 f2 creal_add creal_add f0 f1 f2
D REAL_ADD_LID
A |- (!x. (((real_add (real_of_num (NUMERAL _0))) x) = x))
T c= creal_add creal_of_num cNUMERAL c_0 f0 f0
D REAL_ADD_LINV
A |- (!x. (((real_add (real_neg x)) x) = (real_of_num (NUMERAL _0))))
T c= creal_add creal_neg f0 f0 creal_of_num cNUMERAL c_0
D REAL_LE_ANTISYM
A |- (!x. (!y. ((((real_le x) y) /\ ((real_le y) x)) = (x = y))))
T c= c/\ creal_le f0 f1 creal_le f1 f0 c= f0 f1
D Real_ext.REAL_LE
A |- (!m. (!n. (((real_le (real_of_num m)) (real_of_num n)) = (m <= n))))
T c= creal_le creal_of_num f0 creal_of_num f1 c<= f0 f1
D Misc_defs_and_lemmas.REAL_ADD
A |- (!m. (!n. (((real_add (real_of_num m)) (real_of_num n)) = (real_of_num (m + n)))))
T c= creal_add creal_of_num f0 creal_of_num f1 creal_of_num c+ f0 f1
D REAL_OF_NUM_MUL
A |- (!m. (!n. (((real_mul (real_of_num m)) (real_of_num n)) = (real_of_num (m * n)))))
T c= creal_mul creal_of_num f0 creal_of_num f1 creal_of_num c* f0 f1
D real_lt
A |- (!y. (!x. (((real_lt x) y) = (~ ((real_le y) x)))))
T c= creal_lt f0 f1 c~ creal_le f1 f0
D real_ge
A |- (!y. (!x. (((real_ge x) y) = ((real_le y) x))))
T c= creal_ge f0 f1 creal_le f1 f0
D real_gt
A |- (!y. (!x. (((real_gt x) y) = ((real_lt y) x))))
T c= creal_gt f0 f1 creal_lt f1 f0
D REAL_ADD_RID
A |- (!x. (((real_add x) (real_of_num (NUMERAL _0))) = x))
T c= creal_add f0 creal_of_num cNUMERAL c_0 f0
D REAL_ADD_RINV
A |- (!x. (((real_add x) (real_neg x)) = (real_of_num (NUMERAL _0))))
T c= creal_add f0 creal_neg f0 creal_of_num cNUMERAL c_0
D REAL_MUL_RZERO
A |- (!x. (((real_mul x) (real_of_num (NUMERAL _0))) = (real_of_num (NUMERAL _0))))
T c= creal_mul f0 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
D REAL_NEGNEG
A |- (!x. ((real_neg (real_neg x)) = x))
T c= creal_neg creal_neg f0 f0
D REAL_MUL_RNEG
A |- (!x. (!y. (((real_mul x) (real_neg y)) = (real_neg ((real_mul x) y)))))
T c= creal_mul f0 creal_neg f1 creal_neg creal_mul f0 f1
D REAL_MUL_LNEG
A |- (!x. (!y. (((real_mul (real_neg x)) y) = (real_neg ((real_mul x) y)))))
T c= creal_mul creal_neg f0 f1 creal_neg creal_mul f0 f1
D REAL_NEG_ADD
A |- (!x. (!y. ((real_neg ((real_add x) y)) = ((real_add (real_neg x)) (real_neg y)))))
T c= creal_neg creal_add f0 f1 creal_add creal_neg f0 creal_neg f1
D REAL_LE_LNEG
A |- (!x. (!y. (((real_le (real_neg x)) y) = ((real_le (real_of_num (NUMERAL _0))) ((real_add x) y)))))
T c= creal_le creal_neg f0 f1 creal_le creal_of_num cNUMERAL c_0 creal_add f0 f1
D REAL_LE_NEG
A |- (!x. (!y. (((real_le (real_neg x)) (real_neg y)) = ((real_le y) x))))
T c= creal_le creal_neg f0 creal_neg f1 creal_le f1 f0
D REAL_LE_RNEG
A |- (!x. (!y. (((real_le x) (real_neg y)) = ((real_le ((real_add x) y)) (real_of_num (NUMERAL _0))))))
T c= creal_le f0 creal_neg f1 creal_le creal_add f0 f1 creal_of_num cNUMERAL c_0
D REAL_SUB_LE
A |- (!x. (!y. (((real_le (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_le y) x))))
T c= creal_le creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_le f1 f0
D REAL_NEG_SUB
A |- (!x. (!y. ((real_neg ((real_sub x) y)) = ((real_sub y) x))))
T c= creal_neg creal_sub f0 f1 creal_sub f1 f0
D REAL_LE_LT
A |- (!x. (!y. (((real_le x) y) = (((real_lt x) y) \/ (x = y)))))
T c= creal_le f0 f1 c\/ creal_lt f0 f1 c= f0 f1
D REAL_SUB_LT
A |- (!x. (!y. (((real_lt (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_lt y) x))))
T c= creal_lt creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_lt f1 f0
D REAL_SUB_0
A |- (!x. (!y. ((((real_sub x) y) = (real_of_num (NUMERAL _0))) = (x = y))))
T c= c= creal_sub f0 f1 creal_of_num cNUMERAL c_0 c= f0 f1
D Real_ext.REAL_PROP_POS_ADD2
A |- (!x. (!y. ((((real_lt (real_of_num (NUMERAL _0))) x) /\ ((real_lt (real_of_num (NUMERAL _0))) y)) ==> ((real_lt (real_of_num (NUMERAL _0))) ((real_add x) y)))))
T c==> c/\ creal_lt creal_of_num cNUMERAL c_0 f0 creal_lt creal_of_num cNUMERAL c_0 f1 creal_lt creal_of_num cNUMERAL c_0 creal_add f0 f1
D REAL_POLY_CLAUSES
A |- ((!x. (!y. (!z. (((real_add x) ((real_add y) z)) = ((real_add ((real_add x) y)) z))))) /\ ((!x. (!y. (((real_add x) y) = ((real_add y) x)))) /\ ((!x. (((real_add (real_of_num (NUMERAL _0))) x) = x)) /\ ((!x. (!y. (!z. (((real_mul x) ((real_mul y) z)) = ((real_mul ((real_mul x) y)) z))))) /\ ((!x. (!y. (((real_mul x) y) = ((real_mul y) x)))) /\ ((!x. (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) x) = x)) /\ ((!x. (((real_mul (real_of_num (NUMERAL _0))) x) = (real_of_num (NUMERAL _0)))) /\ ((!x. (!y. (!z. (((real_mul x) ((real_add y) z)) = ((real_add ((real_mul x) y)) ((real_mul x) z)))))) /\ ((!x. (((real_pow x) (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) /\ (!x. (!n. (((real_pow x) (SUC n)) = ((real_mul x) ((real_pow x) n))))))))))))))
T c/\ ! ! ! c= creal_add b0 creal_add b1 b2 creal_add creal_add b0 b1 b2 c/\ ! ! c= creal_add b0 b1 creal_add b1 b0 c/\ ! c= creal_add creal_of_num cNUMERAL c_0 b0 b0 c/\ ! ! ! c= creal_mul b0 creal_mul b1 b2 creal_mul creal_mul b0 b1 b2 c/\ ! ! c= creal_mul b0 b1 creal_mul b1 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 b0 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL c_0 b0 creal_of_num cNUMERAL c_0 c/\ ! ! ! c= creal_mul b0 creal_add b1 b2 creal_add creal_mul b0 b1 creal_mul b0 b2 c/\ ! c= creal_pow b0 cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 ! ! c= creal_pow b0 cSUC b1 creal_mul b0 creal_pow b0 b1
D REAL_POLY_NEG_CLAUSES
A |- ((!x. ((real_neg x) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) x))) /\ (!x. (!y. (((real_sub x) y) = ((real_add x) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) y))))))
T c/\ ! c= creal_neg b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b0 ! ! c= creal_sub b0 b1 creal_add b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b1
D int_le
A |- (!x. (!y. (((int_le x) y) = ((real_le (real_of_int x)) (real_of_int y)))))
T c= cint_le f0 f1 creal_le creal_of_int f0 creal_of_int f1
D int_of_num_th
A |- (!n. ((real_of_int (int_of_num n)) = (real_of_num n)))
T c= creal_of_int cint_of_num f0 creal_of_num f0
D int_add_th
A |- (!x. (!y. ((real_of_int ((int_add x) y)) = ((real_add (real_of_int x)) (real_of_int y)))))
T c= creal_of_int cint_add f0 f1 creal_add creal_of_int f0 creal_of_int f1
D INT_LT_DISCRETE
A |- (!x. (!y. (((int_lt x) y) = ((int_le ((int_add x) (int_of_num (NUMERAL (BIT1 _0))))) y))))
T c= cint_lt f0 f1 cint_le cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 f1
D INT_NOT_LE
A |- (!x. (!y. ((~ ((int_le x) y)) = ((int_lt y) x))))
T c= c~ cint_le f0 f1 cint_lt f1 f0
D INT_OF_NUM_ADD
A |- (!m. (!n. (((int_add (int_of_num m)) (int_of_num n)) = (int_of_num (m + n)))))
T c= cint_add cint_of_num f0 cint_of_num f1 cint_of_num c+ f0 f1
D INT_OF_NUM_LE
A |- (!m. (!n. (((int_le (int_of_num m)) (int_of_num n)) = (m <= n))))
T c= cint_le cint_of_num f0 cint_of_num f1 c<= f0 f1
D INT_OF_NUM_LT
A |- (!m. (!n. (((int_lt (int_of_num m)) (int_of_num n)) = (m < n))))
T c= cint_lt cint_of_num f0 cint_of_num f1 c< f0 f1
D INT_POS
A |- (!n. ((int_le (int_of_num (NUMERAL _0))) (int_of_num n)))
T cint_le cint_of_num cNUMERAL c_0 cint_of_num f0
D IN
A |- (!P. (!x. ((x IN P) = (P x))))
T c= cIN f0 f1 * f1 f0
D EXTENSION
A |- (!s. (!t. ((s = t) = (!x. ((x IN s) = (x IN t))))))
T c= c= f0 f1 ! c= cIN b0 f0 cIN b0 f1
D Hypermap_iso.inE
A |- ((!p. (!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x)))) /\ ((!P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) /\ ((!p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) /\ (!p. (!x. ((x IN (\y. (p y))) = (p x)))))))
T c/\ ! ! c= cIN b1 * part cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 * b0 b1 c/\ ! ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 c/\ ! ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 ! ! c= cIN b1 / * b0 b2 * b0 b1
D NOT_IN_EMPTY
A |- (!x. (~ (x IN EMPTY)))
T c~ cIN f0 part cEMPTY
D Fan.POWER
A |- ((!f. (((POWER f) (NUMERAL _0)) = I)) /\ (!f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))))
T c/\ ! c= * * part cPOWER b0 cNUMERAL c_0 part cI ! ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0
D Fan.POWER_0
A |- (!f. (((POWER f) (NUMERAL _0)) = I))
T c= * * part cPOWER f0 cNUMERAL c_0 part cI
D Hypermap.COM_POWER
A |- (!n. (!f. (((POWER f) (SUC n)) = (f o ((POWER f) n)))))
T c= * * part cPOWER f0 cSUC f1 * * part co f0 * * part cPOWER f0 f1
D Tame_list.POWER_TO_ITER
A |- (!n. (((POWER f) n) = ((ITER n) f)))
T c= * * part cPOWER f0 f1 * * part cITER f1 f0
D Seq.allPn
A |- (!a. (!s. ((?x. (((MEM x) s) /\ (~ (a x)))) = (~ ((all a) s)))))
T c= c? / c/\ cMEM b0 f0 c~ * f1 b0 c~ call f1 f0
D List_hypermap.dart_in_face
A |- (!d. (!L. (((MEM d) (list_of_darts L)) = ((MEM d) ((find_face L) d)))))
T c= cMEM f0 clist_of_darts f1 cMEM f0 cfind_face f1 f0
D List_hypermap.uniq_find_face
A |- (!d. (!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d)))))
T c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1
D List_hypermap.mem_find_face_imp_faces_eq
A |- (!d1. (!d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM d1) ((find_face L) d2))) ==> (((find_face L) d1) = ((find_face L) d2))))))
T c==> c/\ cuniq clist_of_darts f0 cMEM f1 cfind_face f0 f2 c= cfind_face f0 f1 cfind_face f0 f2
D Tame_defs2.good_list
A |- (!L. ((good_list L) = ((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L))))))))
T c= cgood_list f0 c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0
D Tame_defs2.normal_list
A |- (!L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))))))))))
T c= cnormal_list f0 f1 c/\ cuniq cflatten f1 c/\ call / c~ c= b0 cNIL f1 c/\ call * part cf_last f0 f1 c/\ call * part cloop_list f0 f1 ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1
D Tame_defs2.final_list
A |- (!L. (!r. (((final_list L) r) = ((all (\d. (((f_list L) d) = ((next_el r) d)))) r))))
T c= cfinal_list f0 f1 call / c= cf_list f0 b0 cnext_el f1 b0 f1
D Tame_defs2.l_m
A |- (!L. (!r. (!x. ((((l'm L) r) x) = (min_num (GSPEC (\GEN%PVAR%8605. (?m. (((SETSPEC GEN%PVAR%8605) (~ ((((ITER (SUC (SUC m))) (next_el r)) x) = ((f_list L) (((ITER (SUC m)) (next_el r)) x))))) m)))))))))
T c= cl'm f0 f1 f2 cmin_num * part cGSPEC / c? / cSETSPEC b0 c~ c= cITER cSUC cSUC b1 * part cnext_el f1 f2 cf_list f0 cITER cSUC b1 * part cnext_el f1 f2 b1
D Tame_defs2.ytrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x)))))))
T c= cytrans f0 f1 f2 f3 f4 cl'y f0 crtrans f0 f1 f2 f3 f4 f3
D Tame_defs2.marked_list
A |- (!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))))))
T c= cmarked_list f0 f1 f2 f3 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM f3 f2 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c/\ c= cnext_el f2 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 f3
D Tame_list.indexf_n
A |- (!x. (!y. (!s. ((((MEM x) s) /\ (((MEM y) s) /\ (uniq s))) ==> ((((POWER (next_el s)) (((indexf x) y) s)) x) = y)))))
T c==> c/\ cMEM f0 f1 c/\ cMEM f2 f1 cuniq f1 c= cPOWER * part cnext_el f1 cindexf f0 f2 f1 f0 f2
D Tame_list.uniq_flatten_uniq
A |- (!L. (!s. (((uniq (flatten L)) /\ ((MEM s) L)) ==> (uniq s))))
T c==> c/\ cuniq cflatten f0 cMEM f1 f0 cuniq f1
D Tame_list.AQIUNPP3
A |- (!L. (!i. (!N. (!r. (!x. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x)))) ==> ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))))))
T c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 f1 f2 f3 cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3
D Pwssrat.MEM_POWER_NEXT_EL
A |- (!k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r)))
T c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 f2 f0 f1
D Pwssrat.f_list_power_next_el
A |- (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y))))
T c==> c/\ cuniq clist_of_darts f0 cMEM f1 clist_of_darts f0 c= cPOWER * part cf_list f0 f2 f1 cPOWER * part cnext_el cfind_face f0 f1 f2 f1
D Pplhulj.marked_list_of_dart
A |- (!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))))
T c==> cmarked_list f0 f1 f2 f3 cMEM f3 clist_of_darts f0
D Pplhulj.indexf_ytrans_eq_l_m
A |- (!L. (!N. (!r. (!x. (!d. (!i. (!f. (!w. (((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x)))))))) ==> ((((indexf w) (((((ytrans L) N) r) x) i)) f) = (((l'm L) (((((rtrans L) N) r) x) i)) x)))))))))))
T c==> c/\ c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= f5 cfind_face f0 f3 c= f6 cnext_el f5 f3 c= cindexf f6 cytrans f0 f1 f2 f3 f4 f5 cl'm f0 crtrans f0 f1 f2 f3 f4 f3
D Ncvibwu.next_mark_mem_r_trans
A |- (!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i))))))))))
T c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 f4 c= cnext_el f4 f3 f5 cMEM f5 crtrans f0 f1 f2 f3 f6
D Ncvibwu.NCVIBWU
A |- (!L. (!N. (!r. (!f. (!w. (!x. (!i. (!j. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((((find_face L) x) = f) /\ ((((next_el f) x) = w) /\ (j <= (((indexf w) (((((ztrans L) N) r) x) i)) f))))))))) ==> (((MEM (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) /\ ((((indexf w) (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) = j)))))))))))
T c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c/\ c= cfind_face f0 f3 f5 c/\ c= cnext_el f5 f3 f6 c<= f7 cindexf f6 cztrans f0 f1 f2 f3 f4 f5 c/\ cMEM cPOWER * part cnext_el f5 f7 f6 crtrans f0 f1 f2 f3 cSUC f4 c= cindexf f6 cPOWER * part cnext_el f5 f7 f6 crtrans f0 f1 f2 f3 cSUC f4 f7
D Qcdvkea.min_num_le
A |- ((((min_num (GSPEC (\GEN%PVAR%8675. (?m. (((SETSPEC GEN%PVAR%8675) (P m)) m))))) = n) /\ ((!i. ((i < m) ==> (~ (P i)))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (P m)) m)))) = EMPTY)))) ==> (m <= n))
T c==> c/\ c= cmin_num * part cGSPEC / c? / cSETSPEC b0 * f0 b1 b1 f1 c/\ ! c==> c< b0 f2 c~ * f0 b0 c~ c= * part cGSPEC / c? / cSETSPEC b0 * f0 b1 b1 part cEMPTY c<= f2 f1
D Qcdvkea.FINAL_LIST_INDUCT
A |- (!L. (!N. (!r. (!x. (!i. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))))))) ==> (~ ((final_list L) (((((rtrans L) N) r) x) i)))))))))
T c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4
- |- (((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F) ==> ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F))
T c==> c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF
+ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- ((((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))))))) ==> (~ ((final_list L) (((((rtrans L) N) r) x) i)))) ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cfind_face f0 f3 f5 c==> cmarked_list f0 f1 f2 f3 c==> c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
+ (uniq r2), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((MEM w) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2) |- ((((((POWER (next_el r2)) (SUC i')) w) = (((POWER (next_el f)) (SUC i')) w)) ==> ((((POWER (next_el r2)) i') ((next_el r2) w)) = ((f_list L) (((POWER (next_el f)) i') w)))) = (((((MEM w) r2) /\ (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) /\ (uniq r2))) ==> ((((POWER (next_el r2)) (((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2)) w) = (((POWER (next_el f)) (SUC i')) w))) ==> ((((POWER (next_el r2)) i') ((next_el r2) w)) = ((f_list L) (((POWER (next_el f)) i') w)))))
T c==> cuniq f0 c==> c= cindexf f1 cPOWER * part cnext_el f2 cSUC f3 f1 f0 cSUC f3 c==> cMEM f1 f0 c==> cMEM cPOWER * part cnext_el f2 cSUC f3 f1 f0 c= c==> c= cPOWER * part cnext_el f0 cSUC f3 f1 cPOWER * part cnext_el f2 cSUC f3 f1 c= cPOWER * part cnext_el f0 f3 cnext_el f0 f1 cf_list f4 cPOWER * part cnext_el f2 f3 f1 c==> c==> c/\ cMEM f1 f0 c/\ cMEM cPOWER * part cnext_el f2 cSUC f3 f1 f0 cuniq f0 c= cPOWER * part cnext_el f0 cindexf f1 cPOWER * part cnext_el f2 cSUC f3 f1 f0 f1 cPOWER * part cnext_el f2 cSUC f3 f1 c= cPOWER * part cnext_el f0 f3 cnext_el f0 f1 cf_list f4 cPOWER * part cnext_el f2 f3 f1
- (~ (A a)), ((A a) /\ (!a. (~ (A a)))) |- ((~ (A a)) /\ (A a))
T c==> c~ * f0 f1 c==> c/\ * f0 f1 ! c~ * f0 b0 c/\ c~ * f0 f1 * f0 f1
+ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w))), ((((marked_list L) N) r) x) |- ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 f5 c= cnext_el f5 f3 f6 c==> cmarked_list f0 f1 f2 f3 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
- (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019)))) (real_of_num (NUMERAL _0)))))) |- ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f)
T * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0
+ (uniq f), (uniq r2), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM x) (list_of_darts L)), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((((marked_list L) N) r) x) |- ((!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))) ==> ((((POWER (next_el r2)) i') ((next_el r2) w)) = ((f_list L) (((POWER (next_el r2)) i') w))))
T c==> cuniq f0 c==> cuniq f1 c==> cuniq clist_of_darts f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f0 f3 f4 c==> c= cindexf f4 cPOWER * part cnext_el f0 f5 f4 f1 f5 c==> c= cindexf f4 cPOWER * part cnext_el f0 cSUC f5 f4 f1 cSUC f5 c==> c= cfind_face f2 f3 f0 c==> c= crtrans f2 f6 f7 f3 cSUC f8 f1 c==> cMEM f3 clist_of_darts f2 c==> cMEM cPOWER * part cnext_el f0 f5 f4 f1 c==> cMEM cPOWER * part cnext_el f0 cSUC f5 f4 f1 c==> cmarked_list f2 f6 f7 f3 c==> ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 c= cPOWER * part cnext_el f1 f5 cnext_el f1 f4 cf_list f2 cPOWER * part cnext_el f1 f5 f4
+ ((A a) /\ (!a. (~ (A a)))) |- ((\a. (~ (A a))) _10304017)
T c==> c/\ * f0 f1 ! c~ * f0 b0 * / c~ * f0 b0 f2
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((all (loop_list L)) (((((ntrans L) N) r) x) i)) /\ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i))))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c/\ call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ |- ((\d. (!L. (((MEM d) (list_of_darts L)) = ((MEM d) ((find_face L) d))))) d)
T * / ! c= cMEM b0 clist_of_darts b1 cMEM b0 cfind_face b1 b0 f0
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((MEM x) r2) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) /\ ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((next_el r2) x))) = ((f_list L) (((POWER (next_el r2)) i') ((next_el r2) x))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> c/\ cMEM f3 f12 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ c= cnext_el f12 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f10 f5 c==> c<= cSUC f11 cindexf f6 f10 f5 c==> c< f11 cindexf f6 f10 f5 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cnext_el f12 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cnext_el f12 f3
- |- ((((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F) ==> ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F)) ==> (((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F) ==> ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F)))
T c==> c==> c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF
+ (~ (((f_list L) x') = ((next_el r2) x'))), (uniq (list_of_darts L)), (((next_el f) x) = w), (((next_el r2) x) = ((f_list L) x)), ((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x'), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- ((((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))) ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cuniq clist_of_darts f0 c==> c= cnext_el f3 f4 f5 c==> c= cnext_el f2 f4 cf_list f0 f4 c==> c= cPOWER * part cnext_el f2 cindexf f5 f1 f2 f5 f1 c==> c= cfind_face f0 f4 f3 c==> cmarked_list f0 f6 f7 f4 c==> c==> cmarked_list f0 f6 f7 f4 cMEM f4 clist_of_darts f0 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f5 f1 f2 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f5 f1 f2 cf_list f0 f4 c~ c= cindexf f5 cl'y f0 f2 f4 f3 cl'm f0 f2 f4
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((MEM (((POWER (next_el f)) i') w)) r2) /\ ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i')) ==> ((((POWER (next_el r2)) (SUC (SUC i'))) x) = ((f_list L) (((POWER (next_el r2)) (SUC i')) x))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f10 f5 c==> c<= cSUC f11 cindexf f6 f10 f5 c==> c< f11 cindexf f6 f10 f5 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c/\ cMEM cPOWER * part cnext_el f5 f11 f6 f12 c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c= cPOWER * part cnext_el f12 cSUC cSUC f11 f3 cf_list f0 cPOWER * part cnext_el f12 cSUC f11 f3
+ ((\a. (((!x. (~ (A x))) /\ (A a)) \/ ((A a) /\ (!a. (~ (A a)))))) a) |- (((!x. (~ (A x))) /\ (A a)) \/ ((A a) /\ (!a. (~ (A a)))))
T c==> * / c\/ c/\ ! c~ * f0 b1 * f0 b0 c/\ * f0 b0 ! c~ * f0 b1 f1 c\/ c/\ ! c~ * f0 b0 * f0 f1 c/\ * f0 f1 ! c~ * f0 b0
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> ! c= cPOWER * part cnext_el f8 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f8 cSUC b0 f3 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c~ c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3
- (!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))) |- (((!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))) ==> ((\i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))) i)) = ((\i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))) i))
T c==> ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 c= c==> ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 b1 c= cnext_el b1 f3 b2 cMEM b2 crtrans f0 f1 f2 f3 b0 * / ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 b1 c= cnext_el b1 f3 b2 cMEM b2 crtrans f0 f1 f2 f3 b0 f4 * / ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 b1 c= cnext_el b1 f3 b2 cMEM b2 crtrans f0 f1 f2 f3 b0 f4
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f8 f5 c==> c<= cSUC f11 cindexf f6 f8 f5 c==> c< f11 cindexf f6 f8 f5 c==> cMEM f3 f7 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c/\ cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f12 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f12 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cf_list f0 f3
+ (~ (?a. (a IN (GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((POWER (next_el r2)) (SUC (SUC m))) x) = ((f_list L) (((POWER (next_el r2)) (SUC m)) x))))) m))))))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- F
T c==> c~ c? / cIN b0 * part cGSPEC / c? / cSETSPEC b1 c~ c= cPOWER * part cnext_el f0 cSUC cSUC b2 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b2 f1 b2 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 f5 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 cSUC f5 c==> cis_restricted chypermap_of_list f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f6 f1 f7 c==> c= cnext_el crtrans f2 f3 f4 f1 f5 f1 cf_list f2 f1 c==> c= cprev_el f8 cztrans f2 f3 f4 f1 f5 f9 c==> c= cl'y f2 f8 f1 f10 c==> c= cztrans f2 f3 f4 f1 f5 f11 c==> c= cindexf f7 cytrans f2 f3 f4 f1 cSUC f5 f6 cl'm f2 f0 f1 c==> c= cfind_face f2 f1 f6 c==> c= crtrans f2 f3 f4 f1 f5 f8 c==> c= crtrans f2 f3 f4 f1 cSUC f5 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f3 f4 f1 f5 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f3 f4 f1 f5 c==> cMEM f1 crtrans f2 f3 f4 f1 f5 c==> cMEM crtrans f2 f3 f4 f1 f5 cntrans f2 f3 f4 f1 f5 c==> cnormal_list f2 cntrans f2 f3 f4 f1 f5 c==> cs_flag_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 c==> cmarked_list f2 f3 f4 f1 c==> cmarked_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 cF
+ |- (((!x. (!d. (!i. (!f. (!w. (((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x)))))))) ==> ((((indexf w) (((((ytrans L) N) r) x) i)) f) = (((l'm L) (((((rtrans L) N) r) x) i)) x)))))))) ==> ((\x. (!d. (!i. (!f. (!w. (((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x)))))))) ==> ((((indexf w) (((((ytrans L) N) r) x) i)) f) = (((l'm L) (((((rtrans L) N) r) x) i)) x)))))))) x)) = ((\x. (!d. (!i. (!f. (!w. (((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x)))))))) ==> ((((indexf w) (((((ytrans L) N) r) x) i)) f) = (((l'm L) (((((rtrans L) N) r) x) i)) x)))))))) x))
T c= c==> ! ! ! ! ! c==> c/\ c~ cfinal_list f0 crtrans f0 f1 f2 b0 b2 c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c= b3 cfind_face f0 b0 c= b4 cnext_el b3 b0 c= cindexf b4 cytrans f0 f1 f2 b0 b2 b3 cl'm f0 crtrans f0 f1 f2 b0 b2 b0 * / ! ! ! ! c==> c/\ c~ cfinal_list f0 crtrans f0 f1 f2 b0 b2 c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c= b3 cfind_face f0 b0 c= b4 cnext_el b3 b0 c= cindexf b4 cytrans f0 f1 f2 b0 b2 b3 cl'm f0 crtrans f0 f1 f2 b0 b2 b0 f3 * / ! ! ! ! c==> c/\ c~ cfinal_list f0 crtrans f0 f1 f2 b0 b2 c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c= b3 cfind_face f0 b0 c= b4 cnext_el b3 b0 c= cindexf b4 cytrans f0 f1 f2 b0 b2 b3 cl'm f0 crtrans f0 f1 f2 b0 b2 b0 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((normal_list L) (((((ntrans L) N) r) x) i)) ==> (((MEM r1) (((((ntrans L) N) r) x) i)) ==> (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f5 f3 f6 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c==> cMEM f6 f8 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f8 c==> c= cPOWER * part cnext_el f8 cindexf f6 f12 f8 f6 f12 c==> c= co * part cnext_el f8 * * part cPOWER * part cnext_el f8 cSUC cindexf f6 f12 f8 f3 cf_list f0 cPOWER * part cnext_el f8 cindexf f6 f12 f8 cf_list f0 f3 c~ c= cindexf f6 cl'y f0 f8 f3 f5 cl'm f0 f8 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f5 f3 f6 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c==> cMEM f6 f8 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f8 c==> c= cPOWER * part cnext_el f8 cindexf f6 f12 f8 f6 f12 c==> c= co * part cnext_el f8 * * part cPOWER * part cnext_el f8 cSUC cindexf f6 f12 f8 f3 cf_list f0 cPOWER * part cnext_el f8 cindexf f6 f12 f8 cf_list f0 f3 c~ c= cindexf f6 cl'y f0 f8 f3 f5 cl'm f0 f8 f3
+ |- ((t = F) = (~ t))
T c= c= f0 cF c~ f0
+ (~ (((f_list L) x') = ((next_el r2) x'))), (uniq (list_of_darts L)), (((next_el f) x) = w), (((next_el r2) x) = ((f_list L) x)), ((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x'), (((find_face L) x) = f), ((MEM x) (list_of_darts L)) |- ((((uniq (list_of_darts L)) /\ ((MEM x) (list_of_darts L))) ==> ((((POWER (f_list L)) (SUC (NUMERAL _0))) x) = (((POWER (next_el ((find_face L) x))) (SUC (NUMERAL _0))) x))) ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cuniq clist_of_darts f0 c==> c= cnext_el f3 f4 f5 c==> c= cnext_el f2 f4 cf_list f0 f4 c==> c= cPOWER * part cnext_el f2 cindexf f5 f1 f2 f5 f1 c==> c= cfind_face f0 f4 f3 c==> cMEM f4 clist_of_darts f0 c==> c==> c/\ cuniq clist_of_darts f0 cMEM f4 clist_of_darts f0 c= cPOWER * part cf_list f0 cSUC cNUMERAL c_0 f4 cPOWER * part cnext_el cfind_face f0 f4 cSUC cNUMERAL c_0 f4 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f5 f1 f2 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f5 f1 f2 cf_list f0 f4 c~ c= cindexf f5 cl'y f0 f2 f4 f3 cl'm f0 f2 f4
+ (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> c~ cfinal_list f0 crtrans f0 f3 f4 f5 f6 c==> c~ cfinal_list f0 crtrans f0 f3 f4 f5 cSUC f6 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f7 f5 f8 c==> c= cnext_el f9 f5 cf_list f0 f5 c==> c= cprev_el f9 f10 f11 c==> c= cl'y f0 f9 f5 f12 c==> c= cztrans f0 f3 f4 f5 f6 f10 c==> c= cfind_face f0 f5 f7 c==> c= crtrans f0 f3 f4 f5 f6 f9 c==> c= crtrans f0 f3 f4 f5 cSUC f6 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f3 f4 f5 f6 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f3 f4 f5 f6 c==> cMEM f5 f9 c==> cMEM f1 f2 c==> cMEM f9 cntrans f0 f3 f4 f5 f6 c==> cnormal_list f0 cntrans f0 f3 f4 f5 f6 c==> cs_flag_list f0 cntrans f0 f3 f4 f5 f6 f9 f5 c==> cmarked_list f0 f3 f4 f5 c==> cmarked_list f0 cntrans f0 f3 f4 f5 f6 crtrans f0 f3 f4 f5 f6 f5 c==> cuniq cflatten cntrans f0 f3 f4 f5 f6 c==> call / c~ c= b0 cNIL cntrans f0 f3 f4 f5 f6 c==> call * part cf_last f0 cntrans f0 f3 f4 f5 f6 c==> call * part cloop_list f0 cntrans f0 f3 f4 f5 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f3 f4 f5 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f3 f4 f5 f6 c==> cuniq f9 c==> cMEM f8 f2 c==> cmarked_list f0 cntrans f0 f3 f4 f5 cSUC f6 f2 f5 c==> cnormal_list f0 cntrans f0 f3 f4 f5 cSUC f6 c==> cMEM f2 cntrans f0 f3 f4 f5 cSUC f6 c==> cMEM f5 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f3 f4 f5 cSUC f6 c==> c= cnext_el f2 f5 cf_list f0 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f3 f4 f5 cSUC f6 ce_list f5 c==> cs_flag_list f0 cntrans f0 f3 f4 f5 cSUC f6 f2 f5 c==> cuniq cflatten cntrans f0 f3 f4 f5 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f3 f4 f5 cSUC f6 c==> call * part cf_last f0 cntrans f0 f3 f4 f5 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f3 f4 f5 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f3 f4 f5 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f3 f4 f5 cSUC f6 c==> cuniq f2 c==> c= cPOWER * part cnext_el f2 cindexf f8 f1 f2 f8 f1 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f8 f1 f2 f5 cf_list f0 cPOWER * part cnext_el f2 cindexf f8 f1 f2 cf_list f0 f5 c~ c= cindexf f8 cl'y f0 f2 f5 f7 cl'm f0 f2 f5
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((MEM (((POWER (next_el f)) i') w)) r2) /\ (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f8 f5 c==> c<= cSUC f11 cindexf f6 f8 f5 c==> c< f11 cindexf f6 f8 f5 c==> cMEM f3 f7 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f12 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f12 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cf_list f0 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f11 cindexf f6 f8 f5 c==> c<= cSUC f11 cindexf f6 f8 f5 c==> c< f11 cindexf f6 f8 f5 c==> cMEM f3 f7 c==> cMEM f3 f12 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> c= cnext_el f12 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cf_list f0 f3
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f6 f3 f7 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f5 f9 f10 c==> c= cl'y f0 f5 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f7 cPOWER * part cnext_el f6 f12 f7 f8 f12 c==> c= cindexf f7 cPOWER * part cnext_el f6 cSUC f12 f7 f8 cSUC f12 c==> c= cindexf f7 cytrans f0 f1 f2 f3 cSUC f4 f6 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f6 c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f7 f9 f6 c==> c<= cSUC f12 cindexf f7 f9 f6 c==> c< f12 cindexf f7 f9 f6 c==> cMEM f3 f5 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f6 f12 f7 f8 c==> cMEM cPOWER * part cnext_el f6 cSUC f12 f7 f8 c==> cMEM f5 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f5 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f8 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((((marked_list L) N) r) x) |- ((((find_face L) x) = f) ==> ((((next_el f) x) = w) ==> ((~ ((final_list L) r1)) ==> (((((marked_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) (((((ntrans L) N) r) x) i)) ==> (((MEM r1) (((((ntrans L) N) r) x) i)) ==> (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cmarked_list f0 f1 f2 f3 c==> c= cfind_face f0 f3 f6 c==> c= cnext_el f6 f3 f7 c==> c~ cfinal_list f0 f8 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 f8 f3 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f8 f3 c==> c= crtrans f0 f1 f2 f3 f4 f8 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> c= cl'y f0 f8 f3 f9 c==> c= cprev_el f8 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> cMEM f12 f5 c==> c~ c= cf_list f0 f12 cnext_el f5 f12 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f8 c==> cMEM f7 f5 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f7 f12 f5 f7 f12 c==> c= co * part cnext_el f5 * * part cPOWER * part cnext_el f5 cSUC cindexf f7 f12 f5 f3 cf_list f0 cPOWER * part cnext_el f5 cindexf f7 f12 f5 cf_list f0 f3 c~ c= cindexf f7 cl'y f0 f5 f3 f6 cl'm f0 f5 f3
- |- ((t /\ T) = t)
T c= c/\ f0 cT f0
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((((ztrans L) N) r) x) i) = z) ==> ((!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> ! c= cPOWER * part cnext_el f11 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f11 cSUC b0 f3 c==> cMEM f12 f11 c==> c~ c= cf_list f0 f12 cnext_el f11 f12 c~ c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM w) r2), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((MEM w) r2) /\ (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ cMEM f9 f5 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ ((\a. (((!x. (~ (A x))) /\ (A a)) \/ ((A a) /\ (!a. (~ (A a)))))) a) |- (((((!x. (~ (A x))) /\ (A a)) \/ ((A a) /\ (!a. (~ (A a))))) ==> F) = F)
T c==> * / c\/ c/\ ! c~ * f0 b1 * f0 b0 c/\ * f0 b0 ! c~ * f0 b1 f1 c= c==> c\/ c/\ ! c~ * f0 b0 * f0 f1 c/\ * f0 f1 ! c~ * f0 b0 cF cF
+ (uniq f), (uniq r2), (uniq (list_of_darts L)), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((MEM x) (list_of_darts L)), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2) |- (((MEM w) r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) w)) = ((f_list L) (((POWER (next_el r2)) i') w))))
T c==> cuniq f0 c==> cuniq f1 c==> cuniq clist_of_darts f2 c==> c= cnext_el f0 f3 f4 c==> c= cindexf f4 cPOWER * part cnext_el f0 f5 f4 f1 f5 c==> c= cindexf f4 cPOWER * part cnext_el f0 cSUC f5 f4 f1 cSUC f5 c==> c= cfind_face f2 f3 f0 c==> cMEM f3 clist_of_darts f2 c==> cMEM cPOWER * part cnext_el f0 f5 f4 f1 c==> cMEM cPOWER * part cnext_el f0 cSUC f5 f4 f1 c==> cMEM f4 f1 c= cPOWER * part cnext_el f1 f5 cnext_el f1 f4 cf_list f2 cPOWER * part cnext_el f1 f5 f4
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((((marked_list L) N) r) x) |- (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) /\ (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> c= crtrans f0 f4 f5 f2 cSUC f6 f7 c==> cMEM cPOWER * part cnext_el f1 cSUC f8 f3 f7 c==> cmarked_list f0 f4 f5 f2 c/\ cMEM cPOWER * part cnext_el f1 cSUC f8 f3 f7 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f8 f3 f7 cSUC f8 c==> cMEM cPOWER * part cnext_el f1 f8 f3 f7 c==> c= cindexf f3 cPOWER * part cnext_el f1 f8 f3 f7 f8 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f6 f7 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f7 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f2 f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> c= cnext_el f7 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f6 f7 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f6 c==> cuniq f9 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> cuniq f7 c= cPOWER * part cnext_el f7 f8 cnext_el f7 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f7 f8 cf_list f0 f2
- (!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))) |- (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))
T c==> ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 b0 c= cnext_el b0 f3 b1 cMEM b1 crtrans f0 f1 f2 f3 f4
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> ! c= cPOWER * part cnext_el f11 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f11 cSUC b0 f3 c==> cMEM f12 f11 c==> c~ c= cf_list f0 f12 cnext_el f11 f12 c~ c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3
+ (good_list L), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- ((((find_face L) x) = f) /\ ((((next_el f) x) = w) ==> ((~ ((final_list L) r1)) ==> (((((marked_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) (((((ntrans L) N) r) x) i)) ==> (((MEM r1) (((((ntrans L) N) r) x) i)) ==> (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> c= cfind_face f0 f1 f2 c==> cmarked_list f0 f3 f4 f1 c/\ c= cfind_face f0 f1 f2 c==> c= cnext_el f2 f1 f5 c==> c~ cfinal_list f0 f6 c==> cmarked_list f0 cntrans f0 f3 f4 f1 f7 f6 f1 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 cntrans f0 f3 f4 f1 f7 c==> cMEM f6 cntrans f0 f3 f4 f1 f7 c==> cMEM f1 f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f3 f4 f1 f7 c==> c= cnext_el f6 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f3 f4 f1 f7 ce_list f1 c==> cs_flag_list f0 cntrans f0 f3 f4 f1 f7 f6 f1 c==> c= crtrans f0 f3 f4 f1 f7 f6 c==> c= crtrans f0 f3 f4 f1 cSUC f7 f8 c==> c= cl'y f0 f6 f1 f9 c==> c= cprev_el f6 f10 f11 c==> c= cztrans f0 f3 f4 f1 f7 f10 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c==> cuniq cflatten cntrans f0 f3 f4 f1 f7 c==> call / c~ c= b0 cNIL cntrans f0 f3 f4 f1 f7 c==> call * part cf_last f0 cntrans f0 f3 f4 f1 f7 c==> call * part cloop_list f0 cntrans f0 f3 f4 f1 f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f3 f4 f1 f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f3 f4 f1 f7 c==> cuniq f6 c==> cMEM f5 f8 c==> cmarked_list f0 cntrans f0 f3 f4 f1 cSUC f7 f8 f1 c==> cnormal_list f0 cntrans f0 f3 f4 f1 cSUC f7 c==> cMEM f8 cntrans f0 f3 f4 f1 cSUC f7 c==> cMEM f1 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f3 f4 f1 cSUC f7 c==> c= cnext_el f8 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f3 f4 f1 cSUC f7 ce_list f1 c==> cs_flag_list f0 cntrans f0 f3 f4 f1 cSUC f7 f8 f1 c==> cuniq cflatten cntrans f0 f3 f4 f1 cSUC f7 c==> call / c~ c= b0 cNIL cntrans f0 f3 f4 f1 cSUC f7 c==> call * part cf_last f0 cntrans f0 f3 f4 f1 cSUC f7 c==> call * part cloop_list f0 cntrans f0 f3 f4 f1 cSUC f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f3 f4 f1 cSUC f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f3 f4 f1 cSUC f7 c==> cuniq f8 c==> c= cPOWER * part cnext_el f8 cindexf f5 f12 f8 f5 f12 c==> c= co * part cnext_el f8 * * part cPOWER * part cnext_el f8 cSUC cindexf f5 f12 f8 f1 cf_list f0 cPOWER * part cnext_el f8 cindexf f5 f12 f8 cf_list f0 f1 c~ c= cindexf f5 cl'y f0 f8 f1 f2 cl'm f0 f8 f1
+ |- ((((((POWER (next_el r2)) i') ((next_el r2) w)) = (((POWER (next_el f)) (SUC i')) w)) ==> ((((POWER (next_el r2)) i') ((next_el r2) w)) = ((f_list L) (((POWER (next_el f)) i') w)))) = ((((\x. (((POWER (next_el r2)) i') ((next_el r2) x))) w) = (((POWER (next_el f)) (SUC i')) w)) ==> ((((POWER (next_el r2)) i') ((next_el r2) w)) = ((f_list L) (((POWER (next_el f)) i') w)))))
T c= c==> c= cPOWER * part cnext_el f0 f1 cnext_el f0 f2 cPOWER * part cnext_el f3 cSUC f1 f2 c= cPOWER * part cnext_el f0 f1 cnext_el f0 f2 cf_list f4 cPOWER * part cnext_el f3 f1 f2 c==> c= * / cPOWER * part cnext_el f0 f1 cnext_el f0 b0 f2 cPOWER * part cnext_el f3 cSUC f1 f2 c= cPOWER * part cnext_el f0 f1 cnext_el f0 f2 cf_list f4 cPOWER * part cnext_el f3 f1 f2
- |- (((!x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) ==> ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x)) = ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x))
T c= c==> ! ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0 * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
- ((((((rtrans L) N) r) x) i) = r1), ((MEM x) (((((rtrans L) N) r) x) i)) |- (((MEM x) r1) = T)
T c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c= cMEM f3 f5 cT
+ ((((((ztrans L) N) r) x) i) = z) |- (((((indexf w) z) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)) = ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))
T c==> c= cztrans f0 f1 f2 f3 f4 f5 c= c<= cindexf f6 f5 f7 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f7 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f7 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f7
- ((!i. ((i < (((indexf w) z) f)) ==> ((((ITER (SUC (SUC i))) (next_el r2)) x) = ((f_list L) (((ITER (SUC i)) (next_el r2)) x))))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)))) = EMPTY))), (((!i. ((i < (((indexf w) z) f)) ==> ((((ITER (SUC (SUC i))) (next_el r2)) x) = ((f_list L) (((ITER (SUC i)) (next_el r2)) x))))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)))) = EMPTY))) ==> ((((indexf w) z) f) <= (((l'm L) r2) x))) |- (((!i. ((i < (((indexf w) z) f)) ==> ((((ITER (SUC (SUC i))) (next_el r2)) x) = ((f_list L) (((ITER (SUC i)) (next_el r2)) x))))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)))) = EMPTY))) /\ ((((indexf w) z) f) <= (((l'm L) r2) x)))
T c==> c/\ ! c==> c< b0 cindexf f0 f1 f2 c= cITER cSUC cSUC b0 * part cnext_el f3 f4 cf_list f5 cITER cSUC b0 * part cnext_el f3 f4 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cITER cSUC cSUC b1 * part cnext_el f3 f4 cf_list f5 cITER cSUC b1 * part cnext_el f3 f4 b1 part cEMPTY c==> c==> c/\ ! c==> c< b0 cindexf f0 f1 f2 c= cITER cSUC cSUC b0 * part cnext_el f3 f4 cf_list f5 cITER cSUC b0 * part cnext_el f3 f4 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cITER cSUC cSUC b1 * part cnext_el f3 f4 cf_list f5 cITER cSUC b1 * part cnext_el f3 f4 b1 part cEMPTY c<= cindexf f0 f1 f2 cl'm f5 f3 f4 c/\ c/\ ! c==> c< b0 cindexf f0 f1 f2 c= cITER cSUC cSUC b0 * part cnext_el f3 f4 cf_list f5 cITER cSUC b0 * part cnext_el f3 f4 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cITER cSUC cSUC b1 * part cnext_el f3 f4 cf_list f5 cITER cSUC b1 * part cnext_el f3 f4 b1 part cEMPTY c<= cindexf f0 f1 f2 cl'm f5 f3 f4
- (~ F), ((!x. (~ (A x))) /\ (A a)) |- ((~ F) /\ F)
T c==> c~ cF c==> c/\ ! c~ * f0 b0 * f0 f1 c/\ c~ cF cF
+ ((((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))))) ==> F), ((((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019)))) (real_of_num (NUMERAL _0)))))) \/ (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))))))) |- F
T c==> c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF c==> c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM x) r2) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) /\ ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x))))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((normal_list L) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM x) r2) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) /\ ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x))))))) /\ ((((POWER (next_el r2)) i') ((next_el r2) ((next_el r2) x))) = ((f_list L) (((POWER (next_el r2)) i') ((next_el r2) x)))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> c/\ cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c/\ cMEM f3 f12 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ c= cnext_el f12 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f10 f5 c==> c<= cSUC f11 cindexf f6 f10 f5 c==> c< f11 cindexf f6 f10 f5 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c/\ c/\ cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c/\ cMEM f3 f12 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ c= cnext_el f12 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cnext_el f12 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cnext_el f12 f3
- |- ((\x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t))))))) x)
T * / c= cIN b0 * part cGSPEC / * f0 * part cSETSPEC b1 * f0 / / c/\ b1 c= b0 b2 f1
+ |- ((((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))))) ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))) = ((good_list L) ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))
T c= c==> c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c= co * part cnext_el f1 * * part cPOWER * part cnext_el f1 cSUC cindexf f2 f3 f1 f4 cf_list f0 cPOWER * part cnext_el f1 cindexf f2 f3 f1 cf_list f0 f4 c~ c= cindexf f2 cl'y f0 f1 f4 f5 cl'm f0 f1 f4 c==> cgood_list f0 c==> c= co * part cnext_el f1 * * part cPOWER * part cnext_el f1 cSUC cindexf f2 f3 f1 f4 cf_list f0 cPOWER * part cnext_el f1 cindexf f2 f3 f1 cf_list f0 f4 c~ c= cindexf f2 cl'y f0 f1 f4 f5 cl'm f0 f1 f4
- |- (((!L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) ==> ((\L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) L)) = ((\L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) L))
T c= c==> ! ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 * / ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 f0 * / ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 f0
+ (~ (((f_list L) x') = ((next_el r2) x'))), (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cgood_list f0 c==> c= cnext_el f3 f4 f5 c==> c= cfind_face f0 f4 f3 c==> cmarked_list f0 f6 f7 f4 c==> cMEM f4 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> c= cnext_el f2 f4 cf_list f0 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f6 f7 f4 cSUC f8 ce_list f4 c==> cs_flag_list f0 cntrans f0 f6 f7 f4 cSUC f8 f2 f4 c==> cuniq cflatten cntrans f0 f6 f7 f4 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f4 cSUC f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f4 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f4 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f4 cSUC f8 c==> cuniq f2 c==> c= cPOWER * part cnext_el f2 cindexf f5 f1 f2 f5 f1 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f5 f1 f2 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f5 f1 f2 cf_list f0 f4 c~ c= cindexf f5 cl'y f0 f2 f4 f3 cl'm f0 f2 f4
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cmarked_list f0 f4 f5 f2 c==> c= crtrans f0 f4 f5 f2 f6 f7 c==> c= crtrans f0 f4 f5 f2 cSUC f6 f8 c==> c= cl'y f0 f7 f2 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f4 f5 f2 f6 f10 c==> c= cindexf f3 cytrans f0 f4 f5 f2 cSUC f6 f1 cl'm f0 f8 f2 c==> c< f12 cindexf f3 f10 f1 c==> c<= cSUC f12 cindexf f3 f10 f1 c==> c<= f12 cindexf f3 f10 f1 c==> cMEM cPOWER * part cnext_el f1 cSUC f12 f3 f8 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f12 f3 f8 cSUC f12 c==> cMEM cPOWER * part cnext_el f1 f12 f3 f8 c==> c= cindexf f3 cPOWER * part cnext_el f1 f12 f3 f8 f12 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f8 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f2 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> c= cnext_el f8 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f6 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> cuniq f8 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f2
+ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), ((((((rtrans L) N) r) x) (SUC i)) = r2) |- (((((normal_list L) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM x) r2) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) /\ ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x))))))) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((next_el r2) x))) = ((f_list L) (((POWER (next_el r2)) i') ((next_el r2) x))))) = (((is_restricted (hypermap_of_list L)) /\ (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM x) r2) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) /\ ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ ((((final_list L) r2) ==> ((flag_list L) (((((ntrans L) N) r) x) (SUC i)))) /\ ((~ ((final_list L) r2)) ==> ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x)))))))))) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((next_el r2) x))) = ((f_list L) (((POWER (next_el r2)) i') ((next_el r2) x))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c= c==> c/\ cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c/\ cMEM f3 f5 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ c= cnext_el f5 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c= cPOWER * part cnext_el f5 f6 cnext_el f5 cnext_el f5 f3 cf_list f0 cPOWER * part cnext_el f5 f6 cnext_el f5 f3 c==> c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c/\ cMEM f3 f5 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ c= cnext_el f5 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c/\ c==> cfinal_list f0 f5 cflag_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c~ cfinal_list f0 f5 cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c= cPOWER * part cnext_el f5 f6 cnext_el f5 cnext_el f5 f3 cf_list f0 cPOWER * part cnext_el f5 f6 cnext_el f5 f3
- |- ((\x. (((LET f) x) = (f x))) x)
T * / c= cLET f0 b0 * f0 b0 f1
+ (~ (((f_list L) x') = ((next_el r2) x'))), (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((marked_list L) N) r) x) |- (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cgood_list f0 c==> c= cnext_el f3 f4 f5 c==> c= cfind_face f0 f4 f3 c==> cnormal_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> cmarked_list f0 f6 f7 f4 c/\ cnormal_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> cMEM f2 cntrans f0 f6 f7 f4 cSUC f8 c==> cMEM f4 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> c= cnext_el f2 f4 cf_list f0 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f6 f7 f4 cSUC f8 ce_list f4 c==> cs_flag_list f0 cntrans f0 f6 f7 f4 cSUC f8 f2 f4 c==> cuniq cflatten cntrans f0 f6 f7 f4 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f4 cSUC f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f4 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f4 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f4 cSUC f8 c==> cuniq f2 c==> c= cPOWER * part cnext_el f2 cindexf f5 f1 f2 f5 f1 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f5 f1 f2 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f5 f1 f2 cf_list f0 f4 c~ c= cindexf f5 cl'y f0 f2 f4 f3 cl'm f0 f2 f4
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((((marked_list L) N) r) x) |- (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) /\ (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f4 f3 f5 cSUC f4 c==> c= cfind_face f0 f2 f1 c==> c= crtrans f0 f6 f7 f2 cSUC f8 f5 c==> cMEM cPOWER * part cnext_el f1 cSUC f4 f3 f5 c==> cmarked_list f0 f6 f7 f2 c/\ c= cindexf f3 cPOWER * part cnext_el f1 cSUC f4 f3 f5 cSUC f4 c==> cMEM cPOWER * part cnext_el f1 f4 f3 f5 c==> c= cindexf f3 cPOWER * part cnext_el f1 f4 f3 f5 f4 c==> cmarked_list f0 cntrans f0 f6 f7 f2 cSUC f8 f5 f2 c==> cnormal_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> cMEM f5 cntrans f0 f6 f7 f2 cSUC f8 c==> cMEM f2 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> c= cnext_el f5 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f6 f7 f2 cSUC f8 ce_list f2 c==> cs_flag_list f0 cntrans f0 f6 f7 f2 cSUC f8 f5 f2 c==> cuniq cflatten cntrans f0 f6 f7 f2 f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f2 f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f2 f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 f8 c==> cuniq f9 c==> cuniq cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> cuniq f5 c= cPOWER * part cnext_el f5 f4 cnext_el f5 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f5 f4 cf_list f0 f2
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c< f12 cindexf f6 f10 f5 c==> c<= cSUC f12 cindexf f6 f10 f5 c==> c<= f12 cindexf f6 f10 f5 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
- |- ((?y. ((((l'y L) r1) x) = y)) ==> (?y. ((((l'y L) r1) x) = y)))
T c==> c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((((marked_list L) N) r) x) |- (((((marked_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) (((((ntrans L) N) r) x) i)) ==> (((MEM r1) (((((ntrans L) N) r) x) i)) ==> (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f5 f3 f6 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c==> cMEM f6 f8 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f8 c==> c= cPOWER * part cnext_el f8 cindexf f6 f12 f8 f6 f12 c==> c= co * part cnext_el f8 * * part cPOWER * part cnext_el f8 cSUC cindexf f6 f12 f8 f3 cf_list f0 cPOWER * part cnext_el f8 cindexf f6 f12 f8 cf_list f0 f3 c~ c= cindexf f6 cl'y f0 f8 f3 f5 cl'm f0 f8 f3
+ |- ((\r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) r)
T * / ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 f2
+ |- (((!N. (!r. (!x. (!i. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))))))) ==> (~ ((final_list L) (((((rtrans L) N) r) x) i)))))))) ==> ((\N. (!r. (!x. (!i. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))))))) ==> (~ ((final_list L) (((((rtrans L) N) r) x) i)))))))) N)) = ((\N. (!r. (!x. (!i. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))))))) ==> (~ ((final_list L) (((((rtrans L) N) r) x) i)))))))) N))
T c= c==> ! ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 crtrans f0 b0 b1 b2 cSUC b3 c~ cfinal_list f0 crtrans f0 b0 b1 b2 b3 * / ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 crtrans f0 b0 b1 b2 cSUC b3 c~ cfinal_list f0 crtrans f0 b0 b1 b2 b3 f1 * / ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 crtrans f0 b0 b1 b2 cSUC b3 c~ cfinal_list f0 crtrans f0 b0 b1 b2 b3 f1
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c< f12 cindexf f6 f10 f5 c==> c<= cSUC f12 cindexf f6 f10 f5 c==> c<= f12 cindexf f6 f10 f5 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f8 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ |- (((!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) ==> ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) L)) = ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) L))
T c= c==> ! ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 * / ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 f0 * / ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 f0
+ |- (((!i. (!j. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((((find_face L) x) = f) /\ ((((next_el f) x) = w) /\ (j <= (((indexf w) (((((ztrans L) N) r) x) i)) f))))))))) ==> (((MEM (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) /\ ((((indexf w) (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) = j))))) ==> ((\i. (!j. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((((find_face L) x) = f) /\ ((((next_el f) x) = w) /\ (j <= (((indexf w) (((((ztrans L) N) r) x) i)) f))))))))) ==> (((MEM (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) /\ ((((indexf w) (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) = j))))) i)) = ((\i. (!j. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((((find_face L) x) = f) /\ ((((next_el f) x) = w) /\ (j <= (((indexf w) (((((ztrans L) N) r) x) i)) f))))))))) ==> (((MEM (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) /\ ((((indexf w) (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) = j))))) i))
T c= c==> ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 crtrans f0 f1 f2 f3 b0 c/\ c= cfind_face f0 f3 f4 c/\ c= cnext_el f4 f3 f5 c<= b1 cindexf f5 cztrans f0 f1 f2 f3 b0 f4 c/\ cMEM cPOWER * part cnext_el f4 b1 f5 crtrans f0 f1 f2 f3 cSUC b0 c= cindexf f5 cPOWER * part cnext_el f4 b1 f5 crtrans f0 f1 f2 f3 cSUC b0 b1 * / ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 crtrans f0 f1 f2 f3 b0 c/\ c= cfind_face f0 f3 f4 c/\ c= cnext_el f4 f3 f5 c<= b1 cindexf f5 cztrans f0 f1 f2 f3 b0 f4 c/\ cMEM cPOWER * part cnext_el f4 b1 f5 crtrans f0 f1 f2 f3 cSUC b0 c= cindexf f5 cPOWER * part cnext_el f4 b1 f5 crtrans f0 f1 f2 f3 cSUC b0 b1 f6 * / ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 crtrans f0 f1 f2 f3 b0 c/\ c= cfind_face f0 f3 f4 c/\ c= cnext_el f4 f3 f5 c<= b1 cindexf f5 cztrans f0 f1 f2 f3 b0 f4 c/\ cMEM cPOWER * part cnext_el f4 b1 f5 crtrans f0 f1 f2 f3 cSUC b0 c= cindexf f5 cPOWER * part cnext_el f4 b1 f5 crtrans f0 f1 f2 f3 cSUC b0 b1 f6
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ |- ((\s. ((((MEM w) s) /\ (((MEM x') s) /\ (uniq s))) ==> ((((POWER (next_el s)) (((indexf w) x') s)) w) = x'))) r2)
T * / c==> c/\ cMEM f0 b0 c/\ cMEM f1 b0 cuniq b0 c= cPOWER * part cnext_el b0 cindexf f0 f1 b0 f0 f1 f2
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((((marked_list L) N) r) x) |- (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> c= crtrans f0 f4 f5 f2 cSUC f6 f7 c==> cmarked_list f0 f4 f5 f2 c==> cMEM cPOWER * part cnext_el f1 cSUC f8 f3 f7 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f8 f3 f7 cSUC f8 c==> cMEM cPOWER * part cnext_el f1 f8 f3 f7 c==> c= cindexf f3 cPOWER * part cnext_el f1 f8 f3 f7 f8 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f6 f7 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f7 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f2 f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> c= cnext_el f7 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f6 f7 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f6 c==> cuniq f9 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> cuniq f7 c= cPOWER * part cnext_el f7 f8 cnext_el f7 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f7 f8 cf_list f0 f2
+ (~ (((f_list L) x') = ((next_el r2) x'))), (good_list L), (((next_el f) x) = w), (((next_el r2) x) = ((f_list L) x)), ((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x'), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cgood_list f0 c==> c= cnext_el f3 f4 f5 c==> c= cnext_el f2 f4 cf_list f0 f4 c==> c= cPOWER * part cnext_el f2 cindexf f5 f1 f2 f5 f1 c==> c= cfind_face f0 f4 f3 c==> cmarked_list f0 f6 f7 f4 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f5 f1 f2 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f5 f1 f2 cf_list f0 f4 c~ c= cindexf f5 cl'y f0 f2 f4 f3 cl'm f0 f2 f4
+ (good_list L), ((((marked_list L) N) r) x) |- (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) ==> ((((next_el f) x) = w) ==> ((~ ((final_list L) r1)) ==> (((((marked_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) (((((ntrans L) N) r) x) i)) ==> (((MEM r1) (((((ntrans L) N) r) x) i)) ==> (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cmarked_list f0 f1 f2 f3 c/\ cmarked_list f0 f1 f2 f3 c==> c= cfind_face f0 f3 f4 c==> c= cnext_el f4 f3 f5 c==> c~ cfinal_list f0 f6 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f7 f6 f3 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f7 c==> cMEM f6 cntrans f0 f1 f2 f3 f7 c==> cMEM f3 f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f7 c==> c= cnext_el f6 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f7 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f7 f6 f3 c==> c= crtrans f0 f1 f2 f3 f7 f6 c==> c= crtrans f0 f1 f2 f3 cSUC f7 f8 c==> c= cl'y f0 f6 f3 f9 c==> c= cprev_el f6 f10 f11 c==> c= cztrans f0 f1 f2 f3 f7 f10 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c==> cuniq cflatten cntrans f0 f1 f2 f3 f7 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f7 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f7 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f7 c==> cuniq f6 c==> cMEM f5 f8 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f7 f8 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f7 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f7 c==> cMEM f3 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f7 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f7 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f7 f8 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f7 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f7 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f7 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f7 c==> cuniq f8 c==> c= cPOWER * part cnext_el f8 cindexf f5 f12 f8 f5 f12 c==> c= co * part cnext_el f8 * * part cPOWER * part cnext_el f8 cSUC cindexf f5 f12 f8 f3 cf_list f0 cPOWER * part cnext_el f8 cindexf f5 f12 f8 cf_list f0 f3 c~ c= cindexf f5 cl'y f0 f8 f3 f4 cl'm f0 f8 f3
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((MEM x) r1), ((((marked_list L) N) r) x) |- (((MEM x) r1) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cMEM f2 f4 c==> cmarked_list f0 f5 f6 f2 c/\ cMEM f2 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f5 f6 f2 f7 c==> c= cnext_el f4 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f5 f6 f2 f7 ce_list f2 c==> cs_flag_list f0 cntrans f0 f5 f6 f2 f7 f4 f2 c==> c= crtrans f0 f5 f6 f2 f7 f4 c==> c= crtrans f0 f5 f6 f2 cSUC f7 f8 c==> c= cl'y f0 f4 f2 f9 c==> c= cprev_el f4 f10 f11 c==> c= cztrans f0 f5 f6 f2 f7 f10 c==> c= cindexf f3 cytrans f0 f5 f6 f2 cSUC f7 f1 cl'm f0 f8 f2 c==> c< f12 cindexf f3 f10 f1 c==> c<= cSUC f12 cindexf f3 f10 f1 c==> c<= f12 cindexf f3 f10 f1 c==> cMEM cPOWER * part cnext_el f1 cSUC f12 f3 f8 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f12 f3 f8 cSUC f12 c==> cMEM cPOWER * part cnext_el f1 f12 f3 f8 c==> c= cindexf f3 cPOWER * part cnext_el f1 f12 f3 f8 f12 c==> cmarked_list f0 cntrans f0 f5 f6 f2 cSUC f7 f8 f2 c==> cnormal_list f0 cntrans f0 f5 f6 f2 cSUC f7 c==> cMEM f8 cntrans f0 f5 f6 f2 cSUC f7 c==> cMEM f2 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f5 f6 f2 cSUC f7 c==> c= cnext_el f8 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f5 f6 f2 cSUC f7 ce_list f2 c==> cs_flag_list f0 cntrans f0 f5 f6 f2 cSUC f7 f8 f2 c==> cuniq cflatten cntrans f0 f5 f6 f2 f7 c==> call / c~ c= b0 cNIL cntrans f0 f5 f6 f2 f7 c==> call * part cf_last f0 cntrans f0 f5 f6 f2 f7 c==> call * part cloop_list f0 cntrans f0 f5 f6 f2 f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f5 f6 f2 f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f5 f6 f2 f7 c==> cuniq f4 c==> cuniq cflatten cntrans f0 f5 f6 f2 cSUC f7 c==> call / c~ c= b0 cNIL cntrans f0 f5 f6 f2 cSUC f7 c==> call * part cf_last f0 cntrans f0 f5 f6 f2 cSUC f7 c==> call * part cloop_list f0 cntrans f0 f5 f6 f2 cSUC f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f5 f6 f2 cSUC f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f5 f6 f2 cSUC f7 c==> cuniq f8 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f2
- |- ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)
T * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> c~ c= cf_list f0 f5 cnext_el f6 f5 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f6 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f6 c==> cMEM f3 f7 c==> cMEM f3 f6 c==> cMEM f5 f6 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f6 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f6 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f6 f3 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f6 c==> c= cPOWER * part cnext_el f6 cindexf f9 f5 f6 f9 f5 c==> c= co * part cnext_el f6 * * part cPOWER * part cnext_el f6 cSUC cindexf f9 f5 f6 f3 cf_list f0 cPOWER * part cnext_el f6 cindexf f9 f5 f6 cf_list f0 f3 c~ c= cindexf f9 cl'y f0 f6 f3 f8 cl'm f0 f6 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c==> cMEM f6 f8 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f8 c==> c= cPOWER * part cnext_el f8 cindexf f6 f12 f8 f6 f12 c==> c= co * part cnext_el f8 * * part cPOWER * part cnext_el f8 cSUC cindexf f6 f12 f8 f3 cf_list f0 cPOWER * part cnext_el f8 cindexf f6 f12 f8 cf_list f0 f3 c~ c= cindexf f6 cl'y f0 f8 f3 f5 cl'm f0 f8 f3
+ (~ (((f_list L) x') = ((next_el r2) x'))), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- ((uniq (flatten (((((ntrans L) N) r) x) i))) /\ (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cuniq cflatten cntrans f0 f3 f4 f5 f6 c==> cgood_list f0 c==> c= cnext_el f7 f5 f8 c==> c= cfind_face f0 f5 f7 c==> cmarked_list f0 f3 f4 f5 c/\ cuniq cflatten cntrans f0 f3 f4 f5 f6 c==> call / c~ c= b0 cNIL cntrans f0 f3 f4 f5 f6 c==> call * part cf_last f0 cntrans f0 f3 f4 f5 f6 c==> call * part cloop_list f0 cntrans f0 f3 f4 f5 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f3 f4 f5 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f3 f4 f5 f6 c==> cuniq f9 c==> cMEM f8 f2 c==> cmarked_list f0 cntrans f0 f3 f4 f5 cSUC f6 f2 f5 c==> cnormal_list f0 cntrans f0 f3 f4 f5 cSUC f6 c==> cMEM f2 cntrans f0 f3 f4 f5 cSUC f6 c==> cMEM f5 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f3 f4 f5 cSUC f6 c==> c= cnext_el f2 f5 cf_list f0 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f3 f4 f5 cSUC f6 ce_list f5 c==> cs_flag_list f0 cntrans f0 f3 f4 f5 cSUC f6 f2 f5 c==> cuniq cflatten cntrans f0 f3 f4 f5 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f3 f4 f5 cSUC f6 c==> call * part cf_last f0 cntrans f0 f3 f4 f5 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f3 f4 f5 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f3 f4 f5 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f3 f4 f5 cSUC f6 c==> cuniq f2 c==> c= cPOWER * part cnext_el f2 cindexf f8 f1 f2 f8 f1 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f8 f1 f2 f5 cf_list f0 cPOWER * part cnext_el f2 cindexf f8 f1 f2 cf_list f0 f5 c~ c= cindexf f8 cl'y f0 f2 f5 f7 cl'm f0 f2 f5
+ ((((marked_list L) N) r) x) |- (((((marked_list L) N) r) x) = T)
T c==> cmarked_list f0 f1 f2 f3 c= cmarked_list f0 f1 f2 f3 cT
+ |- ((\N. (!r. (!f. (!w. (!x. (!i. (!j. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((((find_face L) x) = f) /\ ((((next_el f) x) = w) /\ (j <= (((indexf w) (((((ztrans L) N) r) x) i)) f))))))))) ==> (((MEM (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) /\ ((((indexf w) (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) = j)))))))))) N)
T * / ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b4 c/\ c~ cfinal_list f0 crtrans f0 b0 b1 b4 b5 c/\ c= cfind_face f0 b4 b2 c/\ c= cnext_el b2 b4 b3 c<= b6 cindexf b3 cztrans f0 b0 b1 b4 b5 b2 c/\ cMEM cPOWER * part cnext_el b2 b6 b3 crtrans f0 b0 b1 b4 cSUC b5 c= cindexf b3 cPOWER * part cnext_el b2 b6 b3 crtrans f0 b0 b1 b4 cSUC b5 b6 f1
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) /\ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i)))))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> c/\ call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cmarked_list f0 f4 f5 f2 c==> cMEM f2 f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 f7 c==> c= cnext_el f6 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 f7 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 f7 f6 f2 c==> c= crtrans f0 f4 f5 f2 f7 f6 c==> c= crtrans f0 f4 f5 f2 cSUC f7 f8 c==> c= cl'y f0 f6 f2 f9 c==> c= cprev_el f6 f10 f11 c==> c= cztrans f0 f4 f5 f2 f7 f10 c==> c= cindexf f3 cytrans f0 f4 f5 f2 cSUC f7 f1 cl'm f0 f8 f2 c==> c< f12 cindexf f3 f10 f1 c==> c<= cSUC f12 cindexf f3 f10 f1 c==> c<= f12 cindexf f3 f10 f1 c==> cMEM cPOWER * part cnext_el f1 cSUC f12 f3 f8 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f12 f3 f8 cSUC f12 c==> cMEM cPOWER * part cnext_el f1 f12 f3 f8 c==> c= cindexf f3 cPOWER * part cnext_el f1 f12 f3 f8 f12 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f7 f8 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f7 c==> cMEM f8 cntrans f0 f4 f5 f2 cSUC f7 c==> cMEM f2 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f7 c==> c= cnext_el f8 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f7 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f7 f8 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 f7 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f7 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f7 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f7 c==> cuniq f6 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f7 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f7 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f7 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f7 c==> cuniq f8 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f2
- |- ((\x. ((x IN (\y. (p y))) = (p x))) x)
T * / c= cIN b0 / * f0 b1 * f0 b0 f1
- |- ((((real_gt x) (real_of_num (NUMERAL _0))) /\ ((real_ge y) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul x) y)) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_gt f0 creal_of_num cNUMERAL c_0 creal_ge f1 creal_of_num cNUMERAL c_0 creal_ge creal_mul f0 f1 creal_of_num cNUMERAL c_0
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f12 cindexf f6 f8 f5 c==> c<= cSUC f12 cindexf f6 f8 f5 c==> c< f12 cindexf f6 f8 f5 c==> cMEM f3 f7 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f11 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f11 cSUC f12 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f11 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f11 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f11 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f11 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c= cPOWER * part cnext_el f11 f12 cnext_el f11 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f11 f12 cf_list f0 f3
+ (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((((ztrans L) N) r) x) i) = z) |- (((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))) = (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))))))))))
T c==> c= cprev_el f0 cztrans f1 f2 f3 f4 f5 f6 c==> c= cztrans f1 f2 f3 f4 f5 f7 c= c==> c= cprev_el f0 f7 f6 c==> c= cztrans f1 f2 f3 f4 f5 f7 c==> c= cindexf f8 cytrans f1 f2 f3 f4 cSUC f5 f9 cl'm f1 f10 f4 c==> c< f11 cindexf f8 f7 f9 c==> c<= cSUC f11 cindexf f8 f7 f9 c==> c<= f11 cindexf f8 f7 f9 c==> cMEM cPOWER * part cnext_el f9 cSUC f11 f8 f10 c==> c= cindexf f8 cPOWER * part cnext_el f9 cSUC f11 f8 f10 cSUC f11 c==> cMEM cPOWER * part cnext_el f9 f11 f8 f10 c==> c= cindexf f8 cPOWER * part cnext_el f9 f11 f8 f10 f11 c==> cmarked_list f1 cntrans f1 f2 f3 f4 cSUC f5 f10 f4 c==> cnormal_list f1 cntrans f1 f2 f3 f4 cSUC f5 c==> cMEM f10 cntrans f1 f2 f3 f4 cSUC f5 c==> cMEM f4 f10 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 cntrans f1 f2 f3 f4 cSUC f5 c==> c= cnext_el f10 f4 cf_list f1 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list cntrans f1 f2 f3 f4 cSUC f5 ce_list f4 c==> cs_flag_list f1 cntrans f1 f2 f3 f4 cSUC f5 f10 f4 c= cPOWER * part cnext_el f10 f11 cnext_el f10 cf_list f1 f4 cf_list f1 cPOWER * part cnext_el f10 f11 cf_list f1 f4 c==> c= cztrans f1 f2 f3 f4 f5 f7 c==> c= cindexf f8 cytrans f1 f2 f3 f4 cSUC f5 f9 cl'm f1 f10 f4 c==> c< f11 cindexf f8 f7 f9 c==> c<= cSUC f11 cindexf f8 f7 f9 c==> c<= f11 cindexf f8 f7 f9 c==> cMEM cPOWER * part cnext_el f9 cSUC f11 f8 f10 c==> c= cindexf f8 cPOWER * part cnext_el f9 cSUC f11 f8 f10 cSUC f11 c==> cMEM cPOWER * part cnext_el f9 f11 f8 f10 c==> c= cindexf f8 cPOWER * part cnext_el f9 f11 f8 f10 f11 c==> cmarked_list f1 cntrans f1 f2 f3 f4 cSUC f5 f10 f4 c==> cnormal_list f1 cntrans f1 f2 f3 f4 cSUC f5 c==> cMEM f10 cntrans f1 f2 f3 f4 cSUC f5 c==> cMEM f4 f10 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 cntrans f1 f2 f3 f4 cSUC f5 c==> c= cnext_el f10 f4 cf_list f1 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list cntrans f1 f2 f3 f4 cSUC f5 ce_list f4 c==> cs_flag_list f1 cntrans f1 f2 f3 f4 cSUC f5 f10 f4 c= cPOWER * part cnext_el f10 f11 cnext_el f10 cf_list f1 f4 cf_list f1 cPOWER * part cnext_el f10 f11 cf_list f1 f4
+ ((\z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)) z1) |- (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)
T c==> * / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0 f6 c= cprev_el f0 cztrans f1 f2 f3 f4 f5 f6
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))) |- (((final_list L) (((((rtrans L) N) r) x) i)) = F)
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c= cfinal_list f0 crtrans f0 f1 f2 f3 f4 cF
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f8 f5 c==> c<= cSUC f11 cindexf f6 f8 f5 c==> c< f11 cindexf f6 f8 f5 c==> cMEM f3 f7 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f12 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f12 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cf_list f0 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r2) x) = ((f_list L) x)), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r2), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((next_el r2) x))) = ((f_list L) (((POWER (next_el r2)) i') ((next_el r2) x))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f8 cztrans f0 f1 f2 f3 f4 f9 c==> c= cl'y f0 f8 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f7 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f7 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f7 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f8 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f7 c==> c/\ c= cnext_el f7 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f7 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f11 f5 c==> c<= cSUC f12 cindexf f6 f11 f5 c==> c< f12 cindexf f6 f11 f5 c==> cMEM f3 f7 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f7 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f7 f3 c= cPOWER * part cnext_el f7 f12 cnext_el f7 cnext_el f7 f3 cf_list f0 cPOWER * part cnext_el f7 f12 cnext_el f7 f3
+ (is_restricted (hypermap_of_list L)) |- ((is_restricted (hypermap_of_list L)) = T)
T c==> cis_restricted chypermap_of_list f0 c= cis_restricted chypermap_of_list f0 cT
- ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) |- (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) = T)
T c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c= call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 cT
+ |- ((\f. (((POWER f) (SUC n)) = (f o ((POWER f) n)))) f)
T * / c= * * part cPOWER b0 cSUC f0 * * part co b0 * * part cPOWER b0 f0 f1
+ (~ (((f_list L) x') = ((next_el r2) x'))), (uniq (list_of_darts L)), (((next_el f) x) = w), (((next_el r2) x) = ((f_list L) x)), ((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x'), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cuniq clist_of_darts f0 c==> c= cnext_el f3 f4 f5 c==> c= cnext_el f2 f4 cf_list f0 f4 c==> c= cPOWER * part cnext_el f2 cindexf f5 f1 f2 f5 f1 c==> c= cfind_face f0 f4 f3 c==> cmarked_list f0 f6 f7 f4 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f5 f1 f2 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f5 f1 f2 cf_list f0 f4 c~ c= cindexf f5 cl'y f0 f2 f4 f3 cl'm f0 f2 f4
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((POWER (next_el r2)) (SUC (SUC m))) x) = ((f_list L) (((POWER (next_el r2)) (SUC m)) x))))) m)))) = EMPTY)) = ((!i. ((i < (((indexf w) z) f)) ==> ((((POWER (next_el r2)) (SUC (SUC i))) x) = ((f_list L) (((POWER (next_el r2)) (SUC i)) x))))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((POWER (next_el r2)) (SUC (SUC m))) x) = ((f_list L) (((POWER (next_el r2)) (SUC m)) x))))) m)))) = EMPTY))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cPOWER * part cnext_el f11 cSUC cSUC b1 f3 cf_list f0 cPOWER * part cnext_el f11 cSUC b1 f3 b1 part cEMPTY c/\ ! c==> c< b0 cindexf f6 f10 f5 c= cPOWER * part cnext_el f11 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f11 cSUC b0 f3 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cPOWER * part cnext_el f11 cSUC cSUC b1 f3 cf_list f0 cPOWER * part cnext_el f11 cSUC b1 f3 b1 part cEMPTY
+ |- (((!N. (!r. (!x. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x)))) ==> ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) (((((rtrans L) N) r) x) (SUC i))) x))))) ==> ((\N. (!r. (!x. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x)))) ==> ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) (((((rtrans L) N) r) x) (SUC i))) x))))) N)) = ((\N. (!r. (!x. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x)))) ==> ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) (((((rtrans L) N) r) x) (SUC i))) x))))) N))
T c= c==> ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 b0 b1 b2 cmarked_list f0 cntrans f0 b0 b1 b2 cSUC f1 crtrans f0 b0 b1 b2 cSUC f1 b2 * / ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 b0 b1 b2 cmarked_list f0 cntrans f0 b0 b1 b2 cSUC f1 crtrans f0 b0 b1 b2 cSUC f1 b2 f2 * / ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 b0 b1 b2 cmarked_list f0 cntrans f0 b0 b1 b2 cSUC f1 crtrans f0 b0 b1 b2 cSUC f1 b2 f2
+ |- (((!d1. (!d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM d1) ((find_face L) d2))) ==> (((find_face L) d1) = ((find_face L) d2)))))) ==> ((\d1. (!d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM d1) ((find_face L) d2))) ==> (((find_face L) d1) = ((find_face L) d2)))))) (((POWER (next_el f)) i') w))) = ((\d1. (!d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM d1) ((find_face L) d2))) ==> (((find_face L) d1) = ((find_face L) d2)))))) (((POWER (next_el f)) i') w)))
T c= c==> ! ! ! c==> c/\ cuniq clist_of_darts b2 cMEM b0 cfind_face b2 b1 c= cfind_face b2 b0 cfind_face b2 b1 * / ! ! c==> c/\ cuniq clist_of_darts b2 cMEM b0 cfind_face b2 b1 c= cfind_face b2 b0 cfind_face b2 b1 cPOWER * part cnext_el f0 f1 f2 * / ! ! c==> c/\ cuniq clist_of_darts b2 cMEM b0 cfind_face b2 b1 c= cfind_face b2 b0 cfind_face b2 b1 cPOWER * part cnext_el f0 f1 f2
+ (uniq f), (uniq r2), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM x) (list_of_darts L)), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((((marked_list L) N) r) x) |- ((((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) (SUC i)))) ==> ((((POWER (next_el r2)) i') ((next_el r2) w)) = ((f_list L) (((POWER (next_el r2)) i') w))))
T c==> cuniq f0 c==> cuniq f1 c==> cuniq clist_of_darts f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f0 f3 f4 c==> c= cindexf f4 cPOWER * part cnext_el f0 f5 f4 f1 f5 c==> c= cindexf f4 cPOWER * part cnext_el f0 cSUC f5 f4 f1 cSUC f5 c==> c= cfind_face f2 f3 f0 c==> c= crtrans f2 f6 f7 f3 cSUC f8 f1 c==> cMEM f3 clist_of_darts f2 c==> cMEM cPOWER * part cnext_el f0 f5 f4 f1 c==> cMEM cPOWER * part cnext_el f0 cSUC f5 f4 f1 c==> cmarked_list f2 f6 f7 f3 c==> c==> c/\ ctransform_assumption_v2 f2 c/\ cgood_list f2 c/\ cgood_list_nodes f2 c/\ cmarked_list f2 f6 f7 f3 c/\ c= cfind_face f2 f3 f0 c= cnext_el f0 f3 f4 cMEM f4 crtrans f2 f6 f7 f3 cSUC f8 c= cPOWER * part cnext_el f1 f5 cnext_el f1 f4 cf_list f2 cPOWER * part cnext_el f1 f5 f4
- |- (((!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) ==> ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x)) = ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x))
T c= c==> ! c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3 * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3
- |- (((!x. (((LET f) x) = (f x))) ==> ((\x. (((LET f) x) = (f x))) x)) = ((\x. (((LET f) x) = (f x))) x))
T c= c==> ! c= cLET f0 b0 * f0 b0 * / c= cLET f0 b0 * f0 b0 f1 * / c= cLET f0 b0 * f0 b0 f1
+ (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((MEM x) r1), ((((marked_list L) N) r) x) |- (((MEM x) r1) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cMEM f2 f4 c==> cmarked_list f0 f5 f6 f2 c/\ cMEM f2 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f5 f6 f2 f7 c==> c= cnext_el f4 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f5 f6 f2 f7 ce_list f2 c==> cs_flag_list f0 cntrans f0 f5 f6 f2 f7 f4 f2 c==> c= crtrans f0 f5 f6 f2 f7 f4 c==> c= crtrans f0 f5 f6 f2 cSUC f7 f8 c==> c= cl'y f0 f4 f2 f9 c==> c= cprev_el f4 f10 f11 c==> c= cztrans f0 f5 f6 f2 f7 f10 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c==> cuniq cflatten cntrans f0 f5 f6 f2 f7 c==> call / c~ c= b0 cNIL cntrans f0 f5 f6 f2 f7 c==> call * part cf_last f0 cntrans f0 f5 f6 f2 f7 c==> call * part cloop_list f0 cntrans f0 f5 f6 f2 f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f5 f6 f2 f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f5 f6 f2 f7 c==> cuniq f4 c==> cMEM f3 f8 c==> cmarked_list f0 cntrans f0 f5 f6 f2 cSUC f7 f8 f2 c==> cnormal_list f0 cntrans f0 f5 f6 f2 cSUC f7 c==> cMEM f8 cntrans f0 f5 f6 f2 cSUC f7 c==> cMEM f2 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f5 f6 f2 cSUC f7 c==> c= cnext_el f8 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f5 f6 f2 cSUC f7 ce_list f2 c==> cs_flag_list f0 cntrans f0 f5 f6 f2 cSUC f7 f8 f2 c==> cuniq cflatten cntrans f0 f5 f6 f2 cSUC f7 c==> call / c~ c= b0 cNIL cntrans f0 f5 f6 f2 cSUC f7 c==> call * part cf_last f0 cntrans f0 f5 f6 f2 cSUC f7 c==> call * part cloop_list f0 cntrans f0 f5 f6 f2 cSUC f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f5 f6 f2 cSUC f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f5 f6 f2 cSUC f7 c==> cuniq f8 c==> c= cPOWER * part cnext_el f8 cindexf f3 f12 f8 f3 f12 c==> c= co * part cnext_el f8 * * part cPOWER * part cnext_el f8 cSUC cindexf f3 f12 f8 f2 cf_list f0 cPOWER * part cnext_el f8 cindexf f3 f12 f8 cf_list f0 f2 c~ c= cindexf f3 cl'y f0 f8 f2 f1 cl'm f0 f8 f2
+ |- ((\w. (!x. (!i. (!j. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((((find_face L) x) = f) /\ ((((next_el f) x) = w) /\ (j <= (((indexf w) (((((ztrans L) N) r) x) i)) f))))))))) ==> (((MEM (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) /\ ((((indexf w) (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) = j))))))) w)
T * / ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b1 c/\ c~ cfinal_list f0 crtrans f0 f1 f2 b1 b2 c/\ c= cfind_face f0 b1 f3 c/\ c= cnext_el f3 b1 b0 c<= b3 cindexf b0 cztrans f0 f1 f2 b1 b2 f3 c/\ cMEM cPOWER * part cnext_el f3 b3 b0 crtrans f0 f1 f2 b1 cSUC b2 c= cindexf b0 cPOWER * part cnext_el f3 b3 b0 crtrans f0 f1 f2 b1 cSUC b2 b3 f4
+ |- (((uniq (flatten (((((ntrans L) N) r) x) i))) /\ ((MEM r1) (((((ntrans L) N) r) x) i))) ==> (uniq r1))
T c==> c/\ cuniq cflatten cntrans f0 f1 f2 f3 f4 cMEM f5 cntrans f0 f1 f2 f3 f4 cuniq f5
- |- (((!x. (((\r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)) x) ==> (?r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)))) ==> ((?r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)) ==> (?r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)))) = ((?r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)) ==> (?r2. ((((((rtrans L) N) r) x) (SUC i)) = r2))))
T c= c==> ! c==> * / c= crtrans f0 f1 f2 f3 cSUC f4 b1 b0 c? / c= crtrans f0 f1 f2 f3 cSUC f4 b1 c==> c? / c= crtrans f0 f1 f2 f3 cSUC f4 b0 c? / c= crtrans f0 f1 f2 f3 cSUC f4 b0 c==> c? / c= crtrans f0 f1 f2 f3 cSUC f4 b0 c? / c= crtrans f0 f1 f2 f3 cSUC f4 b0
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f8 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))))))))
T c==> cgood_list f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cmarked_list f0 f4 f5 f2 c==> c~ c= cf_list f0 f6 cnext_el f7 f6 c==> cuniq cflatten cntrans f0 f4 f5 f2 f8 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f8 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f8 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f8 c==> cuniq f9 c==> cMEM f3 f7 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f8 f7 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f8 c==> cMEM f7 cntrans f0 f4 f5 f2 cSUC f8 c==> cMEM f2 f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f8 c==> c= cnext_el f7 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f8 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f8 f7 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f8 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f8 c==> cuniq f7 c==> c= cPOWER * part cnext_el f7 cindexf f3 f6 f7 f3 f6 c==> c= co * part cnext_el f7 * * part cPOWER * part cnext_el f7 cSUC cindexf f3 f6 f7 f2 cf_list f0 cPOWER * part cnext_el f7 cindexf f3 f6 f7 cf_list f0 f2 c~ c= cindexf f3 cl'y f0 f7 f2 f1 cl'm f0 f7 f2
+ |- ((T /\ F) = F)
T c= c/\ cT cF cF
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) /\ ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x)))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r2), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((next_el r2) x))) = ((f_list L) (((POWER (next_el r2)) i') ((next_el r2) x))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ c= cnext_el f12 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f10 f5 c==> c<= cSUC f11 cindexf f6 f10 f5 c==> c< f11 cindexf f6 f10 f5 c==> cMEM f3 f12 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cnext_el f12 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cnext_el f12 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((\r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)) r2) ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f))) = T)
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= c==> * / c= crtrans f0 f1 f2 f3 cSUC f4 b0 f8 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cT
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM w) r2), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) /\ (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) /\ (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cindexf f3 cPOWER * part cnext_el f1 f4 f3 f5 f4 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f4 f3 f5 cSUC f4 c==> c= cfind_face f0 f2 f1 c==> c= crtrans f0 f6 f7 f2 cSUC f8 f5 c==> cMEM cPOWER * part cnext_el f1 f4 f3 f5 c==> cMEM cPOWER * part cnext_el f1 cSUC f4 f3 f5 c==> cmarked_list f0 f6 f7 f2 c==> cmarked_list f0 cntrans f0 f6 f7 f2 cSUC f8 f5 f2 c/\ cmarked_list f0 cntrans f0 f6 f7 f2 cSUC f8 f5 f2 c==> cnormal_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> cMEM f5 cntrans f0 f6 f7 f2 cSUC f8 c==> cMEM f2 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> c= cnext_el f5 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f6 f7 f2 cSUC f8 ce_list f2 c==> cs_flag_list f0 cntrans f0 f6 f7 f2 cSUC f8 f5 f2 c==> cuniq cflatten cntrans f0 f6 f7 f2 f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f2 f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f2 f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 f8 c==> cuniq f9 c==> cuniq cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> cuniq f5 c= cPOWER * part cnext_el f5 f4 cnext_el f5 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f5 f4 cf_list f0 f2
+ (((!x. (~ (A x))) /\ (A a)) \/ ((A a) /\ (!a. (~ (A a))))) |- ((((!x. (~ (A x))) /\ (A a)) \/ ((A a) /\ (!a. (~ (A a))))) /\ F)
T c==> c\/ c/\ ! c~ * f0 b0 * f0 f1 c/\ * f0 f1 ! c~ * f0 b0 c/\ c\/ c/\ ! c~ * f0 b0 * f0 f1 c/\ * f0 f1 ! c~ * f0 b0 cF
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((\y. ((((l'y L) r1) x) = y)) y) ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f))) = T)
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= c==> * / c= cl'y f0 f7 f3 b0 f9 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cT
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM x) r2) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) /\ ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x))))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM w) r2), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((normal_list L) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM x) r2) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) /\ ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x))))))) /\ (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> c/\ cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c/\ cMEM f3 f5 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ c= cnext_el f5 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ c/\ cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c/\ cMEM f3 f5 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ c= cnext_el f5 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ |- ((\P. ((~ (?x. (P x))) = (!x. (~ (P x))))) P)
T * / c= c~ c? / * b0 b1 ! c~ * b0 b1 f0
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> ! c= cPOWER * part cnext_el f8 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f8 cSUC b0 f3 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c~ c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3
+ |- (((!L. (!N. (!r. (!x. (!d. (!i. (!f. (!w. (((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x)))))))) ==> ((((indexf w) (((((ytrans L) N) r) x) i)) f) = (((l'm L) (((((rtrans L) N) r) x) i)) x))))))))))) ==> ((\L. (!N. (!r. (!x. (!d. (!i. (!f. (!w. (((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x)))))))) ==> ((((indexf w) (((((ytrans L) N) r) x) i)) f) = (((l'm L) (((((rtrans L) N) r) x) i)) x))))))))))) L)) = ((\L. (!N. (!r. (!x. (!d. (!i. (!f. (!w. (((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x)))))))) ==> ((((indexf w) (((((ytrans L) N) r) x) i)) f) = (((l'm L) (((((rtrans L) N) r) x) i)) x))))))))))) L))
T c= c==> ! ! ! ! ! ! ! ! c==> c/\ c~ cfinal_list b0 crtrans b0 b1 b2 b3 b5 c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= b6 cfind_face b0 b3 c= b7 cnext_el b6 b3 c= cindexf b7 cytrans b0 b1 b2 b3 b5 b6 cl'm b0 crtrans b0 b1 b2 b3 b5 b3 * / ! ! ! ! ! ! ! c==> c/\ c~ cfinal_list b0 crtrans b0 b1 b2 b3 b5 c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= b6 cfind_face b0 b3 c= b7 cnext_el b6 b3 c= cindexf b7 cytrans b0 b1 b2 b3 b5 b6 cl'm b0 crtrans b0 b1 b2 b3 b5 b3 f0 * / ! ! ! ! ! ! ! c==> c/\ c~ cfinal_list b0 crtrans b0 b1 b2 b3 b5 c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= b6 cfind_face b0 b3 c= b7 cnext_el b6 b3 c= cindexf b7 cytrans b0 b1 b2 b3 b5 b6 cl'm b0 crtrans b0 b1 b2 b3 b5 b3 f0
+ |- ((m < n) = ((int_lt (int_of_num m)) (int_of_num n)))
T c= c< f0 f1 cint_lt cint_of_num f0 cint_of_num f1
+ (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM x') r2), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 f5 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 cSUC f5 c==> cis_restricted chypermap_of_list f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f6 f1 f7 c==> c= cnext_el crtrans f2 f3 f4 f1 f5 f1 cf_list f2 f1 c==> c= cprev_el f8 cztrans f2 f3 f4 f1 f5 f9 c==> c= cl'y f2 f8 f1 f10 c==> c= cztrans f2 f3 f4 f1 f5 f11 c==> c= cfind_face f2 f1 f6 c==> c= crtrans f2 f3 f4 f1 f5 f8 c==> c= crtrans f2 f3 f4 f1 cSUC f5 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f3 f4 f1 f5 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f3 f4 f1 f5 c==> cMEM f1 crtrans f2 f3 f4 f1 f5 c==> cMEM f12 f0 c==> cMEM crtrans f2 f3 f4 f1 f5 cntrans f2 f3 f4 f1 f5 c==> cnormal_list f2 cntrans f2 f3 f4 f1 f5 c==> cs_flag_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 c==> cmarked_list f2 f3 f4 f1 c==> cmarked_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 c==> c~ c= cf_list f2 f12 cnext_el f0 f12 c~ c= cindexf f7 cytrans f2 f3 f4 f1 cSUC f5 f6 cl'm f2 f0 f1
+ |- ((((uniq (list_of_darts L)) ==> (uniq ((find_face L) x))) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))) = ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))
T c= c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c= cPOWER * part cnext_el f2 f3 cnext_el f2 cf_list f0 f1 cf_list f0 cPOWER * part cnext_el f2 f3 cf_list f0 f1 c= cPOWER * part cnext_el f2 f3 cnext_el f2 cf_list f0 f1 cf_list f0 cPOWER * part cnext_el f2 f3 cf_list f0 f1
- |- ((?r1. ((((((rtrans L) N) r) x) i) = r1)) ==> (?r1. ((((((rtrans L) N) r) x) i) = r1)))
T c==> c? / c= crtrans f0 f1 f2 f3 f4 b0 c? / c= crtrans f0 f1 f2 f3 f4 b0
+ (~ (((f_list L) x') = ((next_el r2) x'))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (((next_el f) x) = w), (((next_el r2) x) = ((f_list L) x)), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) /\ (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cuniq cflatten cntrans f0 f3 f4 f5 cSUC f6 c==> cgood_list f0 c==> c= cnext_el f7 f5 f8 c==> c= cnext_el f2 f5 cf_list f0 f5 c==> c= cfind_face f0 f5 f7 c==> cmarked_list f0 f3 f4 f5 c/\ cuniq cflatten cntrans f0 f3 f4 f5 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f3 f4 f5 cSUC f6 c==> call * part cf_last f0 cntrans f0 f3 f4 f5 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f3 f4 f5 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f3 f4 f5 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f3 f4 f5 cSUC f6 c==> cuniq f2 c==> c= cPOWER * part cnext_el f2 cindexf f8 f1 f2 f8 f1 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f8 f1 f2 f5 cf_list f0 cPOWER * part cnext_el f2 cindexf f8 f1 f2 cf_list f0 f5 c~ c= cindexf f8 cl'y f0 f2 f5 f7 cl'm f0 f2 f5
+ (good_list L) |- (((((marked_list L) N) r) x) ==> ((((find_face L) x) = f) ==> ((((next_el f) x) = w) ==> ((~ ((final_list L) r1)) ==> (((((marked_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) (((((ntrans L) N) r) x) i)) ==> (((MEM r1) (((((ntrans L) N) r) x) i)) ==> (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cmarked_list f0 f1 f2 f3 c==> c= cfind_face f0 f3 f4 c==> c= cnext_el f4 f3 f5 c==> c~ cfinal_list f0 f6 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f7 f6 f3 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f7 c==> cMEM f6 cntrans f0 f1 f2 f3 f7 c==> cMEM f3 f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f7 c==> c= cnext_el f6 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f7 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f7 f6 f3 c==> c= crtrans f0 f1 f2 f3 f7 f6 c==> c= crtrans f0 f1 f2 f3 cSUC f7 f8 c==> c= cl'y f0 f6 f3 f9 c==> c= cprev_el f6 f10 f11 c==> c= cztrans f0 f1 f2 f3 f7 f10 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c==> cuniq cflatten cntrans f0 f1 f2 f3 f7 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f7 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f7 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f7 c==> cuniq f6 c==> cMEM f5 f8 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f7 f8 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f7 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f7 c==> cMEM f3 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f7 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f7 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f7 f8 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f7 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f7 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f7 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f7 c==> cuniq f8 c==> c= cPOWER * part cnext_el f8 cindexf f5 f12 f8 f5 f12 c==> c= co * part cnext_el f8 * * part cPOWER * part cnext_el f8 cSUC cindexf f5 f12 f8 f3 cf_list f0 cPOWER * part cnext_el f8 cindexf f5 f12 f8 cf_list f0 f3 c~ c= cindexf f5 cl'y f0 f8 f3 f4 cl'm f0 f8 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r2) x) = ((f_list L) x)), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r2), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f8 cztrans f0 f1 f2 f3 f4 f9 c==> c= cl'y f0 f8 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f7 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f7 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f7 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f8 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f7 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f11 f5 c==> c<= cSUC f12 cindexf f6 f11 f5 c==> c< f12 cindexf f6 f11 f5 c==> cMEM f3 f7 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f7 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f7 f3 c= cPOWER * part cnext_el f7 f12 cnext_el f7 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f7 f12 cf_list f0 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((~ (?a. (a IN (GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((POWER (next_el r2)) (SUC (SUC m))) x) = ((f_list L) (((POWER (next_el r2)) (SUC m)) x))))) m))))))) ==> F)
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c~ c? / cIN b0 * part cGSPEC / c? / cSETSPEC b1 c~ c= cPOWER * part cnext_el f11 cSUC cSUC b2 f3 cf_list f0 cPOWER * part cnext_el f11 cSUC b2 f3 b2 cF
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) /\ ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cfind_face f0 f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> ! c= cPOWER * part cnext_el f8 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f8 cSUC b0 f3 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c~ c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3
+ (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))))) |- ((real_ge ((real_add ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- ((!p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) /\ (!p. (!x. ((x IN (\y. (p y))) = (p x)))))
T c/\ ! ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 ! ! c= cIN b1 / * b0 b2 * b0 b1
+ (transform_assumption_v2 L), ((good_list L) /\ ((good_list_nodes L) /\ ((~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) |- ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f))
T c==> ctransform_assumption_v2 f0 c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 f5 c= cnext_el f5 f3 f6 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
+ |- (((!y. (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y))))) ==> ((\y. (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y))))) x)) = ((\y. (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y))))) x))
T c= c==> ! ! c==> c/\ cuniq clist_of_darts f0 cMEM b0 clist_of_darts f0 c= cPOWER * part cf_list f0 b1 b0 cPOWER * part cnext_el cfind_face f0 b0 b1 b0 * / ! c==> c/\ cuniq clist_of_darts f0 cMEM b0 clist_of_darts f0 c= cPOWER * part cf_list f0 b1 b0 cPOWER * part cnext_el cfind_face f0 b0 b1 b0 f1 * / ! c==> c/\ cuniq clist_of_darts f0 cMEM b0 clist_of_darts f0 c= cPOWER * part cf_list f0 b1 b0 cPOWER * part cnext_el cfind_face f0 b0 b1 b0 f1
+ (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ c= cf_list f2 f3 cnext_el f0 f3 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 f6 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 cSUC f6 c==> cis_restricted chypermap_of_list f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f7 f1 f8 c==> c= cnext_el f9 f1 cf_list f2 f1 c==> c= cprev_el f9 f10 f11 c==> c= cl'y f2 f9 f1 f12 c==> c= cztrans f2 f4 f5 f1 f6 f10 c==> c= cfind_face f2 f1 f7 c==> c= crtrans f2 f4 f5 f1 f6 f9 c==> c= crtrans f2 f4 f5 f1 cSUC f6 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 f6 c==> cMEM f1 f9 c==> cMEM f3 f0 c==> cMEM f9 cntrans f2 f4 f5 f1 f6 c==> cnormal_list f2 cntrans f2 f4 f5 f1 f6 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 f6 f9 f1 c==> cmarked_list f2 f4 f5 f1 c==> cmarked_list f2 cntrans f2 f4 f5 f1 f6 crtrans f2 f4 f5 f1 f6 f1 c~ c= cindexf f8 cytrans f2 f4 f5 f1 cSUC f6 f7 cl'm f2 f0 f1
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM w) r2), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- ((~ ((final_list L) r1)) ==> (((((marked_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) (((((ntrans L) N) r) x) i)) ==> (((MEM r1) (((((ntrans L) N) r) x) i)) ==> (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cmarked_list f0 f4 f5 f2 c==> c~ cfinal_list f0 f6 c==> cmarked_list f0 cntrans f0 f4 f5 f2 f7 f6 f2 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 cntrans f0 f4 f5 f2 f7 c==> cMEM f6 cntrans f0 f4 f5 f2 f7 c==> cMEM f2 f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 f7 c==> c= cnext_el f6 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 f7 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 f7 f6 f2 c==> c= crtrans f0 f4 f5 f2 f7 f6 c==> c= crtrans f0 f4 f5 f2 cSUC f7 f8 c==> c= cl'y f0 f6 f2 f9 c==> c= cprev_el f6 f10 f11 c==> c= cztrans f0 f4 f5 f2 f7 f10 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c==> cuniq cflatten cntrans f0 f4 f5 f2 f7 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f7 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f7 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f7 c==> cuniq f6 c==> cMEM f3 f8 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f7 f8 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f7 c==> cMEM f8 cntrans f0 f4 f5 f2 cSUC f7 c==> cMEM f2 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f7 c==> c= cnext_el f8 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f7 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f7 f8 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f7 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f7 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f7 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f7 c==> cuniq f8 c==> c= cPOWER * part cnext_el f8 cindexf f3 f12 f8 f3 f12 c==> c= co * part cnext_el f8 * * part cPOWER * part cnext_el f8 cSUC cindexf f3 f12 f8 f2 cf_list f0 cPOWER * part cnext_el f8 cindexf f3 f12 f8 cf_list f0 f2 c~ c= cindexf f3 cl'y f0 f8 f2 f1 cl'm f0 f8 f2
+ |- ((\d. (!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d))))) x)
T * / ! c==> cuniq clist_of_darts b1 cuniq cfind_face b1 b0 f0
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq r2), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x'), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> c~ c= cf_list f0 f5 cnext_el f6 f5 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq f6 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f6 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cPOWER * part cnext_el f6 cindexf f9 f5 f6 f9 f5 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f6 c==> cMEM f3 f7 c==> cMEM f3 f6 c==> cMEM f5 f6 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f6 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f6 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f6 f3 c==> c= co * part cnext_el f6 * * part cPOWER * part cnext_el f6 cSUC cindexf f9 f5 f6 f3 cf_list f0 cPOWER * part cnext_el f6 cindexf f9 f5 f6 cf_list f0 f3 c~ c= cindexf f9 cl'y f0 f6 f3 f8 cl'm f0 f6 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((((rtrans L) N) r) x) (SUC i)) = r2) /\ (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> ! c= cPOWER * part cnext_el f8 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f8 cSUC b0 f3 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c~ c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3
+ (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 f5 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 cSUC f5 c==> cis_restricted chypermap_of_list f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f6 f1 f7 c==> c= cnext_el f8 f1 cf_list f2 f1 c==> c= cprev_el f8 f9 f10 c==> c= cl'y f2 f8 f1 f11 c==> c= cztrans f2 f3 f4 f1 f5 f9 c==> c= cfind_face f2 f1 f6 c==> c= crtrans f2 f3 f4 f1 f5 f8 c==> c= crtrans f2 f3 f4 f1 cSUC f5 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f3 f4 f1 f5 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f3 f4 f1 f5 c==> cMEM f1 f8 c==> cMEM f12 f0 c==> cMEM f8 cntrans f2 f3 f4 f1 f5 c==> cnormal_list f2 cntrans f2 f3 f4 f1 f5 c==> cs_flag_list f2 cntrans f2 f3 f4 f1 f5 f8 f1 c==> cmarked_list f2 f3 f4 f1 c==> cmarked_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 c==> c~ c= cf_list f2 f12 cnext_el f0 f12 c~ c= cindexf f7 cytrans f2 f3 f4 f1 cSUC f5 f6 cl'm f2 f0 f1
- |- (((!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) ==> ((\r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) r)) = ((\r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) r))
T c= c==> ! ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 * / ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2 * / ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c< f12 cindexf f6 f10 f5 c==> c<= cSUC f12 cindexf f6 f10 f5 c==> c<= f12 cindexf f6 f10 f5 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f11 cSUC f12 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f11 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f11 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f11 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f11 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c= cPOWER * part cnext_el f11 f12 cnext_el f11 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f11 f12 cf_list f0 f3
+ ((A a) /\ (!a. (~ (A a)))) |- (((A a) ==> F) = F)
T c==> c/\ * f0 f1 ! c~ * f0 b0 c= c==> * f0 f1 cF cF
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r2) x) = ((f_list L) x)), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r2), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((next_el r2) x))) = ((f_list L) (((POWER (next_el r2)) i') ((next_el r2) x))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f8 cztrans f0 f1 f2 f3 f4 f9 c==> c= cl'y f0 f8 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f7 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f7 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f7 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f8 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f7 c==> c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f7 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f11 f5 c==> c<= cSUC f12 cindexf f6 f11 f5 c==> c< f12 cindexf f6 f11 f5 c==> cMEM f3 f7 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f7 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f7 f3 c= cPOWER * part cnext_el f7 f12 cnext_el f7 cnext_el f7 f3 cf_list f0 cPOWER * part cnext_el f7 f12 cnext_el f7 f3
+ |- (((!L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) ==> ((\L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) L)) = ((\L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) L))
T c= c==> ! ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 * / ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 f0 * / ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 f0
- (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))))) |- ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c< f12 cindexf f6 f8 f5 c==> c<= cSUC f12 cindexf f6 f8 f5 c==> c<= f12 cindexf f6 f8 f5 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f11 cSUC f12 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f11 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f11 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f11 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f11 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f11 c= cPOWER * part cnext_el f11 f12 cnext_el f11 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f11 f12 cf_list f0 f3
+ |- ((\s. ((~ ((all a) s)) = (?x. (((MEM x) s) /\ (~ (a x)))))) s)
T * / c= c~ call f0 b0 c? / c/\ cMEM b1 b0 c~ * f0 b1 f1
+ (~ (((f_list L) x') = ((next_el r2) x'))), (good_list L), (((next_el f) x) = w), (((next_el r2) x) = ((f_list L) x)), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cgood_list f0 c==> c= cnext_el f3 f4 f5 c==> c= cnext_el f2 f4 cf_list f0 f4 c==> c= cfind_face f0 f4 f3 c==> cmarked_list f0 f6 f7 f4 c==> call * part cf_last f0 cntrans f0 f6 f7 f4 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f4 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f4 cSUC f8 c==> cuniq f2 c==> c= cPOWER * part cnext_el f2 cindexf f5 f1 f2 f5 f1 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f5 f1 f2 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f5 f1 f2 cf_list f0 f4 c~ c= cindexf f5 cl'y f0 f2 f4 f3 cl'm f0 f2 f4
+ ((~ ((all a) s)) = (?x. (((MEM x) s) /\ (~ (a x))))) |- ((?x. (((MEM x) s) /\ (~ (a x)))) = (~ ((all a) s)))
T c==> c= c~ call f0 f1 c? / c/\ cMEM b0 f1 c~ * f0 b0 c= c? / c/\ cMEM b0 f1 c~ * f0 b0 c~ call f0 f1
+ |- ((((MEM w) r2) /\ (((MEM (((POWER (next_el f)) i') w)) r2) /\ (uniq r2))) ==> ((((POWER (next_el r2)) (((indexf w) (((POWER (next_el f)) i') w)) r2)) w) = (((POWER (next_el f)) i') w)))
T c==> c/\ cMEM f0 f1 c/\ cMEM cPOWER * part cnext_el f2 f3 f0 f1 cuniq f1 c= cPOWER * part cnext_el f1 cindexf f0 cPOWER * part cnext_el f2 f3 f0 f1 f0 cPOWER * part cnext_el f2 f3 f0
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) (((((ntrans L) N) r) x) i)) /\ (((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)) /\ (((MEM x) (((((rtrans L) N) r) x) i)) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) /\ ((((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))))))), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cfind_face f0 f3 f5 c==> c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 cntrans f0 f1 f2 f3 f4 c/\ cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c/\ cMEM f3 crtrans f0 f1 f2 f3 f4 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c/\ c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
- (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))))))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 f5 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 cSUC f5 c==> cis_restricted chypermap_of_list f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f6 f1 f7 c==> c= cnext_el f8 f1 cf_list f2 f1 c==> c= cprev_el f8 f9 f10 c==> c= cl'y f2 f8 f1 f11 c==> c= cztrans f2 f3 f4 f1 f5 f9 c==> c= cfind_face f2 f1 f6 c==> c= crtrans f2 f3 f4 f1 f5 f8 c==> c= crtrans f2 f3 f4 f1 cSUC f5 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f3 f4 f1 f5 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f3 f4 f1 f5 c==> cMEM f1 f8 c==> cMEM f8 cntrans f2 f3 f4 f1 f5 c==> cnormal_list f2 cntrans f2 f3 f4 f1 f5 c==> cs_flag_list f2 cntrans f2 f3 f4 f1 f5 f8 f1 c==> cmarked_list f2 f3 f4 f1 c==> cmarked_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 c==> cMEM f12 f0 c==> c~ c= cf_list f2 f12 cnext_el f0 f12 c==> cuniq cflatten cntrans f2 f3 f4 f1 f5 c==> call / c~ c= b0 cNIL cntrans f2 f3 f4 f1 f5 c==> call * part cf_last f2 cntrans f2 f3 f4 f1 f5 c==> call * part cloop_list f2 cntrans f2 f3 f4 f1 f5 c==> ! c==> cMEM b0 cflatten cntrans f2 f3 f4 f1 f5 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f3 f4 f1 f5 c==> cuniq f8 c==> cMEM f7 f0 c==> cmarked_list f2 cntrans f2 f3 f4 f1 cSUC f5 f0 f1 c==> cnormal_list f2 cntrans f2 f3 f4 f1 cSUC f5 c==> cMEM f0 cntrans f2 f3 f4 f1 cSUC f5 c==> cMEM f1 f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f3 f4 f1 cSUC f5 c==> c= cnext_el f0 f1 cf_list f2 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f3 f4 f1 cSUC f5 ce_list f1 c==> cs_flag_list f2 cntrans f2 f3 f4 f1 cSUC f5 f0 f1 c==> cuniq cflatten cntrans f2 f3 f4 f1 cSUC f5 c==> call / c~ c= b0 cNIL cntrans f2 f3 f4 f1 cSUC f5 c==> call * part cf_last f2 cntrans f2 f3 f4 f1 cSUC f5 c==> call * part cloop_list f2 cntrans f2 f3 f4 f1 cSUC f5 c==> ! c==> cMEM b0 cflatten cntrans f2 f3 f4 f1 cSUC f5 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f3 f4 f1 cSUC f5 c==> cuniq f0 c==> c= cPOWER * part cnext_el f0 cindexf f7 f12 f0 f7 f12 c~ c= cindexf f7 cl'y f2 f0 f1 f6 cl'm f2 f0 f1
+ (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x) |- (((normal_list L) (((((ntrans L) N) r) x) i)) /\ (((MEM r1) (((((ntrans L) N) r) x) i)) ==> (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cnormal_list f0 cntrans f0 f4 f5 f2 f6 c==> cmarked_list f0 f4 f5 f2 c/\ cnormal_list f0 cntrans f0 f4 f5 f2 f6 c==> cMEM f7 cntrans f0 f4 f5 f2 f6 c==> cMEM f2 f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 f6 c==> c= cnext_el f7 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 f6 f7 f2 c==> c= crtrans f0 f4 f5 f2 f6 f7 c==> c= crtrans f0 f4 f5 f2 cSUC f6 f8 c==> c= cl'y f0 f7 f2 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f4 f5 f2 f6 f10 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c==> cuniq cflatten cntrans f0 f4 f5 f2 f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f6 c==> cuniq f7 c==> cMEM f3 f8 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f8 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f2 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> c= cnext_el f8 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> cuniq f8 c==> c= cPOWER * part cnext_el f8 cindexf f3 f12 f8 f3 f12 c==> c= co * part cnext_el f8 * * part cPOWER * part cnext_el f8 cSUC cindexf f3 f12 f8 f2 cf_list f0 cPOWER * part cnext_el f8 cindexf f3 f12 f8 cf_list f0 f2 c~ c= cindexf f3 cl'y f0 f8 f2 f1 cl'm f0 f8 f2
+ (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cmarked_list f0 f4 f5 f2 c==> cMEM f2 f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 f7 c==> c= cnext_el f6 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 f7 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 f7 f6 f2 c==> c= crtrans f0 f4 f5 f2 f7 f6 c==> c= crtrans f0 f4 f5 f2 cSUC f7 f8 c==> c= cl'y f0 f6 f2 f9 c==> c= cprev_el f6 f10 f11 c==> c= cztrans f0 f4 f5 f2 f7 f10 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c==> cuniq cflatten cntrans f0 f4 f5 f2 f7 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f7 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f7 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f7 c==> cuniq f6 c==> cMEM f3 f8 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f7 f8 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f7 c==> cMEM f8 cntrans f0 f4 f5 f2 cSUC f7 c==> cMEM f2 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f7 c==> c= cnext_el f8 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f7 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f7 f8 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f7 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f7 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f7 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f7 c==> cuniq f8 c==> c= cPOWER * part cnext_el f8 cindexf f3 f12 f8 f3 f12 c==> c= co * part cnext_el f8 * * part cPOWER * part cnext_el f8 cSUC cindexf f3 f12 f8 f2 cf_list f0 cPOWER * part cnext_el f8 cindexf f3 f12 f8 cf_list f0 f2 c~ c= cindexf f3 cl'y f0 f8 f2 f1 cl'm f0 f8 f2
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) /\ (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f8 f5 c==> c<= cSUC f11 cindexf f6 f8 f5 c==> c< f11 cindexf f6 f8 f5 c==> cMEM f3 f7 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c/\ cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f12 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f12 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cf_list f0 f3
- |- (((!x'. (((\z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)) x') ==> (?z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)))) ==> ((?z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)) ==> (?z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)))) = ((?z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)) ==> (?z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1))))
T c= c==> ! c==> * / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b1 b0 c? / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b1 c==> c? / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0 c? / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0 c==> c? / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0 c? / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0
+ ((A a) /\ (!a. (~ (A a)))) |- (~ (A _10304017))
T c==> c/\ * f0 f1 ! c~ * f0 b0 c~ * f0 f2
+ (((MEM d) ((find_face L) d)) = ((MEM d) (list_of_darts L))) |- (((MEM d) (list_of_darts L)) = ((MEM d) ((find_face L) d)))
T c==> c= cMEM f0 cfind_face f1 f0 cMEM f0 clist_of_darts f1 c= cMEM f0 clist_of_darts f1 cMEM f0 cfind_face f1 f0
+ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cfind_face f0 f3 f5 c==> cmarked_list f0 f1 f2 f3 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((all (loop_list L)) (((((ntrans L) N) r) x) i)) /\ ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c/\ call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ |- (((?z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)) ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f))) = ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))
T c= c==> c? / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0 c<= cindexf f6 cztrans f1 f2 f3 f4 f5 f7 cindexf f6 cytrans f1 f2 f3 f4 cSUC f5 f7 c<= cindexf f6 cztrans f1 f2 f3 f4 f5 f7 cindexf f6 cytrans f1 f2 f3 f4 cSUC f5 f7
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) /\ (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> ! c= cPOWER * part cnext_el f8 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f8 cSUC b0 f3 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c~ c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3
+ (uniq r2), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((((marked_list L) N) r) x) |- (((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))))) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))
T c==> cuniq f0 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> ctransform_assumption_v2 f1 c==> c= cnext_el f2 f3 f4 c==> c= cindexf f4 cPOWER * part cnext_el f2 f5 f4 f0 f5 c==> c= cindexf f4 cPOWER * part cnext_el f2 cSUC f5 f4 f0 cSUC f5 c==> c= cfind_face f1 f3 f2 c==> c= crtrans f1 f6 f7 f3 cSUC f8 f0 c==> cMEM cPOWER * part cnext_el f2 f5 f4 f0 c==> cMEM cPOWER * part cnext_el f2 cSUC f5 f4 f0 c==> cmarked_list f1 f6 f7 f3 c==> c/\ cuniq clist_of_darts f1 c/\ call / c~ c= b0 cNIL f1 ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c= cPOWER * part cnext_el f0 f5 cnext_el f0 cf_list f1 f3 cf_list f1 cPOWER * part cnext_el f0 f5 cf_list f1 f3
+ (uniq f), (uniq r2), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((((marked_list L) N) r) x) |- ((((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))
T c==> cuniq f0 c==> cuniq f1 c==> cuniq clist_of_darts f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f0 f3 f4 c==> c= cindexf f4 cPOWER * part cnext_el f0 f5 f4 f1 f5 c==> c= cindexf f4 cPOWER * part cnext_el f0 cSUC f5 f4 f1 cSUC f5 c==> c= cfind_face f2 f3 f0 c==> c= crtrans f2 f6 f7 f3 cSUC f8 f1 c==> cMEM cPOWER * part cnext_el f0 f5 f4 f1 c==> cMEM cPOWER * part cnext_el f0 cSUC f5 f4 f1 c==> cmarked_list f2 f6 f7 f3 c==> c==> cmarked_list f2 f6 f7 f3 cMEM f3 clist_of_darts f2 c= cPOWER * part cnext_el f1 f5 cnext_el f1 cf_list f2 f3 cf_list f2 cPOWER * part cnext_el f1 f5 cf_list f2 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((all (loop_list L)) (((((ntrans L) N) r) x) i)) /\ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i))))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c/\ call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
- |- ((\x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) x)
T * / ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 f3
+ ((((((rtrans L) N) r) x) i) = r1), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)) |- ((((MEM r1) (((((ntrans L) N) r) x) i)) ==> (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))))))))))))))) = (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))))))))))))))))
T c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c= c==> cMEM f5 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f5 f3 c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f6 c==> c= cl'y f0 f5 f3 f7 c==> c= cprev_el f5 f8 f9 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> ! c= cPOWER * part cnext_el f6 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f6 cSUC b0 f3 c==> cMEM f10 f6 c==> c~ c= cf_list f0 f10 cnext_el f6 f10 c~ c= cindexf f11 cytrans f0 f1 f2 f3 cSUC f4 f12 cl'm f0 f6 f3 c==> cMEM f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f5 f3 c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f6 c==> c= cl'y f0 f5 f3 f7 c==> c= cprev_el f5 f8 f9 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> ! c= cPOWER * part cnext_el f6 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f6 cSUC b0 f3 c==> cMEM f10 f6 c==> c~ c= cf_list f0 f10 cnext_el f6 f10 c~ c= cindexf f11 cytrans f0 f1 f2 f3 cSUC f4 f12 cl'm f0 f6 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((!x'. (((\z. ((((((ztrans L) N) r) x) i) = z)) x') ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))) ==> ((?z. ((((((ztrans L) N) r) x) i) = z)) ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))) = ((?z. ((((((ztrans L) N) r) x) i) = z)) ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f10 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= c==> ! c==> * / c= cztrans f0 f1 f2 f3 f4 b1 b0 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 c==> c? / c= cztrans f0 f1 f2 f3 f4 b0 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 c==> c? / c= cztrans f0 f1 f2 f3 f4 b0 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c< f12 cindexf f6 f8 f5 c==> c<= cSUC f12 cindexf f6 f8 f5 c==> c<= f12 cindexf f6 f8 f5 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f11 cSUC f12 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f11 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f11 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f11 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f11 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c= cPOWER * part cnext_el f11 f12 cnext_el f11 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f11 f12 cf_list f0 f3
+ (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((MEM x') r2) /\ ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 f5 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 cSUC f5 c==> cis_restricted chypermap_of_list f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f6 f1 f7 c==> c= cnext_el f8 f1 cf_list f2 f1 c==> c= cprev_el f8 f9 f10 c==> c= cl'y f2 f8 f1 f11 c==> c= cztrans f2 f3 f4 f1 f5 f9 c==> c= cfind_face f2 f1 f6 c==> c= crtrans f2 f3 f4 f1 f5 f8 c==> c= crtrans f2 f3 f4 f1 cSUC f5 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f3 f4 f1 f5 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f3 f4 f1 f5 c==> cMEM f1 f8 c==> cMEM f12 f0 c==> cMEM f8 cntrans f2 f3 f4 f1 f5 c==> cnormal_list f2 cntrans f2 f3 f4 f1 f5 c==> cs_flag_list f2 cntrans f2 f3 f4 f1 f5 f8 f1 c==> cmarked_list f2 f3 f4 f1 c==> cmarked_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 c/\ cMEM f12 f0 c==> c~ c= cf_list f2 f12 cnext_el f0 f12 c~ c= cindexf f7 cytrans f2 f3 f4 f1 cSUC f5 f6 cl'm f2 f0 f1
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((\z. ((((((ztrans L) N) r) x) i) = z)) z) |- (((\z. ((((((ztrans L) N) r) x) i) = z)) z) /\ ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f10 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> * / c= cztrans f0 f1 f2 f3 f4 b0 f11 c/\ * / c= cztrans f0 f1 f2 f3 f4 b0 f11 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
+ (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((normal_list L) (((((ntrans L) N) r) x) i)) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ c= cf_list f2 f3 cnext_el f0 f3 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 f6 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 cSUC f6 c==> cis_restricted chypermap_of_list f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f7 f1 f8 c==> c= cnext_el f9 f1 cf_list f2 f1 c==> c= cprev_el f9 f10 f11 c==> c= cl'y f2 f9 f1 f12 c==> c= cztrans f2 f4 f5 f1 f6 f10 c==> c= cfind_face f2 f1 f7 c==> c= crtrans f2 f4 f5 f1 f6 f9 c==> c= crtrans f2 f4 f5 f1 cSUC f6 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 f6 c==> cMEM f1 f9 c==> cMEM f3 f0 c==> cMEM f9 cntrans f2 f4 f5 f1 f6 c==> cnormal_list f2 cntrans f2 f4 f5 f1 f6 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 f6 f9 f1 c==> cmarked_list f2 f4 f5 f1 c==> cmarked_list f2 cntrans f2 f4 f5 f1 f6 crtrans f2 f4 f5 f1 f6 f1 c==> cnormal_list f2 cntrans f2 f4 f5 f1 f6 c~ c= cindexf f8 cytrans f2 f4 f5 f1 cSUC f6 f7 cl'm f2 f0 f1
+ |- (((((POWER (next_el r2)) i') ((next_el r2) ((next_el r2) x))) = ((f_list L) (((POWER (next_el r2)) i') ((next_el r2) x)))) = ((((POWER (next_el r2)) (SUC (SUC i'))) x) = ((f_list L) (((POWER (next_el r2)) (SUC i')) x))))
T c= c= cPOWER * part cnext_el f0 f1 cnext_el f0 cnext_el f0 f2 cf_list f3 cPOWER * part cnext_el f0 f1 cnext_el f0 f2 c= cPOWER * part cnext_el f0 cSUC cSUC f1 f2 cf_list f3 cPOWER * part cnext_el f0 cSUC f1 f2
+ |- (((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F) = ((!x. (~ (A x))) = (~ (?a. (A a)))))
T c= c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c= ! c~ * f0 b0 c~ c? / * f0 b0
+ |- (((!L. (!y. (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y)))))) ==> ((\L. (!y. (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y)))))) L)) = ((\L. (!y. (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y)))))) L))
T c= c==> ! ! ! c==> c/\ cuniq clist_of_darts b0 cMEM b1 clist_of_darts b0 c= cPOWER * part cf_list b0 b2 b1 cPOWER * part cnext_el cfind_face b0 b1 b2 b1 * / ! ! c==> c/\ cuniq clist_of_darts b0 cMEM b1 clist_of_darts b0 c= cPOWER * part cf_list b0 b2 b1 cPOWER * part cnext_el cfind_face b0 b1 b2 b1 f0 * / ! ! c==> c/\ cuniq clist_of_darts b0 cMEM b1 clist_of_darts b0 c= cPOWER * part cf_list b0 b2 b1 cPOWER * part cnext_el cfind_face b0 b1 b2 b1 f0
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cMEM f12 f11 c==> c~ c= cf_list f0 f12 cnext_el f11 f12 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c==> cMEM f6 f11 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f11 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f11 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f11 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f11 c==> c= cPOWER * part cnext_el f11 cindexf f6 f12 f11 f6 f12 c==> c= co * part cnext_el f11 * * part cPOWER * part cnext_el f11 cSUC cindexf f6 f12 f11 f3 cf_list f0 cPOWER * part cnext_el f11 cindexf f6 f12 f11 cf_list f0 f3 c~ c= cindexf f6 cl'y f0 f11 f3 f5 cl'm f0 f11 f3
+ |- ((\x. (!i. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))))))) ==> (~ ((final_list L) (((((rtrans L) N) r) x) i)))))) x)
T * / ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 crtrans f0 f1 f2 b0 cSUC b1 c~ cfinal_list f0 crtrans f0 f1 f2 b0 b1 f3
+ |- ((\x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x))) x)
T * / c= cIN b0 * part cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 * f0 b0 f1
+ (uniq (list_of_darts L)), (((next_el f) x) = w), (((next_el r2) x) = ((f_list L) x)), (((find_face L) x) = f), ((MEM x) (list_of_darts L)) |- (((((f_list L) x) = w) ==> ((((next_el r2) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))) = ((((uniq (list_of_darts L)) /\ ((MEM x) (list_of_darts L))) ==> ((((POWER (f_list L)) (SUC (NUMERAL _0))) x) = (((POWER (next_el ((find_face L) x))) (SUC (NUMERAL _0))) x))) ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))
T c==> cuniq clist_of_darts f0 c==> c= cnext_el f1 f2 f3 c==> c= cnext_el f4 f2 cf_list f0 f2 c==> c= cfind_face f0 f2 f1 c==> cMEM f2 clist_of_darts f0 c= c==> c= cf_list f0 f2 f3 c==> c= cnext_el f4 cPOWER * part cnext_el f4 cindexf f3 f5 f4 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f4 cindexf f3 f5 f4 cf_list f0 f2 c~ c= cindexf f3 cl'y f0 f4 f2 f1 cl'm f0 f4 f2 c==> c==> c/\ cuniq clist_of_darts f0 cMEM f2 clist_of_darts f0 c= cPOWER * part cf_list f0 cSUC cNUMERAL c_0 f2 cPOWER * part cnext_el cfind_face f0 f2 cSUC cNUMERAL c_0 f2 c==> c= co * part cnext_el f4 * * part cPOWER * part cnext_el f4 cSUC cindexf f3 f5 f4 f2 cf_list f0 cPOWER * part cnext_el f4 cindexf f3 f5 f4 cf_list f0 f2 c~ c= cindexf f3 cl'y f0 f4 f2 f1 cl'm f0 f4 f2
+ (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), ((((((rtrans L) N) r) x) i) = r1) |- (((next_el r1) x) = ((f_list L) x))
T c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= crtrans f0 f1 f2 f3 f4 f5 c= cnext_el f5 f3 cf_list f0 f3
+ (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cmarked_list f0 f4 f5 f2 c==> c= cl'y f0 f6 f2 f7 c==> c= cprev_el f6 f8 f9 c==> c= cztrans f0 f4 f5 f2 f10 f8 c==> cMEM f11 f12 c==> c~ c= cf_list f0 f11 cnext_el f12 f11 c==> cuniq cflatten cntrans f0 f4 f5 f2 f10 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f10 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f10 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f10 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f10 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f10 c==> cuniq f6 c==> cMEM f3 f12 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f10 f12 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f10 c==> cMEM f12 cntrans f0 f4 f5 f2 cSUC f10 c==> cMEM f2 f12 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f10 c==> c= cnext_el f12 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f10 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f10 f12 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f10 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f10 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f10 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f10 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f10 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f10 c==> cuniq f12 c==> c= cPOWER * part cnext_el f12 cindexf f3 f11 f12 f3 f11 c==> c= co * part cnext_el f12 * * part cPOWER * part cnext_el f12 cSUC cindexf f3 f11 f12 f2 cf_list f0 cPOWER * part cnext_el f12 cindexf f3 f11 f12 cf_list f0 f2 c~ c= cindexf f3 cl'y f0 f12 f2 f1 cl'm f0 f12 f2
+ ((\z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)) z1) |- (((((prev_el r1) (((((ztrans L) N) r) x) i)) = z1) ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f))) = ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))
T c==> * / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0 f6 c= c==> c= cprev_el f0 cztrans f1 f2 f3 f4 f5 f6 c<= cindexf f7 cztrans f1 f2 f3 f4 f5 f8 cindexf f7 cytrans f1 f2 f3 f4 cSUC f5 f8 c<= cindexf f7 cztrans f1 f2 f3 f4 f5 f8 cindexf f7 cytrans f1 f2 f3 f4 cSUC f5 f8
- |- (((!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) ==> ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1)) = ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1))
T c= c==> ! ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1 * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
+ |- ((\L. (!N. (!r. (!x. (!i. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))))))) ==> (~ ((final_list L) (((((rtrans L) N) r) x) i))))))))) L)
T * / ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 crtrans b0 b1 b2 b3 cSUC b4 c~ cfinal_list b0 crtrans b0 b1 b2 b3 b4 f0
+ |- (((((min_num (GSPEC (\GEN%PVAR%8675. (?m. (((SETSPEC GEN%PVAR%8675) (P m)) m))))) = n) /\ ((!i. ((i < m) ==> (~ (P i)))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (P m)) m)))) = EMPTY)))) ==> (m <= n)) = T)
T c= c==> c/\ c= cmin_num * part cGSPEC / c? / cSETSPEC b0 * f0 b1 b1 f1 c/\ ! c==> c< b0 f2 c~ * f0 b0 c~ c= * part cGSPEC / c? / cSETSPEC b0 * f0 b1 b1 part cEMPTY c<= f2 f1 cT
+ (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- ((((next_el f) x) = w) /\ ((~ ((final_list L) r1)) ==> (((((marked_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) (((((ntrans L) N) r) x) i)) ==> (((MEM r1) (((((ntrans L) N) r) x) i)) ==> (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cmarked_list f0 f4 f5 f2 c/\ c= cnext_el f1 f2 f3 c==> c~ cfinal_list f0 f6 c==> cmarked_list f0 cntrans f0 f4 f5 f2 f7 f6 f2 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 cntrans f0 f4 f5 f2 f7 c==> cMEM f6 cntrans f0 f4 f5 f2 f7 c==> cMEM f2 f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 f7 c==> c= cnext_el f6 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 f7 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 f7 f6 f2 c==> c= crtrans f0 f4 f5 f2 f7 f6 c==> c= crtrans f0 f4 f5 f2 cSUC f7 f8 c==> c= cl'y f0 f6 f2 f9 c==> c= cprev_el f6 f10 f11 c==> c= cztrans f0 f4 f5 f2 f7 f10 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c==> cuniq cflatten cntrans f0 f4 f5 f2 f7 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f7 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f7 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f7 c==> cuniq f6 c==> cMEM f3 f8 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f7 f8 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f7 c==> cMEM f8 cntrans f0 f4 f5 f2 cSUC f7 c==> cMEM f2 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f7 c==> c= cnext_el f8 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f7 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f7 f8 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f7 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f7 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f7 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f7 c==> cuniq f8 c==> c= cPOWER * part cnext_el f8 cindexf f3 f12 f8 f3 f12 c==> c= co * part cnext_el f8 * * part cPOWER * part cnext_el f8 cSUC cindexf f3 f12 f8 f2 cf_list f0 cPOWER * part cnext_el f8 cindexf f3 f12 f8 cf_list f0 f2 c~ c= cindexf f3 cl'y f0 f8 f2 f1 cl'm f0 f8 f2
- |- ((((uniq (list_of_darts L)) ==> (uniq ((find_face L) x))) ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))) = (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))
T c= c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f3 f4 f2 f1 cf_list f0 cPOWER * part cnext_el f2 cindexf f3 f4 f2 cf_list f0 f1 c~ c= cindexf f3 cl'y f0 f2 f1 f5 cl'm f0 f2 f1 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f3 f4 f2 f1 cf_list f0 cPOWER * part cnext_el f2 cindexf f3 f4 f2 cf_list f0 f1 c~ c= cindexf f3 cl'y f0 f2 f1 f5 cl'm f0 f2 f1
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) /\ ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x)))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ c= cnext_el f5 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (~ (((f_list L) x') = ((next_el r2) x'))), (uniq f), (uniq (list_of_darts L)), (((next_el f) x) = w), (((next_el r2) x) = ((f_list L) x)), ((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x'), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- ((uniq f) /\ (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cuniq f3 c==> cuniq clist_of_darts f0 c==> c= cnext_el f3 f4 f5 c==> c= cnext_el f2 f4 cf_list f0 f4 c==> c= cPOWER * part cnext_el f2 cindexf f5 f1 f2 f5 f1 c==> c= cfind_face f0 f4 f3 c==> cmarked_list f0 f6 f7 f4 c/\ cuniq f3 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f5 f1 f2 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f5 f1 f2 cf_list f0 f4 c~ c= cindexf f5 cl'y f0 f2 f4 f3 cl'm f0 f2 f4
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) |- ((((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i)))))) = T)
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c= c==> cMEM f5 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 f5 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 cT
+ (~ (((f_list L) x') = ((next_el r2) x'))) |- ((((next_el r2) x') = ((f_list L) x')) = F)
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c= c= cnext_el f2 f1 cf_list f0 f1 cF
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f8 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ (((next_el r2) x) = ((f_list L) x)) |- (((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))) = ((((POWER (next_el r2)) i') ((next_el r2) ((next_el r2) x))) = ((f_list L) (((POWER (next_el r2)) i') ((next_el r2) x)))))
T c==> c= cnext_el f0 f1 cf_list f2 f1 c= c= cPOWER * part cnext_el f0 f3 cnext_el f0 cf_list f2 f1 cf_list f2 cPOWER * part cnext_el f0 f3 cf_list f2 f1 c= cPOWER * part cnext_el f0 f3 cnext_el f0 cnext_el f0 f1 cf_list f2 cPOWER * part cnext_el f0 f3 cnext_el f0 f1
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c~ c= cindexf f9 cytrans f0 f1 f2 f3 cSUC f4 f8 cl'm f0 f5 f3
- |- ((((\r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)) r2) ==> (?r2. ((((((rtrans L) N) r) x) (SUC i)) = r2))) = T)
T c= c==> * / c= crtrans f0 f1 f2 f3 cSUC f4 b0 f5 c? / c= crtrans f0 f1 f2 f3 cSUC f4 b0 cT
+ (transform_assumption_v2 L) |- ((transform_assumption_v2 L) = T)
T c==> ctransform_assumption_v2 f0 c= ctransform_assumption_v2 f0 cT
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM w) r2), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((normal_list L) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM x) r2) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) /\ ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x))))))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> c/\ cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c/\ cMEM f3 f5 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ c= cnext_el f5 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((find_face L) x) = f), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((next_el r1) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ c= cnext_el f7 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> ! c= cPOWER * part cnext_el f8 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f8 cSUC b0 f3 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c~ c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((uniq r1) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f7 f3 f8 c==> c= cnext_el f9 f3 cf_list f0 f3 c==> c= cprev_el f9 f10 f11 c==> c= cl'y f0 f9 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f7 c==> c= crtrans f0 f1 f2 f3 f4 f9 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f9 c==> cMEM f6 f5 c==> cMEM f9 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f9 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cuniq f9 c~ c= cindexf f8 cytrans f0 f1 f2 f3 cSUC f4 f7 cl'm f0 f5 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f11 cindexf f6 f8 f5 c==> c<= cSUC f11 cindexf f6 f8 f5 c==> c< f11 cindexf f6 f8 f5 c==> cMEM f3 f7 c==> cMEM f3 f12 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> c= cnext_el f12 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f12 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cf_list f0 f3
- |- ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))
T c= crtrans f0 f1 f2 f3 f4 cSND cPOWER * * part ctransform_list f0 f3 f4 c, f1 f2
- ((((((rtrans L) N) r) x) i) = r1), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((marked_list L) (((((ntrans L) N) r) x) i)) r1) x) = T)
T c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= cmarked_list f0 cntrans f0 f1 f2 f3 f4 f5 f3 cT
- |- ((?a. (P a)) = ((P T) \/ (P F)))
T c= c? / * f0 b0 c\/ * f0 cT * f0 cF
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), ((((l'y L) r1) x) = y), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((l'y L) r1) x) = y) /\ ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cl'y f0 f7 f3 f8 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f9 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ c= cl'y f0 f7 f3 f8 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f9 f3 c==> c< f12 cindexf f6 f10 f5 c==> c<= cSUC f12 cindexf f6 f10 f5 c==> c<= f12 cindexf f6 f10 f5 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f9 cSUC f12 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f9 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f9 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f9 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f9 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f9 f3 c= cPOWER * part cnext_el f9 f12 cnext_el f9 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f9 f12 cf_list f0 f3
+ |- (((!L. (((MEM d) ((find_face L) d)) = ((MEM d) (list_of_darts L)))) ==> ((\L. (((MEM d) ((find_face L) d)) = ((MEM d) (list_of_darts L)))) L)) = ((\L. (((MEM d) ((find_face L) d)) = ((MEM d) (list_of_darts L)))) L))
T c= c==> ! c= cMEM f0 cfind_face b0 f0 cMEM f0 clist_of_darts b0 * / c= cMEM f0 cfind_face b0 f0 cMEM f0 clist_of_darts b0 f1 * / c= cMEM f0 cfind_face b0 f0 cMEM f0 clist_of_darts b0 f1
+ (!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))) |- ((\N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i))))))))) N)
T c==> ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 * / ! ! ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c= cfind_face f0 b2 b4 c= cnext_el b4 b2 b5 cMEM b5 crtrans f0 b0 b1 b2 b3 f1
+ (uniq f), (uniq r2), (uniq (list_of_darts L)), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((MEM w) r2), ((MEM x) (list_of_darts L)), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2) |- (((((MEM w) r2) /\ (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) /\ (uniq r2))) ==> ((((POWER (next_el r2)) (((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2)) w) = (((POWER (next_el f)) (SUC i')) w))) ==> ((((POWER (next_el r2)) i') ((next_el r2) w)) = ((f_list L) (((POWER (next_el f)) i') w))))
T c==> cuniq f0 c==> cuniq f1 c==> cuniq clist_of_darts f2 c==> c= cnext_el f0 f3 f4 c==> c= cindexf f4 cPOWER * part cnext_el f0 cSUC f5 f4 f1 cSUC f5 c==> c= cfind_face f2 f3 f0 c==> cMEM f4 f1 c==> cMEM f3 clist_of_darts f2 c==> cMEM cPOWER * part cnext_el f0 cSUC f5 f4 f1 c==> c==> c/\ cMEM f4 f1 c/\ cMEM cPOWER * part cnext_el f0 cSUC f5 f4 f1 cuniq f1 c= cPOWER * part cnext_el f1 cindexf f4 cPOWER * part cnext_el f0 cSUC f5 f4 f1 f4 cPOWER * part cnext_el f0 cSUC f5 f4 c= cPOWER * part cnext_el f1 f5 cnext_el f1 f4 cf_list f2 cPOWER * part cnext_el f0 f5 f4
+ (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019)))) (real_of_num (NUMERAL _0)))))) |- ((((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019)))) (real_of_num (NUMERAL _0)))))) /\ F)
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0 cF
+ ((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ ((~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w))))))) |- (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ ((~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w))))))) /\ ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))
T c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 f5 c= cnext_el f5 f3 f6 c/\ c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 f5 c= cnext_el f5 f3 f6 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) /\ (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) /\ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f6 f3 f7 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f5 f9 f10 c==> c= cl'y f0 f5 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f7 cPOWER * part cnext_el f6 f12 f7 f8 f12 c==> c= cindexf f7 cPOWER * part cnext_el f6 cSUC f12 f7 f8 cSUC f12 c==> c= cindexf f7 cytrans f0 f1 f2 f3 cSUC f4 f6 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f6 c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c/\ call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f7 f9 f6 c==> c<= cSUC f12 cindexf f7 f9 f6 c==> c< f12 cindexf f7 f9 f6 c==> cMEM f3 f5 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f6 f12 f7 f8 c==> cMEM cPOWER * part cnext_el f6 cSUC f12 f7 f8 c==> cMEM f5 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f5 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ (~ (((f_list L) x') = ((next_el r2) x'))), ((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') |- ((((f_list L) x) = w) ==> ((((next_el r2) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> c= cPOWER * part cnext_el f2 cindexf f3 f1 f2 f3 f1 c==> c= cf_list f0 f4 f3 c==> c= cnext_el f2 cPOWER * part cnext_el f2 cindexf f3 f1 f2 cf_list f0 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f3 f1 f2 cf_list f0 f4 c~ c= cindexf f3 cl'y f0 f2 f4 f5 cl'm f0 f2 f4
- (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (?x. (((MEM x) r2) /\ (~ (((f_list L) x) = ((next_el r2) x))))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c? / c/\ cMEM b0 f0 c~ c= cf_list f2 b0 cnext_el f0 b0 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 f5 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 cSUC f5 c==> cis_restricted chypermap_of_list f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f6 f1 f7 c==> c= cnext_el crtrans f2 f3 f4 f1 f5 f1 cf_list f2 f1 c==> c= cprev_el f8 cztrans f2 f3 f4 f1 f5 f9 c==> c= cl'y f2 f8 f1 f10 c==> c= cztrans f2 f3 f4 f1 f5 f11 c==> c= cfind_face f2 f1 f6 c==> c= crtrans f2 f3 f4 f1 f5 f8 c==> c= crtrans f2 f3 f4 f1 cSUC f5 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f3 f4 f1 f5 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f3 f4 f1 f5 c==> cMEM f1 crtrans f2 f3 f4 f1 f5 c==> cMEM crtrans f2 f3 f4 f1 f5 cntrans f2 f3 f4 f1 f5 c==> cnormal_list f2 cntrans f2 f3 f4 f1 f5 c==> cs_flag_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 c==> cmarked_list f2 f3 f4 f1 c==> cmarked_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 c~ c= cindexf f7 cytrans f2 f3 f4 f1 cSUC f5 f6 cl'm f2 f0 f1
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> ! c= cPOWER * part cnext_el f8 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f8 cSUC b0 f3 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c~ c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> ! c= cPOWER * part cnext_el f8 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f8 cSUC b0 f3 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c~ c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3
+ (!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))) |- (((((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) (SUC i)))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))) = (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))
T c==> ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 c= c==> c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 f4 c= cnext_el f4 f3 f5 cMEM f5 crtrans f0 f1 f2 f3 cSUC f6 c~ c= cindexf f5 cytrans f0 f1 f2 f3 cSUC f6 f4 cl'm f0 f7 f3 c~ c= cindexf f5 cytrans f0 f1 f2 f3 cSUC f6 f4 cl'm f0 f7 f3
+ (~ (((f_list L) x') = ((next_el r2) x'))), (uniq r2), (good_list L), (((next_el f) x) = w), (((next_el r2) x) = ((f_list L) x)), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- ((uniq r2) /\ (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cuniq f2 c==> cgood_list f0 c==> c= cnext_el f3 f4 f5 c==> c= cnext_el f2 f4 cf_list f0 f4 c==> c= cfind_face f0 f4 f3 c==> cmarked_list f0 f6 f7 f4 c/\ cuniq f2 c==> c= cPOWER * part cnext_el f2 cindexf f5 f1 f2 f5 f1 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f5 f1 f2 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f5 f1 f2 cf_list f0 f4 c~ c= cindexf f5 cl'y f0 f2 f4 f3 cl'm f0 f2 f4
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f5 f3 f6 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cMEM f3 f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c==> cMEM f6 f8 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f8 c==> c= cPOWER * part cnext_el f8 cindexf f6 f12 f8 f6 f12 c==> c= co * part cnext_el f8 * * part cPOWER * part cnext_el f8 cSUC cindexf f6 f12 f8 f3 cf_list f0 cPOWER * part cnext_el f8 cindexf f6 f12 f8 cf_list f0 f3 c~ c= cindexf f6 cl'y f0 f8 f3 f5 cl'm f0 f8 f3
- |- ((\x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t))))))) x)
T * / c= cGSPEC / * f0 * part cSETSPEC b1 b0 * f0 / / c/\ b1 c= b0 b2 f1
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= cSUC f12 cindexf f6 f10 f5 c==> c< f12 cindexf f6 f10 f5 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c<= f12 cindexf f6 f10 f5 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f11 cSUC f12 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f11 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f11 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f11 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f11 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c= cPOWER * part cnext_el f11 f12 cnext_el f11 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f11 f12 cf_list f0 f3
- |- (((!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) ==> ((\i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) i)) = ((\i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) i))
T c= c==> ! c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 * / c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 f4 * / c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 f4
+ |- (((((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x)))) ==> ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) (((((rtrans L) N) r) x) (SUC i))) x)) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((next_el r2) x))) = ((f_list L) (((POWER (next_el r2)) i') ((next_el r2) x))))) = ((((POWER (next_el r2)) i') ((next_el r2) ((next_el r2) x))) = ((f_list L) (((POWER (next_el r2)) i') ((next_el r2) x)))))
T c= c==> c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 f1 f2 f3 cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 crtrans f0 f1 f2 f3 cSUC f4 f3 c= cPOWER * part cnext_el f5 f6 cnext_el f5 cnext_el f5 f3 cf_list f0 cPOWER * part cnext_el f5 f6 cnext_el f5 f3 c= cPOWER * part cnext_el f5 f6 cnext_el f5 cnext_el f5 f3 cf_list f0 cPOWER * part cnext_el f5 f6 cnext_el f5 f3
- (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))))) |- (((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) = (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019)))) (real_of_num (NUMERAL _0)))))) |- (((((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019)))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r2) x) = ((f_list L) x)), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((((marked_list L) N) r) x) |- ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cnext_el f4 f2 cf_list f0 f2 c==> c= cindexf f3 cPOWER * part cnext_el f1 f5 f3 f4 f5 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f5 f3 f4 cSUC f5 c==> c= cfind_face f0 f2 f1 c==> c= crtrans f0 f6 f7 f2 cSUC f8 f4 c==> cMEM cPOWER * part cnext_el f1 f5 f3 f4 c==> cMEM cPOWER * part cnext_el f1 cSUC f5 f3 f4 c==> cmarked_list f0 f6 f7 f2 c/\ c= cnext_el f4 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f6 f7 f2 cSUC f8 ce_list f2 c==> cs_flag_list f0 cntrans f0 f6 f7 f2 cSUC f8 f4 f2 c==> cuniq cflatten cntrans f0 f6 f7 f2 f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f2 f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f2 f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 f8 c==> cuniq f9 c==> cuniq cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> cuniq f4 c= cPOWER * part cnext_el f4 f5 cnext_el f4 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f4 f5 cf_list f0 f2
- |- (T = ((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))))
T c= cT creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- (((?x. (P x)) /\ Q) = (?x. ((P x) /\ Q)))
T c= c/\ c? / * f0 b0 f1 c? / c/\ * f0 b0 f1
- ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) = T)
T c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c= cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 cT
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f8 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ |- ((\x. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x)))) ==> ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x))) x)
T * / c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 f1 f2 b0 cmarked_list f0 cntrans f0 f1 f2 b0 f3 crtrans f0 f1 f2 b0 f3 b0 f4
+ (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((uniq (flatten (((((ntrans L) N) r) x) i))) /\ (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) /\ (((all (f_last L)) (((((ntrans L) N) r) x) i)) /\ (((all (loop_list L)) (((((ntrans L) N) r) x) i)) /\ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((uniq (flatten (((((ntrans L) N) r) x) i))) /\ (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) /\ (((all (f_last L)) (((((ntrans L) N) r) x) i)) /\ (((all (loop_list L)) (((((ntrans L) N) r) x) i)) /\ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))))))) /\ (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ c= cf_list f2 f3 cnext_el f0 f3 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 f6 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 cSUC f6 c==> cis_restricted chypermap_of_list f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f7 f1 f8 c==> c= cnext_el f9 f1 cf_list f2 f1 c==> c= cprev_el f9 f10 f11 c==> c= cl'y f2 f9 f1 f12 c==> c= cztrans f2 f4 f5 f1 f6 f10 c==> c= cfind_face f2 f1 f7 c==> c= crtrans f2 f4 f5 f1 f6 f9 c==> c= crtrans f2 f4 f5 f1 cSUC f6 f0 c==> c/\ cuniq cflatten cntrans f2 f4 f5 f1 f6 c/\ call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 f6 c/\ call * part cf_last f2 cntrans f2 f4 f5 f1 f6 c/\ call * part cloop_list f2 cntrans f2 f4 f5 f1 f6 ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 f6 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 f6 c==> cMEM f1 f9 c==> cMEM f3 f0 c==> cMEM f9 cntrans f2 f4 f5 f1 f6 c==> cnormal_list f2 cntrans f2 f4 f5 f1 f6 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 f6 f9 f1 c==> cmarked_list f2 f4 f5 f1 c==> cmarked_list f2 cntrans f2 f4 f5 f1 f6 crtrans f2 f4 f5 f1 f6 f1 c/\ c/\ cuniq cflatten cntrans f2 f4 f5 f1 f6 c/\ call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 f6 c/\ call * part cf_last f2 cntrans f2 f4 f5 f1 f6 c/\ call * part cloop_list f2 cntrans f2 f4 f5 f1 f6 ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 f6 c~ c= cindexf f8 cytrans f2 f4 f5 f1 cSUC f6 f7 cl'm f2 f0 f1
+ (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((MEM r1) (((((ntrans L) N) r) x) i)) ==> (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cmarked_list f0 f4 f5 f2 c==> cMEM f6 cntrans f0 f4 f5 f2 f7 c==> cMEM f2 f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 f7 c==> c= cnext_el f6 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 f7 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 f7 f6 f2 c==> c= crtrans f0 f4 f5 f2 f7 f6 c==> c= crtrans f0 f4 f5 f2 cSUC f7 f8 c==> c= cl'y f0 f6 f2 f9 c==> c= cprev_el f6 f10 f11 c==> c= cztrans f0 f4 f5 f2 f7 f10 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c==> cuniq cflatten cntrans f0 f4 f5 f2 f7 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f7 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f7 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f7 c==> cuniq f6 c==> cMEM f3 f8 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f7 f8 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f7 c==> cMEM f8 cntrans f0 f4 f5 f2 cSUC f7 c==> cMEM f2 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f7 c==> c= cnext_el f8 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f7 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f7 f8 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f7 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f7 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f7 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f7 c==> cuniq f8 c==> c= cPOWER * part cnext_el f8 cindexf f3 f12 f8 f3 f12 c==> c= co * part cnext_el f8 * * part cPOWER * part cnext_el f8 cSUC cindexf f3 f12 f8 f2 cf_list f0 cPOWER * part cnext_el f8 cindexf f3 f12 f8 cf_list f0 f2 c~ c= cindexf f3 cl'y f0 f8 f2 f1 cl'm f0 f8 f2
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c< f12 cindexf f6 f10 f5 c==> c<= cSUC f12 cindexf f6 f10 f5 c==> c<= f12 cindexf f6 f10 f5 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ (good_list L), (good_list_nodes L) |- ((~ ((final_list L) r2)) ==> (((((marked_list L) N) r) x) ==> ((((find_face L) x) = f) ==> ((((next_el f) x) = w) ==> ((~ ((final_list L) r1)) ==> (((((marked_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) (((((ntrans L) N) r) x) i)) ==> (((MEM r1) (((((ntrans L) N) r) x) i)) ==> (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c~ cfinal_list f0 f1 c==> cmarked_list f0 f2 f3 f4 c==> c= cfind_face f0 f4 f5 c==> c= cnext_el f5 f4 f6 c==> c~ cfinal_list f0 f7 c==> cmarked_list f0 cntrans f0 f2 f3 f4 f8 f7 f4 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 cntrans f0 f2 f3 f4 f8 c==> cMEM f7 cntrans f0 f2 f3 f4 f8 c==> cMEM f4 f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f2 f3 f4 f8 c==> c= cnext_el f7 f4 cf_list f0 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f2 f3 f4 f8 ce_list f4 c==> cs_flag_list f0 cntrans f0 f2 f3 f4 f8 f7 f4 c==> c= crtrans f0 f2 f3 f4 f8 f7 c==> c= crtrans f0 f2 f3 f4 cSUC f8 f1 c==> c= cl'y f0 f7 f4 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f2 f3 f4 f8 f10 c==> cMEM f12 f1 c==> c~ c= cf_list f0 f12 cnext_el f1 f12 c==> cuniq cflatten cntrans f0 f2 f3 f4 f8 c==> call / c~ c= b0 cNIL cntrans f0 f2 f3 f4 f8 c==> call * part cf_last f0 cntrans f0 f2 f3 f4 f8 c==> call * part cloop_list f0 cntrans f0 f2 f3 f4 f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f2 f3 f4 f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f2 f3 f4 f8 c==> cuniq f7 c==> cMEM f6 f1 c==> cmarked_list f0 cntrans f0 f2 f3 f4 cSUC f8 f1 f4 c==> cnormal_list f0 cntrans f0 f2 f3 f4 cSUC f8 c==> cMEM f1 cntrans f0 f2 f3 f4 cSUC f8 c==> cMEM f4 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f2 f3 f4 cSUC f8 c==> c= cnext_el f1 f4 cf_list f0 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f2 f3 f4 cSUC f8 ce_list f4 c==> cs_flag_list f0 cntrans f0 f2 f3 f4 cSUC f8 f1 f4 c==> cuniq cflatten cntrans f0 f2 f3 f4 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f2 f3 f4 cSUC f8 c==> call * part cf_last f0 cntrans f0 f2 f3 f4 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f2 f3 f4 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f2 f3 f4 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f2 f3 f4 cSUC f8 c==> cuniq f1 c==> c= cPOWER * part cnext_el f1 cindexf f6 f12 f1 f6 f12 c==> c= co * part cnext_el f1 * * part cPOWER * part cnext_el f1 cSUC cindexf f6 f12 f1 f4 cf_list f0 cPOWER * part cnext_el f1 cindexf f6 f12 f1 cf_list f0 f4 c~ c= cindexf f6 cl'y f0 f1 f4 f5 cl'm f0 f1 f4
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ (good_list L), (((next_el f) x) = w), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((((((ztrans L) N) r) x) i) = z) /\ (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> c= cnext_el f1 f2 f3 c==> c= cztrans f0 f4 f5 f2 f6 f7 c==> c= cfind_face f0 f2 f1 c==> cmarked_list f0 f4 f5 f2 c/\ c= cztrans f0 f4 f5 f2 f6 f7 c==> cMEM f8 f9 c==> c~ c= cf_list f0 f8 cnext_el f9 f8 c==> cuniq cflatten cntrans f0 f4 f5 f2 f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f6 c==> cuniq f10 c==> cMEM f3 f9 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f6 f9 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f9 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f2 f9 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> c= cnext_el f9 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f6 f9 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> cuniq f9 c==> c= cPOWER * part cnext_el f9 cindexf f3 f8 f9 f3 f8 c==> c= co * part cnext_el f9 * * part cPOWER * part cnext_el f9 cSUC cindexf f3 f8 f9 f2 cf_list f0 cPOWER * part cnext_el f9 cindexf f3 f8 f9 cf_list f0 f2 c~ c= cindexf f3 cl'y f0 f9 f2 f1 cl'm f0 f9 f2
+ |- (((!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))) ==> ((((POWER (next_el r2)) i') ((next_el r2) w)) = ((f_list L) (((POWER (next_el r2)) i') w)))) = ((((POWER (next_el r2)) i') ((next_el r2) w)) = ((f_list L) (((POWER (next_el r2)) i') w))))
T c= c==> ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 c= cPOWER * part cnext_el f0 f1 cnext_el f0 f2 cf_list f3 cPOWER * part cnext_el f0 f1 f2 c= cPOWER * part cnext_el f0 f1 cnext_el f0 f2 cf_list f3 cPOWER * part cnext_el f0 f1 f2
- |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
- (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1) |- ((((prev_el r1) (((((ztrans L) N) r) x) i)) = z1) /\ (?z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)))
T c==> c= cprev_el f0 cztrans f1 f2 f3 f4 f5 f6 c/\ c= cprev_el f0 cztrans f1 f2 f3 f4 f5 f6 c? / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0
+ |- (((!f. (!g. ((f o g) = (\x. (f (g x)))))) ==> ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f)) = ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f))
T c= c==> ! ! c= * * part co b0 b1 / * b0 * b1 b2 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0
+ (uniq r2), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((((marked_list L) N) r) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))
T c==> cuniq f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> ctransform_assumption_v2 f1 c==> c= cnext_el f2 f3 f4 c==> c= cindexf f4 cPOWER * part cnext_el f2 f5 f4 f0 f5 c==> c= cindexf f4 cPOWER * part cnext_el f2 cSUC f5 f4 f0 cSUC f5 c==> c= cfind_face f1 f3 f2 c==> c= crtrans f1 f6 f7 f3 cSUC f8 f0 c==> cMEM cPOWER * part cnext_el f2 f5 f4 f0 c==> cMEM cPOWER * part cnext_el f2 cSUC f5 f4 f0 c==> cmarked_list f1 f6 f7 f3 c= cPOWER * part cnext_el f0 f5 cnext_el f0 cf_list f1 f3 cf_list f1 cPOWER * part cnext_el f0 f5 cf_list f1 f3
+ (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cmarked_list f0 f4 f5 f2 c==> c= crtrans f0 f4 f5 f2 cSUC f6 f7 c==> c= cl'y f0 f8 f2 f9 c==> c= cprev_el f8 f10 f11 c==> c= cztrans f0 f4 f5 f2 f6 f10 c==> cMEM f12 f7 c==> c~ c= cf_list f0 f12 cnext_el f7 f12 c==> cuniq cflatten cntrans f0 f4 f5 f2 f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f6 c==> cuniq f8 c==> cMEM f3 f7 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f6 f7 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f7 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f2 f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> c= cnext_el f7 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f6 f7 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> cuniq f7 c==> c= cPOWER * part cnext_el f7 cindexf f3 f12 f7 f3 f12 c==> c= co * part cnext_el f7 * * part cPOWER * part cnext_el f7 cSUC cindexf f3 f12 f7 f2 cf_list f0 cPOWER * part cnext_el f7 cindexf f3 f12 f7 cf_list f0 f2 c~ c= cindexf f3 cl'y f0 f7 f2 f1 cl'm f0 f7 f2
- |- (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((all (loop_list L)) (((((ntrans L) N) r) x) i)) /\ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i))))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ c= cf_list f2 f3 cnext_el f0 f3 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 f6 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 cSUC f6 c==> cis_restricted chypermap_of_list f2 c==> cuniq cflatten cntrans f2 f4 f5 f1 f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f7 f1 f8 c==> c= cnext_el f9 f1 cf_list f2 f1 c==> c= cprev_el f9 f10 f11 c==> c= cl'y f2 f9 f1 f12 c==> c= cztrans f2 f4 f5 f1 f6 f10 c==> c= cfind_face f2 f1 f7 c==> c= crtrans f2 f4 f5 f1 f6 f9 c==> c= crtrans f2 f4 f5 f1 cSUC f6 f0 c==> c/\ call * part cloop_list f2 cntrans f2 f4 f5 f1 f6 ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 f6 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 f6 c==> cMEM f1 f9 c==> cMEM f3 f0 c==> cMEM f9 cntrans f2 f4 f5 f1 f6 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 f6 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 f6 c==> cnormal_list f2 cntrans f2 f4 f5 f1 f6 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 f6 f9 f1 c==> cmarked_list f2 f4 f5 f1 c==> cmarked_list f2 cntrans f2 f4 f5 f1 f6 crtrans f2 f4 f5 f1 f6 f1 c~ c= cindexf f8 cytrans f2 f4 f5 f1 cSUC f6 f7 cl'm f2 f0 f1
+ (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((\x. (((MEM x) r2) /\ (~ (((f_list L) x) = ((next_el r2) x))))) x') |- (((\x. (((MEM x) r2) /\ (~ (((f_list L) x) = ((next_el r2) x))))) x') /\ (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 f5 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 cSUC f5 c==> cis_restricted chypermap_of_list f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f6 f1 f7 c==> c= cnext_el crtrans f2 f3 f4 f1 f5 f1 cf_list f2 f1 c==> c= cprev_el f8 cztrans f2 f3 f4 f1 f5 f9 c==> c= cl'y f2 f8 f1 f10 c==> c= cztrans f2 f3 f4 f1 f5 f11 c==> c= cfind_face f2 f1 f6 c==> c= crtrans f2 f3 f4 f1 f5 f8 c==> c= crtrans f2 f3 f4 f1 cSUC f5 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f3 f4 f1 f5 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f3 f4 f1 f5 c==> cMEM f1 crtrans f2 f3 f4 f1 f5 c==> cMEM crtrans f2 f3 f4 f1 f5 cntrans f2 f3 f4 f1 f5 c==> cnormal_list f2 cntrans f2 f3 f4 f1 f5 c==> cs_flag_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 c==> cmarked_list f2 f3 f4 f1 c==> cmarked_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 c==> * / c/\ cMEM b0 f0 c~ c= cf_list f2 b0 cnext_el f0 b0 f12 c/\ * / c/\ cMEM b0 f0 c~ c= cf_list f2 b0 cnext_el f0 b0 f12 c~ c= cindexf f7 cytrans f2 f3 f4 f1 cSUC f5 f6 cl'm f2 f0 f1
+ |- (((((uniq (list_of_darts L)) /\ ((MEM (((POWER (next_el f)) i') w)) ((find_face L) x))) ==> (((find_face L) (((POWER (next_el f)) i') w)) = ((find_face L) x))) ==> (((next_el f) (((POWER (next_el f)) i') w)) = ((f_list L) (((POWER (next_el f)) i') w)))) = (((next_el f) (((POWER (next_el f)) i') w)) = ((f_list L) (((POWER (next_el f)) i') w))))
T c= c==> c==> c/\ cuniq clist_of_darts f0 cMEM cPOWER * part cnext_el f1 f2 f3 cfind_face f0 f4 c= cfind_face f0 cPOWER * part cnext_el f1 f2 f3 cfind_face f0 f4 c= cnext_el f1 cPOWER * part cnext_el f1 f2 f3 cf_list f0 cPOWER * part cnext_el f1 f2 f3 c= cnext_el f1 cPOWER * part cnext_el f1 f2 f3 cf_list f0 cPOWER * part cnext_el f1 f2 f3
+ |- (((!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))) ==> ((\N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))) N)) = ((\N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))) N))
T c= c==> ! ! ! c==> cmarked_list f0 b0 b1 b2 cMEM b2 clist_of_darts f0 * / ! ! c==> cmarked_list f0 b0 b1 b2 cMEM b2 clist_of_darts f0 f1 * / ! ! c==> cmarked_list f0 b0 b1 b2 cMEM b2 clist_of_darts f0 f1
- |- (((!x'. (((\y. ((((l'y L) r1) x) = y)) x') ==> (?y. ((((l'y L) r1) x) = y)))) ==> ((?y. ((((l'y L) r1) x) = y)) ==> (?y. ((((l'y L) r1) x) = y)))) = ((?y. ((((l'y L) r1) x) = y)) ==> (?y. ((((l'y L) r1) x) = y))))
T c= c==> ! c==> * / c= cl'y f0 f1 f2 b1 b0 c? / c= cl'y f0 f1 f2 b1 c==> c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0 c==> c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0
+ |- ((!n. ((((min_num (GSPEC (\GEN%PVAR%8675. (?m. (((SETSPEC GEN%PVAR%8675) (P m)) m))))) = n) /\ ((!i. ((i < m) ==> (~ (P i)))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (P m)) m)))) = EMPTY)))) ==> (m <= n))) = T)
T c= ! c==> c/\ c= cmin_num * part cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 b0 c/\ ! c==> c< b1 f1 c~ * f0 b1 c~ c= * part cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 part cEMPTY c<= f1 b0 cT
- ((all (f_last L)) (((((ntrans L) N) r) x) i)) |- (((all (f_last L)) (((((ntrans L) N) r) x) i)) = T)
T c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c= call * part cf_last f0 cntrans f0 f1 f2 f3 f4 cT
- (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) |- ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c= cPOWER * part cnext_el f0 cSUC cSUC f3 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC f3 f1
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x) |- (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) /\ (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cindexf f3 cPOWER * part cnext_el f1 f4 f3 f5 f4 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f4 f3 f5 cSUC f4 c==> c= cfind_face f0 f2 f1 c==> c= crtrans f0 f6 f7 f2 cSUC f8 f5 c==> cMEM cPOWER * part cnext_el f1 f4 f3 f5 c==> cMEM cPOWER * part cnext_el f1 cSUC f4 f3 f5 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f2 f8 c==> cmarked_list f0 f6 f7 f2 c/\ call / c~ c= b0 cNIL cntrans f0 f6 f7 f2 f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f2 f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 f8 c==> cuniq f9 c==> cuniq cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> cuniq f5 c= cPOWER * part cnext_el f5 f4 cnext_el f5 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f5 f4 cf_list f0 f2
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= cSUC f12 cindexf f6 f8 f5 c==> c< f12 cindexf f6 f8 f5 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c<= f12 cindexf f6 f8 f5 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f11 cSUC f12 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f11 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f11 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f11 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f11 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c= cPOWER * part cnext_el f11 f12 cnext_el f11 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f11 f12 cf_list f0 f3
+ |- ((((((min_num (GSPEC (\GEN%PVAR%8675. (?m. (((SETSPEC GEN%PVAR%8675) ((\m. (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)) m))))) = (((l'm L) r2) x)) /\ ((!i. ((i < (((indexf w) z) f)) ==> (~ ((\m. (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) i)))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) ((\m. (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)) m)))) = EMPTY)))) ==> ((((indexf w) z) f) <= (((l'm L) r2) x))) ==> ((((indexf w) z) f) <= (((l'm L) r2) x))) = ((((indexf w) z) f) <= (((l'm L) r2) x)))
T c= c==> c==> c/\ c= cmin_num * part cGSPEC / c? / cSETSPEC b0 * / c~ c= cITER cSUC cSUC b2 * part cnext_el f0 f1 cf_list f2 cITER cSUC b2 * part cnext_el f0 f1 b1 b1 cl'm f2 f0 f1 c/\ ! c==> c< b0 cindexf f3 f4 f5 c~ * / c~ c= cITER cSUC cSUC b1 * part cnext_el f0 f1 cf_list f2 cITER cSUC b1 * part cnext_el f0 f1 b0 c~ c= * part cGSPEC / c? / cSETSPEC b0 * / c~ c= cITER cSUC cSUC b2 * part cnext_el f0 f1 cf_list f2 cITER cSUC b2 * part cnext_el f0 f1 b1 b1 part cEMPTY c<= cindexf f3 f4 f5 cl'm f2 f0 f1 c<= cindexf f3 f4 f5 cl'm f2 f0 f1 c<= cindexf f3 f4 f5 cl'm f2 f0 f1
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((SUC i') <= (((indexf w) z) f)) /\ (i' <= (((indexf w) z) f))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' < (((indexf w) z) f)), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((SUC i') <= (((indexf w) z) f)) /\ (i' <= (((indexf w) z) f))) /\ ((((POWER (next_el r2)) (SUC (SUC i'))) x) = ((f_list L) (((POWER (next_el r2)) (SUC i')) x))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> c/\ c<= cSUC f12 cindexf f6 f10 f5 c<= f12 cindexf f6 f10 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c< f12 cindexf f6 f10 f5 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ c/\ c<= cSUC f12 cindexf f6 f10 f5 c<= f12 cindexf f6 f10 f5 c= cPOWER * part cnext_el f11 cSUC cSUC f12 f3 cf_list f0 cPOWER * part cnext_el f11 cSUC f12 f3
+ (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((((marked_list L) N) r) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) /\ (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 f6 ce_list f2 c==> cmarked_list f0 f4 f5 f2 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 f6 f7 f2 c==> c= crtrans f0 f4 f5 f2 f6 f7 c==> c= crtrans f0 f4 f5 f2 cSUC f6 f8 c==> c= cl'y f0 f7 f2 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f4 f5 f2 f6 f10 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c==> cuniq cflatten cntrans f0 f4 f5 f2 f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f6 c==> cuniq f7 c==> cMEM f3 f8 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f8 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f2 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> c= cnext_el f8 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> cuniq f8 c==> c= cPOWER * part cnext_el f8 cindexf f3 f12 f8 f3 f12 c==> c= co * part cnext_el f8 * * part cPOWER * part cnext_el f8 cSUC cindexf f3 f12 f8 f2 cf_list f0 cPOWER * part cnext_el f8 cindexf f3 f12 f8 cf_list f0 f2 c~ c= cindexf f3 cl'y f0 f8 f2 f1 cl'm f0 f8 f2
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) /\ (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c/\ call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((prev_el r1) z) = z1) /\ (((((((ztrans L) N) r) x) i) = z) ==> ((!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ c= cprev_el f7 f8 f9 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> ! c= cPOWER * part cnext_el f11 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f11 cSUC b0 f3 c==> cMEM f12 f11 c==> c~ c= cf_list f0 f12 cnext_el f11 f12 c~ c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3
+ (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((MEM x') r2) /\ (~ (((f_list L) x') = ((next_el r2) x')))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 f5 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 cSUC f5 c==> cis_restricted chypermap_of_list f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f6 f1 f7 c==> c= cnext_el crtrans f2 f3 f4 f1 f5 f1 cf_list f2 f1 c==> c= cprev_el f8 cztrans f2 f3 f4 f1 f5 f9 c==> c= cl'y f2 f8 f1 f10 c==> c= cztrans f2 f3 f4 f1 f5 f11 c==> c= cfind_face f2 f1 f6 c==> c= crtrans f2 f3 f4 f1 f5 f8 c==> c= crtrans f2 f3 f4 f1 cSUC f5 f0 c==> c/\ cMEM f12 f0 c~ c= cf_list f2 f12 cnext_el f0 f12 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f3 f4 f1 f5 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f3 f4 f1 f5 c==> cMEM f1 crtrans f2 f3 f4 f1 f5 c==> cMEM crtrans f2 f3 f4 f1 f5 cntrans f2 f3 f4 f1 f5 c==> cnormal_list f2 cntrans f2 f3 f4 f1 f5 c==> cs_flag_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 c==> cmarked_list f2 f3 f4 f1 c==> cmarked_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 c~ c= cindexf f7 cytrans f2 f3 f4 f1 cSUC f5 f6 cl'm f2 f0 f1
+ |- ((\i. (!f. (!w. (((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x)))))))) ==> ((((indexf w) (((((ytrans L) N) r) x) i)) f) = (((l'm L) (((((rtrans L) N) r) x) i)) x)))))) (SUC i))
T * / ! ! c==> c/\ c~ cfinal_list f0 crtrans f0 f1 f2 f3 b0 c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= b1 cfind_face f0 f3 c= b2 cnext_el b1 f3 c= cindexf b2 cytrans f0 f1 f2 f3 b0 b1 cl'm f0 crtrans f0 f1 f2 f3 b0 f3 cSUC f4
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq r2), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((POWER (next_el r2)) (SUC (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (SUC (((indexf w) x') r2))) x))), ((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x'), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> c~ c= cf_list f0 f5 cnext_el f6 f5 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq f6 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f6 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cPOWER * part cnext_el f6 cSUC cSUC cindexf f9 f5 f6 f3 cf_list f0 cPOWER * part cnext_el f6 cSUC cindexf f9 f5 f6 f3 c==> c= cPOWER * part cnext_el f6 cindexf f9 f5 f6 f9 f5 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f6 c==> cMEM f3 f7 c==> cMEM f3 f6 c==> cMEM f5 f6 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f6 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f6 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f6 f3 c~ c= cindexf f9 cl'y f0 f6 f3 f8 cl'm f0 f6 f3
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ |- (((((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x)))) ==> ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)) ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f))) = ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))
T c= c==> c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 f1 f2 f3 cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c<= cindexf f5 cztrans f0 f1 f2 f3 f4 f6 cindexf f5 cytrans f0 f1 f2 f3 cSUC f4 f6 c<= cindexf f5 cztrans f0 f1 f2 f3 f4 f6 cindexf f5 cytrans f0 f1 f2 f3 cSUC f4 f6
+ |- (((((uniq (list_of_darts L)) /\ ((MEM x) (list_of_darts L))) ==> ((((POWER (f_list L)) (SUC (NUMERAL _0))) x) = (((POWER (next_el ((find_face L) x))) (SUC (NUMERAL _0))) x))) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))) = ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))
T c= c==> c==> c/\ cuniq clist_of_darts f0 cMEM f1 clist_of_darts f0 c= cPOWER * part cf_list f0 cSUC cNUMERAL c_0 f1 cPOWER * part cnext_el cfind_face f0 f1 cSUC cNUMERAL c_0 f1 c= cPOWER * part cnext_el f2 f3 cnext_el f2 cf_list f0 f1 cf_list f0 cPOWER * part cnext_el f2 f3 cf_list f0 f1 c= cPOWER * part cnext_el f2 f3 cnext_el f2 cf_list f0 f1 cf_list f0 cPOWER * part cnext_el f2 f3 cf_list f0 f1
- (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)) |- ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x))
T c==> c= cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cztrans f0 f1 f2 f3 f4 c= cztrans f0 f1 f2 f3 f4 cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3
- |- (((!A. ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F)) ==> ((\A. ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F)) A)) = ((\A. ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F)) A))
T c= c==> ! c==> c~ c= ! c~ * b0 b1 c~ c? / * b0 b1 cF * / c==> c~ c= ! c~ * b0 b1 c~ c? / * b0 b1 cF f0 * / c==> c~ c= ! c~ * b0 b1 c~ c? / * b0 b1 cF f0
+ |- (((MEM d) ((find_face L) d)) = ((MEM d) (list_of_darts L)))
T c= cMEM f0 cfind_face f1 f0 cMEM f0 clist_of_darts f1
+ |- (((!f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) ==> ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f)) = ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f))
T c= c==> ! ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0 * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- |- (((!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ==> ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1)) = ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1))
T c= c==> ! ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3 * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM x) r2) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) /\ ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x))))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((next_el r2) x))) = ((f_list L) (((POWER (next_el r2)) i') ((next_el r2) x))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> c/\ cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c/\ cMEM f3 f12 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ c= cnext_el f12 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f10 f5 c==> c<= cSUC f11 cindexf f6 f10 f5 c==> c< f11 cindexf f6 f10 f5 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cnext_el f12 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cnext_el f12 f3
- |- ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f6 f3 f7 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f5 f9 f10 c==> c= cl'y f0 f5 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f7 cPOWER * part cnext_el f6 f12 f7 f8 f12 c==> c= cindexf f7 cPOWER * part cnext_el f6 cSUC f12 f7 f8 cSUC f12 c==> c= cindexf f7 cytrans f0 f1 f2 f3 cSUC f4 f6 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f6 c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f7 f9 f6 c==> c<= cSUC f12 cindexf f7 f9 f6 c==> c< f12 cindexf f7 f9 f6 c==> cMEM f3 f5 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f6 f12 f7 f8 c==> cMEM cPOWER * part cnext_el f6 cSUC f12 f7 f8 c==> cMEM f5 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f5 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f8 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ |- ((\r. (!x. ((min_num (GSPEC (\GEN%PVAR%8605. (?m. (((SETSPEC GEN%PVAR%8605) (~ ((((ITER (SUC (SUC m))) (next_el r)) x) = ((f_list L) (((ITER (SUC m)) (next_el r)) x))))) m))))) = (((l'm L) r) x)))) r)
T * / ! c= cmin_num * part cGSPEC / c? / cSETSPEC b2 c~ c= cITER cSUC cSUC b3 * part cnext_el b0 b1 cf_list f0 cITER cSUC b3 * part cnext_el b0 b1 b3 cl'm f0 b0 b1 f1
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((next_el r2) x))) = ((f_list L) (((POWER (next_el r2)) i') ((next_el r2) x))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f10 f5 c==> c<= cSUC f11 cindexf f6 f10 f5 c==> c< f11 cindexf f6 f10 f5 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cnext_el f12 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cnext_el f12 f3
- |- ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)
T * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), ((((((rtrans L) N) r) x) i) = r1) |- (((~ ((final_list L) r1)) ==> (((final_list L) r1) = F)) = (((final_list L) r1) = F))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c= crtrans f0 f1 f2 f3 f4 f5 c= c==> c~ cfinal_list f0 f5 c= cfinal_list f0 f5 cF c= cfinal_list f0 f5 cF
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cfind_face f0 f3 f5 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c< f12 cindexf f6 f10 f5 c==> c<= cSUC f12 cindexf f6 f10 f5 c==> c<= f12 cindexf f6 f10 f5 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ (~ (((f_list L) x') = ((next_el r2) x'))), (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((((marked_list L) N) r) x) |- (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cgood_list f0 c==> c= cnext_el f3 f4 f5 c==> c= cfind_face f0 f4 f3 c==> cMEM f2 cntrans f0 f6 f7 f4 cSUC f8 c==> cmarked_list f0 f6 f7 f4 c/\ cMEM f2 cntrans f0 f6 f7 f4 cSUC f8 c==> cMEM f4 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> c= cnext_el f2 f4 cf_list f0 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f6 f7 f4 cSUC f8 ce_list f4 c==> cs_flag_list f0 cntrans f0 f6 f7 f4 cSUC f8 f2 f4 c==> cuniq cflatten cntrans f0 f6 f7 f4 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f4 cSUC f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f4 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f4 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f4 cSUC f8 c==> cuniq f2 c==> c= cPOWER * part cnext_el f2 cindexf f5 f1 f2 f5 f1 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f5 f1 f2 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f5 f1 f2 cf_list f0 f4 c~ c= cindexf f5 cl'y f0 f2 f4 f3 cl'm f0 f2 f4
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((SUC i') <= (((indexf w) z) f)), ((((marked_list L) N) r) x) |- (((SUC i') <= (((indexf w) z) f)) /\ ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> c= crtrans f0 f4 f5 f2 cSUC f6 f7 c==> c<= cSUC f8 cindexf f3 f9 f1 c==> cmarked_list f0 f4 f5 f2 c/\ c<= cSUC f8 cindexf f3 f9 f1 c==> c<= f8 cindexf f3 f9 f1 c==> cMEM cPOWER * part cnext_el f1 cSUC f8 f3 f7 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f8 f3 f7 cSUC f8 c==> cMEM cPOWER * part cnext_el f1 f8 f3 f7 c==> c= cindexf f3 cPOWER * part cnext_el f1 f8 f3 f7 f8 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f6 f7 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f7 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f2 f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> c= cnext_el f7 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f6 f7 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f6 c==> cuniq f10 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> cuniq f7 c= cPOWER * part cnext_el f7 f8 cnext_el f7 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f7 f8 cf_list f0 f2
- ((MEM x) (((((rtrans L) N) r) x) i)) |- (((MEM x) (((((rtrans L) N) r) x) i)) = T)
T c==> cMEM f0 crtrans f1 f2 f3 f0 f4 c= cMEM f0 crtrans f1 f2 f3 f0 f4 cT
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c< f12 cindexf f6 f10 f5 c==> c<= cSUC f12 cindexf f6 f10 f5 c==> c<= f12 cindexf f6 f10 f5 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
- (!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))) |- (((!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))) ==> ((\w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))) w)) = ((\w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))) w))
T c==> ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 c= c==> ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 f4 c= cnext_el f4 f3 b0 cMEM b0 crtrans f0 f1 f2 f3 f5 * / c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 f4 c= cnext_el f4 f3 b0 cMEM b0 crtrans f0 f1 f2 f3 f5 f6 * / c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 f4 c= cnext_el f4 f3 b0 cMEM b0 crtrans f0 f1 f2 f3 f5 f6
+ |- ((!i. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ ((~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w))))))) ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))) = T)
T c= ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC b0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 f4 c= cnext_el f4 f3 f5 c<= cindexf f5 cztrans f0 f1 f2 f3 b0 f4 cindexf f5 cytrans f0 f1 f2 f3 cSUC b0 f4 cT
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r2) x) = ((f_list L) x)), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r2), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f8 cztrans f0 f1 f2 f3 f4 f9 c==> c= cl'y f0 f8 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f7 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f7 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f7 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f8 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f7 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f11 f5 c==> c<= cSUC f12 cindexf f6 f11 f5 c==> c< f12 cindexf f6 f11 f5 c==> cMEM f3 f7 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f7 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f7 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f7 f3 c= cPOWER * part cnext_el f7 f12 cnext_el f7 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f7 f12 cf_list f0 f3
+ |- ((\k. ((((MEM x) ((find_face L) x)) /\ (uniq ((find_face L) x))) ==> ((MEM (((POWER (next_el ((find_face L) x))) k) x)) ((find_face L) x)))) (SUC i'))
T * / c==> c/\ cMEM f0 cfind_face f1 f0 cuniq cfind_face f1 f0 cMEM cPOWER * part cnext_el cfind_face f1 f0 b0 f0 cfind_face f1 f0 cSUC f2
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) /\ (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 f6 f7 f2 c==> cmarked_list f0 f4 f5 f2 c/\ cs_flag_list f0 cntrans f0 f4 f5 f2 f6 f7 f2 c==> c= crtrans f0 f4 f5 f2 f6 f7 c==> c= crtrans f0 f4 f5 f2 cSUC f6 f8 c==> c= cl'y f0 f7 f2 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f4 f5 f2 f6 f10 c==> c= cindexf f3 cytrans f0 f4 f5 f2 cSUC f6 f1 cl'm f0 f8 f2 c==> c< f12 cindexf f3 f10 f1 c==> c<= cSUC f12 cindexf f3 f10 f1 c==> c<= f12 cindexf f3 f10 f1 c==> cMEM cPOWER * part cnext_el f1 cSUC f12 f3 f8 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f12 f3 f8 cSUC f12 c==> cMEM cPOWER * part cnext_el f1 f12 f3 f8 c==> c= cindexf f3 cPOWER * part cnext_el f1 f12 f3 f8 f12 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f8 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f2 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> c= cnext_el f8 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f6 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> cuniq f8 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f2
+ |- ((!a. (!b. ((~ ((int_lt (int_of_num a)) (int_of_num b))) \/ (((int_le ((int_add (int_of_num a)) (int_of_num (NUMERAL (BIT1 _0))))) (int_of_num b)) /\ ((int_le (int_of_num a)) (int_of_num b)))))) = (!a. (!b. ((a < b) ==> (((SUC a) <= b) /\ (a <= b))))))
T c= ! ! c\/ c~ cint_lt cint_of_num b0 cint_of_num b1 c/\ cint_le cint_add cint_of_num b0 cint_of_num cNUMERAL cBIT1 c_0 cint_of_num b1 cint_le cint_of_num b0 cint_of_num b1 ! ! c==> c< b0 b1 c/\ c<= cSUC b0 b1 c<= b0 b1
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq r2), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> c~ c= cf_list f0 f5 cnext_el f6 f5 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq f6 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f6 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f6 c==> cMEM f3 f7 c==> cMEM f3 f6 c==> cMEM f5 f6 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f6 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f6 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f6 f3 c==> c= cPOWER * part cnext_el f6 cindexf f9 f5 f6 f9 f5 c==> c= co * part cnext_el f6 * * part cPOWER * part cnext_el f6 cSUC cindexf f9 f5 f6 f3 cf_list f0 cPOWER * part cnext_el f6 cindexf f9 f5 f6 cf_list f0 f3 c~ c= cindexf f9 cl'y f0 f6 f3 f8 cl'm f0 f6 f3
+ |- (((!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) ==> ((\r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) r)) = ((\r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) r))
T c= c==> ! ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 * / ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 f2 * / ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 f2
+ (uniq r1), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((((marked_list L) N) r) x) |- ((uniq r1) /\ ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))
T c==> cuniq f0 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> ctransform_assumption_v2 f1 c==> c= cnext_el f2 f3 f4 c==> c= cindexf f4 cPOWER * part cnext_el f2 f5 f4 f6 f5 c==> c= cindexf f4 cPOWER * part cnext_el f2 cSUC f5 f4 f6 cSUC f5 c==> c= cfind_face f1 f3 f2 c==> c= crtrans f1 f7 f8 f3 cSUC f9 f6 c==> cMEM cPOWER * part cnext_el f2 f5 f4 f6 c==> cMEM cPOWER * part cnext_el f2 cSUC f5 f4 f6 c==> cmarked_list f1 f7 f8 f3 c/\ cuniq f0 c==> cuniq cflatten cntrans f1 f7 f8 f3 cSUC f9 c==> call / c~ c= b0 cNIL cntrans f1 f7 f8 f3 cSUC f9 c==> call * part cf_last f1 cntrans f1 f7 f8 f3 cSUC f9 c==> call * part cloop_list f1 cntrans f1 f7 f8 f3 cSUC f9 c==> ! c==> cMEM b0 cflatten cntrans f1 f7 f8 f3 cSUC f9 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten cntrans f1 f7 f8 f3 cSUC f9 c==> cuniq f6 c= cPOWER * part cnext_el f6 f5 cnext_el f6 cf_list f1 f3 cf_list f1 cPOWER * part cnext_el f6 f5 cf_list f1 f3
- ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = T)
T c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cT
+ |- (((NUMERAL (BIT1 _0)) = (NUMERAL _0)) = F)
T c= c= cNUMERAL cBIT1 c_0 cNUMERAL c_0 cF
- |- (((LET f) x) = (f x))
T c= cLET f0 f1 * f0 f1
- |- (((~ p) ==> p) = p)
T c= c==> c~ f0 f0 f0
- (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ c= cf_list f2 f3 cnext_el f0 f3 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 f6 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 cSUC f6 c==> cis_restricted chypermap_of_list f2 c==> cuniq cflatten cntrans f2 f4 f5 f1 f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f7 f1 f8 c==> c= cnext_el f9 f1 cf_list f2 f1 c==> c= cprev_el f9 f10 f11 c==> c= cl'y f2 f9 f1 f12 c==> c= cztrans f2 f4 f5 f1 f6 f10 c==> c= cfind_face f2 f1 f7 c==> c= crtrans f2 f4 f5 f1 f6 f9 c==> c= crtrans f2 f4 f5 f1 cSUC f6 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 f6 c==> cMEM f1 f9 c==> cMEM f3 f0 c==> cMEM f9 cntrans f2 f4 f5 f1 f6 c==> cnormal_list f2 cntrans f2 f4 f5 f1 f6 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 f6 f9 f1 c==> cmarked_list f2 f4 f5 f1 c==> cmarked_list f2 cntrans f2 f4 f5 f1 f6 crtrans f2 f4 f5 f1 f6 f1 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 f6 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 f6 c==> call * part cloop_list f2 cntrans f2 f4 f5 f1 f6 c==> ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 f6 c==> cuniq f9 c==> cMEM f8 f0 c==> cmarked_list f2 cntrans f2 f4 f5 f1 cSUC f6 f0 f1 c==> cnormal_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> cMEM f0 cntrans f2 f4 f5 f1 cSUC f6 c==> cMEM f1 f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> c= cnext_el f0 f1 cf_list f2 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 cSUC f6 ce_list f1 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 cSUC f6 f0 f1 c==> cuniq cflatten cntrans f2 f4 f5 f1 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 cSUC f6 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 cSUC f6 c==> call * part cloop_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 cSUC f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 cSUC f6 c==> cuniq f0 c==> c= cPOWER * part cnext_el f0 cindexf f8 f3 f0 f8 f3 c~ c= cindexf f8 cl'y f2 f0 f1 f7 cl'm f2 f0 f1
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cMEM f9 f5 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ |- ((\d. (!L. (((MEM d) ((find_face L) d)) = ((MEM d) (list_of_darts L))))) d)
T * / ! c= cMEM b0 cfind_face b1 b0 cMEM b0 clist_of_darts b1 f0
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((MEM r1) (((((ntrans L) N) r) x) i)) /\ (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cfind_face f0 f3 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c< f12 cindexf f6 f10 f5 c==> c<= cSUC f12 cindexf f6 f10 f5 c==> c<= f12 cindexf f6 f10 f5 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq r2), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((POWER (next_el r2)) (SUC (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (SUC (((indexf w) x') r2))) x))), ((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x'), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((((POWER (next_el r2)) (SUC (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (SUC (((indexf w) x') r2))) x))) /\ (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> c~ c= cf_list f0 f5 cnext_el f6 f5 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq f6 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f6 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cPOWER * part cnext_el f6 cSUC cSUC cindexf f9 f5 f6 f3 cf_list f0 cPOWER * part cnext_el f6 cSUC cindexf f9 f5 f6 f3 c==> c= cPOWER * part cnext_el f6 cindexf f9 f5 f6 f9 f5 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f6 c==> cMEM f3 f7 c==> cMEM f3 f6 c==> cMEM f5 f6 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f6 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f6 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f6 f3 c/\ c= cPOWER * part cnext_el f6 cSUC cSUC cindexf f9 f5 f6 f3 cf_list f0 cPOWER * part cnext_el f6 cSUC cindexf f9 f5 f6 f3 c~ c= cindexf f9 cl'y f0 f6 f3 f8 cl'm f0 f6 f3
- ((((((rtrans L) N) r) x) i) = r1), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) = T)
T c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f5 f3 cT
+ |- (((!i. ((i < (((indexf w) z) f)) ==> ((((POWER (next_el r2)) (SUC (SUC i))) x) = ((f_list L) (((POWER (next_el r2)) (SUC i)) x))))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((POWER (next_el r2)) (SUC (SUC m))) x) = ((f_list L) (((POWER (next_el r2)) (SUC m)) x))))) m)))) = EMPTY))) = ((!i. ((i < (((indexf w) z) f)) ==> ((((ITER (SUC (SUC i))) (next_el r2)) x) = ((f_list L) (((ITER (SUC i)) (next_el r2)) x))))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)))) = EMPTY))))
T c= c/\ ! c==> c< b0 cindexf f0 f1 f2 c= cPOWER * part cnext_el f3 cSUC cSUC b0 f4 cf_list f5 cPOWER * part cnext_el f3 cSUC b0 f4 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cPOWER * part cnext_el f3 cSUC cSUC b1 f4 cf_list f5 cPOWER * part cnext_el f3 cSUC b1 f4 b1 part cEMPTY c/\ ! c==> c< b0 cindexf f0 f1 f2 c= cITER cSUC cSUC b0 * part cnext_el f3 f4 cf_list f5 cITER cSUC b0 * part cnext_el f3 f4 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cITER cSUC cSUC b1 * part cnext_el f3 f4 cf_list f5 cITER cSUC b1 * part cnext_el f3 f4 b1 part cEMPTY
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) /\ (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ |- (?y. ((((l'y L) r1) x) = y))
T c? / c= cl'y f0 f1 f2 b0
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((((marked_list L) N) r) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cindexf f3 cPOWER * part cnext_el f1 f4 f3 f5 f4 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f4 f3 f5 cSUC f4 c==> c= cfind_face f0 f2 f1 c==> c= crtrans f0 f6 f7 f2 cSUC f8 f5 c==> cMEM cPOWER * part cnext_el f1 f4 f3 f5 c==> cMEM cPOWER * part cnext_el f1 cSUC f4 f3 f5 c==> cmarked_list f0 f6 f7 f2 c==> cs_flag_list f0 cntrans f0 f6 f7 f2 cSUC f8 f5 f2 c==> cuniq cflatten cntrans f0 f6 f7 f2 f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f2 f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f2 f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 f8 c==> cuniq f9 c==> cuniq cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> cuniq f5 c= cPOWER * part cnext_el f5 f4 cnext_el f5 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f5 f4 cf_list f0 f2
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((SUC i') <= (((indexf w) z) f)) /\ ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= cSUC f12 cindexf f6 f8 f5 c==> c< f12 cindexf f6 f8 f5 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ c<= cSUC f12 cindexf f6 f8 f5 c==> c<= f12 cindexf f6 f8 f5 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f11 cSUC f12 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f11 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f11 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f11 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f11 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c= cPOWER * part cnext_el f11 f12 cnext_el f11 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f11 f12 cf_list f0 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((prev_el r1) (((((ztrans L) N) r) x) i)) = z1) /\ ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f10 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM w) r2), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- |- ((!f'. t) = t)
T c= ! f0 f0
+ |- ((\L. (!N. (!r. (!f. (!w. (!x. (!i. (!j. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((((find_face L) x) = f) /\ ((((next_el f) x) = w) /\ (j <= (((indexf w) (((((ztrans L) N) r) x) i)) f))))))))) ==> (((MEM (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) /\ ((((indexf w) (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) = j))))))))))) L)
T * / ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b5 c/\ c~ cfinal_list b0 crtrans b0 b1 b2 b5 b6 c/\ c= cfind_face b0 b5 b3 c/\ c= cnext_el b3 b5 b4 c<= b7 cindexf b4 cztrans b0 b1 b2 b5 b6 b3 c/\ cMEM cPOWER * part cnext_el b3 b7 b4 crtrans b0 b1 b2 b5 cSUC b6 c= cindexf b4 cPOWER * part cnext_el b3 b7 b4 crtrans b0 b1 b2 b5 cSUC b6 b7 f0
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) |- ((((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L))) = T)
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c= c==> cMEM f1 clist_of_darts f0 cMEM c, cSND f1 cFST f1 clist_of_darts f0 cT
- |- ((\x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))) x)
T * / ! c= crtrans f0 f1 f2 b0 b1 cSND cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((((marked_list L) N) r) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) /\ ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 f6 c==> cmarked_list f0 f4 f5 f2 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 f6 c==> c= cnext_el f7 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 f6 f7 f2 c==> c= crtrans f0 f4 f5 f2 f6 f7 c==> c= crtrans f0 f4 f5 f2 cSUC f6 f8 c==> c= cl'y f0 f7 f2 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f4 f5 f2 f6 f10 c==> c= cindexf f3 cytrans f0 f4 f5 f2 cSUC f6 f1 cl'm f0 f8 f2 c==> c< f12 cindexf f3 f10 f1 c==> c<= cSUC f12 cindexf f3 f10 f1 c==> c<= f12 cindexf f3 f10 f1 c==> cMEM cPOWER * part cnext_el f1 cSUC f12 f3 f8 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f12 f3 f8 cSUC f12 c==> cMEM cPOWER * part cnext_el f1 f12 f3 f8 c==> c= cindexf f3 cPOWER * part cnext_el f1 f12 f3 f8 f12 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f8 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f2 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> c= cnext_el f8 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f6 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> cuniq f8 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f2
- (~ (A a)), ((!x. (~ (A x))) /\ (A a)) |- ((~ (A a)) /\ (A a))
T c==> c~ * f0 f1 c==> c/\ ! c~ * f0 b0 * f0 f1 c/\ c~ * f0 f1 * f0 f1
+ |- ((\r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))) r)
T * / ! c= cmarked_list f0 f1 b0 b1 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM b0 f1 c/\ cMEM b1 b0 c/\ cLET / cLET_END c/\ call part cuniq b2 call / c> csizel cfilter * part cMEM b3 b2 cNUMERAL cBIT1 c_0 cflatten b2 cquotient_list f0 f1 c/\ c= cnext_el b0 b1 cf_list f0 b1 c/\ cLET / cLET_END cfinal_list f0 b2 cfind_list f1 ce_list b1 c/\ c==> cfinal_list f0 b0 cflag_list f0 f1 c==> c~ cfinal_list f0 b0 cs_flag_list f0 f1 b0 b1 f2
+ ((((marked_list L) N) r) x) |- ((((MEM x) (list_of_darts L)) ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))) = ((((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))) ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))
T c==> cmarked_list f0 f1 f2 f3 c= c==> cMEM f3 clist_of_darts f0 c==> c= co * part cnext_el f4 * * part cPOWER * part cnext_el f4 cSUC cindexf f5 f6 f4 f3 cf_list f0 cPOWER * part cnext_el f4 cindexf f5 f6 f4 cf_list f0 f3 c~ c= cindexf f5 cl'y f0 f4 f3 f7 cl'm f0 f4 f3 c==> c==> cmarked_list f0 f1 f2 f3 cMEM f3 clist_of_darts f0 c==> c= co * part cnext_el f4 * * part cPOWER * part cnext_el f4 cSUC cindexf f5 f6 f4 f3 cf_list f0 cPOWER * part cnext_el f4 cindexf f5 f6 f4 cf_list f0 f3 c~ c= cindexf f5 cl'y f0 f4 f3 f7 cl'm f0 f4 f3
+ (uniq f), (uniq r2), (uniq (list_of_darts L)), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((MEM w) r2), ((MEM x) (list_of_darts L)), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2) |- (((MEM w) r2) /\ ((((POWER (next_el r2)) i') ((next_el r2) w)) = ((f_list L) (((POWER (next_el r2)) i') w))))
T c==> cuniq f0 c==> cuniq f1 c==> cuniq clist_of_darts f2 c==> c= cnext_el f0 f3 f4 c==> c= cindexf f4 cPOWER * part cnext_el f0 f5 f4 f1 f5 c==> c= cindexf f4 cPOWER * part cnext_el f0 cSUC f5 f4 f1 cSUC f5 c==> c= cfind_face f2 f3 f0 c==> cMEM f4 f1 c==> cMEM f3 clist_of_darts f2 c==> cMEM cPOWER * part cnext_el f0 f5 f4 f1 c==> cMEM cPOWER * part cnext_el f0 cSUC f5 f4 f1 c/\ cMEM f4 f1 c= cPOWER * part cnext_el f1 f5 cnext_el f1 f4 cf_list f2 cPOWER * part cnext_el f1 f5 f4
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ |- (((((((rtrans L) N) r) x) i) = (((((rtrans L) N) r) x) i)) = ((\r1. ((((((rtrans L) N) r) x) i) = r1)) (((((rtrans L) N) r) x) i)))
T c= c= crtrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 * / c= crtrans f0 f1 f2 f3 f4 b0 crtrans f0 f1 f2 f3 f4
- |- (((!P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) ==> ((\P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) P)) = ((\P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) P))
T c= c==> ! ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 * / ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 f0 * / ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 f0
- |- ((\f. (!x. (((LET f) x) = (f x)))) f)
T * / ! c= cLET b0 b1 * b0 b1 f0
+ (~ (((f_list L) x') = ((next_el r2) x'))), (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cgood_list f0 c==> c= cnext_el f3 f4 f5 c==> c= cfind_face f0 f4 f3 c==> cmarked_list f0 f6 f7 f4 c==> cMEM f5 f2 c==> cmarked_list f0 cntrans f0 f6 f7 f4 cSUC f8 f2 f4 c==> cnormal_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> cMEM f2 cntrans f0 f6 f7 f4 cSUC f8 c==> cMEM f4 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> c= cnext_el f2 f4 cf_list f0 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f6 f7 f4 cSUC f8 ce_list f4 c==> cs_flag_list f0 cntrans f0 f6 f7 f4 cSUC f8 f2 f4 c==> cuniq cflatten cntrans f0 f6 f7 f4 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f4 cSUC f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f4 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f4 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f4 cSUC f8 c==> cuniq f2 c==> c= cPOWER * part cnext_el f2 cindexf f5 f1 f2 f5 f1 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f5 f1 f2 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f5 f1 f2 cf_list f0 f4 c~ c= cindexf f5 cl'y f0 f2 f4 f3 cl'm f0 f2 f4
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((((marked_list L) N) r) x) |- (((((((ztrans L) N) r) x) i) = z) /\ (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cztrans f0 f4 f5 f2 f6 f7 c==> c= cfind_face f0 f2 f1 c==> c= crtrans f0 f4 f5 f2 cSUC f6 f8 c==> cmarked_list f0 f4 f5 f2 c/\ c= cztrans f0 f4 f5 f2 f6 f7 c==> c= cindexf f3 cytrans f0 f4 f5 f2 cSUC f6 f1 cl'm f0 f8 f2 c==> c< f9 cindexf f3 f7 f1 c==> c<= cSUC f9 cindexf f3 f7 f1 c==> c<= f9 cindexf f3 f7 f1 c==> cMEM cPOWER * part cnext_el f1 cSUC f9 f3 f8 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f9 f3 f8 cSUC f9 c==> cMEM cPOWER * part cnext_el f1 f9 f3 f8 c==> c= cindexf f3 cPOWER * part cnext_el f1 f9 f3 f8 f9 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f8 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f2 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> c= cnext_el f8 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f6 c==> cuniq f10 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> cuniq f8 c= cPOWER * part cnext_el f8 f9 cnext_el f8 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f8 f9 cf_list f0 f2
- |- (((!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) ==> ((\N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) N)) = ((\N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) N))
T c= c==> ! ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 * / ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 f1 * / ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 f1
- |- (((!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) ==> ((\N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) N)) = ((\N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) N))
T c= c==> ! ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 * / ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1 * / ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1
+ |- ((\x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) x)
T * / c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 f3
+ (~ (((f_list L) x') = ((next_el r2) x'))), (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cgood_list f0 c==> c= cnext_el f3 f4 f5 c==> c= cfind_face f0 f4 f3 c==> cmarked_list f0 f6 f7 f4 c==> cnormal_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> cMEM f2 cntrans f0 f6 f7 f4 cSUC f8 c==> cMEM f4 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> c= cnext_el f2 f4 cf_list f0 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f6 f7 f4 cSUC f8 ce_list f4 c==> cs_flag_list f0 cntrans f0 f6 f7 f4 cSUC f8 f2 f4 c==> cuniq cflatten cntrans f0 f6 f7 f4 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f4 cSUC f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f4 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f4 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f4 cSUC f8 c==> cuniq f2 c==> c= cPOWER * part cnext_el f2 cindexf f5 f1 f2 f5 f1 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f5 f1 f2 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f5 f1 f2 cf_list f0 f4 c~ c= cindexf f5 cl'y f0 f2 f4 f3 cl'm f0 f2 f4
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((((ztrans L) N) r) x) i) = z) /\ ((!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ c= cztrans f0 f1 f2 f3 f4 f8 c==> ! c= cPOWER * part cnext_el f11 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f11 cSUC b0 f3 c==> cMEM f12 f11 c==> c~ c= cf_list f0 f12 cnext_el f11 f12 c~ c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3
+ |- (((?z. ((((((ztrans L) N) r) x) i) = z)) ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f))) = ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))
T c= c==> c? / c= cztrans f0 f1 f2 f3 f4 b0 c<= cindexf f5 cztrans f0 f1 f2 f3 f4 f6 cindexf f5 cytrans f0 f1 f2 f3 cSUC f4 f6 c<= cindexf f5 cztrans f0 f1 f2 f3 f4 f6 cindexf f5 cytrans f0 f1 f2 f3 cSUC f4 f6
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) /\ ((MEM r2) (((((ntrans L) N) r) x) (SUC i)))) ==> (uniq r2)) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> c==> c/\ cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 cuniq f5 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ |- ((\a. (!s. ((~ ((all a) s)) = (?x. (((MEM x) s) /\ (~ (a x))))))) a)
T * / ! c= c~ call b0 b1 c? / c/\ cMEM b2 b1 c~ * b0 b2 f0
+ |- (((!x. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x)))) ==> ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) (((((rtrans L) N) r) x) (SUC i))) x))) ==> ((\x. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x)))) ==> ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) (((((rtrans L) N) r) x) (SUC i))) x))) x)) = ((\x. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x)))) ==> ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) (((((rtrans L) N) r) x) (SUC i))) x))) x))
T c= c==> ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 f1 f2 b0 cmarked_list f0 cntrans f0 f1 f2 b0 cSUC f3 crtrans f0 f1 f2 b0 cSUC f3 b0 * / c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 f1 f2 b0 cmarked_list f0 cntrans f0 f1 f2 b0 cSUC f3 crtrans f0 f1 f2 b0 cSUC f3 b0 f4 * / c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 f1 f2 b0 cmarked_list f0 cntrans f0 f1 f2 b0 cSUC f3 crtrans f0 f1 f2 b0 cSUC f3 b0 f4
+ |- ((int_of_num (m + n)) = ((int_add (int_of_num m)) (int_of_num n)))
T c= cint_of_num c+ f0 f1 cint_add cint_of_num f0 cint_of_num f1
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((MEM (((POWER (next_el f)) i') w)) r2) /\ ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i')), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((POWER (next_el r2)) (SUC (SUC i'))) x) = ((f_list L) (((POWER (next_el r2)) (SUC i')) x)))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> c/\ cMEM cPOWER * part cnext_el f5 f11 f6 f12 c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f10 f5 c==> c<= cSUC f11 cindexf f6 f10 f5 c==> c< f11 cindexf f6 f10 f5 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= cPOWER * part cnext_el f12 cSUC cSUC f11 f3 cf_list f0 cPOWER * part cnext_el f12 cSUC f11 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- ((~ ((final_list L) (((((rtrans L) N) r) x) i))) ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cfind_face f0 f3 f5 c==> cmarked_list f0 f1 f2 f3 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
+ |- (((!r. (!x. (!i. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))))))) ==> (~ ((final_list L) (((((rtrans L) N) r) x) i))))))) ==> ((\r. (!x. (!i. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))))))) ==> (~ ((final_list L) (((((rtrans L) N) r) x) i))))))) r)) = ((\r. (!x. (!i. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))))))) ==> (~ ((final_list L) (((((rtrans L) N) r) x) i))))))) r))
T c= c==> ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 crtrans f0 f1 b0 b1 cSUC b2 c~ cfinal_list f0 crtrans f0 f1 b0 b1 b2 * / ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 crtrans f0 f1 b0 b1 cSUC b2 c~ cfinal_list f0 crtrans f0 f1 b0 b1 b2 f2 * / ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 crtrans f0 f1 b0 b1 cSUC b2 c~ cfinal_list f0 crtrans f0 f1 b0 b1 b2 f2
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((MEM x) r2) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) /\ ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r2), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((next_el r2) x))) = ((f_list L) (((POWER (next_el r2)) i') ((next_el r2) x))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> c/\ cMEM f3 f12 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ c= cnext_el f12 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f10 f5 c==> c<= cSUC f11 cindexf f6 f10 f5 c==> c< f11 cindexf f6 f10 f5 c==> cMEM f3 f12 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cnext_el f12 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cnext_el f12 f3
- |- ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x)
T * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3
+ (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))))) |- (((((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_add ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_add ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- ((\m. (((uniq (list_of_darts L)) /\ ((MEM x) (list_of_darts L))) ==> ((((POWER (f_list L)) m) x) = (((POWER (next_el ((find_face L) x))) m) x)))) (SUC (NUMERAL _0)))
T * / c==> c/\ cuniq clist_of_darts f0 cMEM f1 clist_of_darts f0 c= cPOWER * part cf_list f0 b0 f1 cPOWER * part cnext_el cfind_face f0 f1 b0 f1 cSUC cNUMERAL c_0
+ |- (((((uniq (flatten (((((ntrans L) N) r) x) i))) /\ ((MEM r1) (((((ntrans L) N) r) x) i))) ==> (uniq r1)) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))) = (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))
T c= c==> c==> c/\ cuniq cflatten cntrans f0 f1 f2 f3 f4 cMEM f5 cntrans f0 f1 f2 f3 f4 cuniq f5 c~ c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f7 cl'm f0 f8 f3 c~ c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f7 cl'm f0 f8 f3
+ |- (((real_add (real_of_num m)) (real_neg (real_of_num m))) = (real_of_num (NUMERAL _0)))
T c= creal_add creal_of_num f0 creal_neg creal_of_num f0 creal_of_num cNUMERAL c_0
+ (uniq (list_of_darts L)), (((find_face L) x) = f) |- (((uniq f) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))) = (((uniq (list_of_darts L)) ==> (uniq ((find_face L) x))) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))
T c==> cuniq clist_of_darts f0 c==> c= cfind_face f0 f1 f2 c= c==> cuniq f2 c= cPOWER * part cnext_el f3 f4 cnext_el f3 cf_list f0 f1 cf_list f0 cPOWER * part cnext_el f3 f4 cf_list f0 f1 c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c= cPOWER * part cnext_el f3 f4 cnext_el f3 cf_list f0 f1 cf_list f0 cPOWER * part cnext_el f3 f4 cf_list f0 f1
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((((ztrans L) N) r) x) i) = z) ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f10 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c= cztrans f0 f1 f2 f3 f4 f11 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) /\ ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i'))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((MEM (((POWER (next_el f)) (SUC i')) w)) r2) /\ ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i'))) /\ ((((POWER (next_el r2)) (SUC (SUC i'))) x) = ((f_list L) (((POWER (next_el r2)) (SUC i')) x))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> c/\ cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f11 c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f11 cSUC f12 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f12 cindexf f6 f10 f5 c==> c<= cSUC f12 cindexf f6 f10 f5 c==> c< f12 cindexf f6 f10 f5 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ c/\ cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f11 c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f11 cSUC f12 c= cPOWER * part cnext_el f11 cSUC cSUC f12 f3 cf_list f0 cPOWER * part cnext_el f11 cSUC f12 f3
+ (uniq (list_of_darts L)), (((find_face L) (((POWER (next_el f)) i') w)) = f), ((MEM (((POWER (next_el f)) i') w)) f) |- (((((f_list L) (((POWER (next_el f)) i') w)) = ((next_el f) (((POWER (next_el f)) i') w))) ==> (((next_el f) (((POWER (next_el f)) i') w)) = ((f_list L) (((POWER (next_el f)) i') w)))) = ((((uniq (list_of_darts L)) /\ ((MEM (((POWER (next_el f)) i') w)) (list_of_darts L))) ==> ((((POWER (f_list L)) (SUC (NUMERAL _0))) (((POWER (next_el f)) i') w)) = (((POWER (next_el ((find_face L) (((POWER (next_el f)) i') w)))) (SUC (NUMERAL _0))) (((POWER (next_el f)) i') w)))) ==> (((next_el f) (((POWER (next_el f)) i') w)) = ((f_list L) (((POWER (next_el f)) i') w)))))
T c==> cuniq clist_of_darts f0 c==> c= cfind_face f0 cPOWER * part cnext_el f1 f2 f3 f1 c==> cMEM cPOWER * part cnext_el f1 f2 f3 f1 c= c==> c= cf_list f0 cPOWER * part cnext_el f1 f2 f3 cnext_el f1 cPOWER * part cnext_el f1 f2 f3 c= cnext_el f1 cPOWER * part cnext_el f1 f2 f3 cf_list f0 cPOWER * part cnext_el f1 f2 f3 c==> c==> c/\ cuniq clist_of_darts f0 cMEM cPOWER * part cnext_el f1 f2 f3 clist_of_darts f0 c= cPOWER * part cf_list f0 cSUC cNUMERAL c_0 cPOWER * part cnext_el f1 f2 f3 cPOWER * part cnext_el cfind_face f0 cPOWER * part cnext_el f1 f2 f3 cSUC cNUMERAL c_0 cPOWER * part cnext_el f1 f2 f3 c= cnext_el f1 cPOWER * part cnext_el f1 f2 f3 cf_list f0 cPOWER * part cnext_el f1 f2 f3
- |- ((\P. (!x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t)))))))) P)
T * / ! c= cIN b1 * part cGSPEC / * b0 * part cSETSPEC b2 * b0 / / c/\ b2 c= b1 b3 f0
- |- (((!t. ((LET_END t) = t)) ==> ((\t. ((LET_END t) = t)) t)) = ((\t. ((LET_END t) = t)) t))
T c= c==> ! c= cLET_END b0 b0 * / c= cLET_END b0 b0 f0 * / c= cLET_END b0 b0 f0
+ (uniq f), (uniq (list_of_darts L)), (((next_el f) x) = w), (((find_face L) x) = f), ((MEM x) (list_of_darts L)) |- (((((MEM x) ((find_face L) x)) /\ (uniq ((find_face L) x))) ==> ((MEM (((POWER (next_el ((find_face L) x))) (SUC i')) x)) ((find_face L) x))) ==> (((next_el f) (((POWER (next_el f)) i') w)) = ((f_list L) (((POWER (next_el f)) i') w))))
T c==> cuniq f0 c==> cuniq clist_of_darts f1 c==> c= cnext_el f0 f2 f3 c==> c= cfind_face f1 f2 f0 c==> cMEM f2 clist_of_darts f1 c==> c==> c/\ cMEM f2 cfind_face f1 f2 cuniq cfind_face f1 f2 cMEM cPOWER * part cnext_el cfind_face f1 f2 cSUC f4 f2 cfind_face f1 f2 c= cnext_el f0 cPOWER * part cnext_el f0 f4 f3 cf_list f1 cPOWER * part cnext_el f0 f4 f3
+ (~ (((f_list L) x') = ((next_el r2) x'))), (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x) |- (((all (loop_list L)) (((((ntrans L) N) r) x) i)) /\ ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cgood_list f0 c==> c= cnext_el f3 f4 f5 c==> c= cfind_face f0 f4 f3 c==> call * part cloop_list f0 cntrans f0 f6 f7 f4 f8 c==> cmarked_list f0 f6 f7 f4 c/\ call * part cloop_list f0 cntrans f0 f6 f7 f4 f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f4 f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f4 f8 c==> cuniq f9 c==> cMEM f5 f2 c==> cmarked_list f0 cntrans f0 f6 f7 f4 cSUC f8 f2 f4 c==> cnormal_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> cMEM f2 cntrans f0 f6 f7 f4 cSUC f8 c==> cMEM f4 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> c= cnext_el f2 f4 cf_list f0 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f6 f7 f4 cSUC f8 ce_list f4 c==> cs_flag_list f0 cntrans f0 f6 f7 f4 cSUC f8 f2 f4 c==> cuniq cflatten cntrans f0 f6 f7 f4 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f4 cSUC f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f4 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f4 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f4 cSUC f8 c==> cuniq f2 c==> c= cPOWER * part cnext_el f2 cindexf f5 f1 f2 f5 f1 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f5 f1 f2 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f5 f1 f2 cf_list f0 f4 c~ c= cindexf f5 cl'y f0 f2 f4 f3 cl'm f0 f2 f4
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) /\ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i)))))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f6 f3 f7 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f5 f9 f10 c==> c= cl'y f0 f5 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f7 cPOWER * part cnext_el f6 f12 f7 f8 f12 c==> c= cindexf f7 cPOWER * part cnext_el f6 cSUC f12 f7 f8 cSUC f12 c==> c= cindexf f7 cytrans f0 f1 f2 f3 cSUC f4 f6 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f6 c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c/\ call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f7 f9 f6 c==> c<= cSUC f12 cindexf f7 f9 f6 c==> c< f12 cindexf f7 f9 f6 c==> cMEM f3 f5 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f6 f12 f7 f8 c==> cMEM cPOWER * part cnext_el f6 cSUC f12 f7 f8 c==> cMEM f5 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f5 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) (((((ntrans L) N) r) x) i)) ==> (((MEM r1) (((((ntrans L) N) r) x) i)) ==> (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cmarked_list f0 f4 f5 f2 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 cntrans f0 f4 f5 f2 f6 c==> cMEM f7 cntrans f0 f4 f5 f2 f6 c==> cMEM f2 f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 f6 c==> c= cnext_el f7 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 f6 f7 f2 c==> c= crtrans f0 f4 f5 f2 f6 f7 c==> c= crtrans f0 f4 f5 f2 cSUC f6 f8 c==> c= cl'y f0 f7 f2 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f4 f5 f2 f6 f10 c==> c= cindexf f3 cytrans f0 f4 f5 f2 cSUC f6 f1 cl'm f0 f8 f2 c==> c< f12 cindexf f3 f10 f1 c==> c<= cSUC f12 cindexf f3 f10 f1 c==> c<= f12 cindexf f3 f10 f1 c==> cMEM cPOWER * part cnext_el f1 cSUC f12 f3 f8 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f12 f3 f8 cSUC f12 c==> cMEM cPOWER * part cnext_el f1 f12 f3 f8 c==> c= cindexf f3 cPOWER * part cnext_el f1 f12 f3 f8 f12 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f8 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f2 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> c= cnext_el f8 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f6 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> cuniq f8 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f2
+ |- ((~ (~ (?a. (a IN (GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((POWER (next_el r2)) (SUC (SUC m))) x) = ((f_list L) (((POWER (next_el r2)) (SUC m)) x))))) m)))))))) = (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((POWER (next_el r2)) (SUC (SUC m))) x) = ((f_list L) (((POWER (next_el r2)) (SUC m)) x))))) m)))) = EMPTY)))
T c= c~ c~ c? / cIN b0 * part cGSPEC / c? / cSETSPEC b1 c~ c= cPOWER * part cnext_el f0 cSUC cSUC b2 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b2 f1 b2 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cPOWER * part cnext_el f0 cSUC cSUC b1 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b1 f1 b1 part cEMPTY
+ |- ((t ==> F) = (~ t))
T c= c==> f0 cF c~ f0
+ |- ((\y. (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y))))) x)
T * / ! c==> c/\ cuniq clist_of_darts f0 cMEM b0 clist_of_darts f0 c= cPOWER * part cf_list f0 b1 b0 cPOWER * part cnext_el cfind_face f0 b0 b1 b0 f1
+ |- (((!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))) = ((~ (?a. (a IN (GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((POWER (next_el r2)) (SUC (SUC m))) x) = ((f_list L) (((POWER (next_el r2)) (SUC m)) x))))) m))))))) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> F)))
T c= c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c~ c= cindexf f3 cytrans f2 f4 f5 f1 cSUC f6 f7 cl'm f2 f0 f1 c==> c~ c? / cIN b0 * part cGSPEC / c? / cSETSPEC b1 c~ c= cPOWER * part cnext_el f0 cSUC cSUC b2 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b2 f1 b2 c==> c= cindexf f3 cytrans f2 f4 f5 f1 cSUC f6 f7 cl'm f2 f0 f1 cF
+ |- ((((\a. (((!x. (~ (A x))) /\ (A a)) \/ ((A a) /\ (!a. (~ (A a)))))) a) ==> F) = T)
T c= c==> * / c\/ c/\ ! c~ * f0 b1 * f0 b0 c/\ * f0 b0 ! c~ * f0 b1 f1 cF cT
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) /\ ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ |- (((!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))) ==> ((\i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))) i)) = ((\i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))) i))
T c= c==> ! c= cytrans f0 f1 f2 f3 b0 cl'y f0 crtrans f0 f1 f2 f3 b0 f3 * / c= cytrans f0 f1 f2 f3 b0 cl'y f0 crtrans f0 f1 f2 f3 b0 f3 f4 * / c= cytrans f0 f1 f2 f3 b0 cl'y f0 crtrans f0 f1 f2 f3 b0 f3 f4
+ (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((normal_list L) (((((ntrans L) N) r) x) i)) ==> (((MEM r1) (((((ntrans L) N) r) x) i)) ==> (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cmarked_list f0 f4 f5 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 f6 c==> cMEM f7 cntrans f0 f4 f5 f2 f6 c==> cMEM f2 f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 f6 c==> c= cnext_el f7 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 f6 f7 f2 c==> c= crtrans f0 f4 f5 f2 f6 f7 c==> c= crtrans f0 f4 f5 f2 cSUC f6 f8 c==> c= cl'y f0 f7 f2 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f4 f5 f2 f6 f10 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c==> cuniq cflatten cntrans f0 f4 f5 f2 f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f6 c==> cuniq f7 c==> cMEM f3 f8 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f8 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f2 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> c= cnext_el f8 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> cuniq f8 c==> c= cPOWER * part cnext_el f8 cindexf f3 f12 f8 f3 f12 c==> c= co * part cnext_el f8 * * part cPOWER * part cnext_el f8 cSUC cindexf f3 f12 f8 f2 cf_list f0 cPOWER * part cnext_el f8 cindexf f3 f12 f8 cf_list f0 f2 c~ c= cindexf f3 cl'y f0 f8 f2 f1 cl'm f0 f8 f2
+ |- ((F = t) = (~ t))
T c= c= cF f0 c~ f0
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((?z. ((((((ztrans L) N) r) x) i) = z)) ==> (?z. ((((((ztrans L) N) r) x) i) = z)))
T c==> c? / c= cztrans f0 f1 f2 f3 f4 b0 c? / c= cztrans f0 f1 f2 f3 f4 b0
- (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- ((\i. (!f'. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f') /\ (((next_el f') x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))) = (\i. (!f'. (!w. (((f = f') /\ (((next_el f') x) = w)) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cfind_face f0 f1 f2 c==> cmarked_list f0 f3 f4 f1 c= / ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f3 f4 f1 c/\ c= cfind_face f0 f1 b1 c= cnext_el b1 f1 b2 cMEM b2 crtrans f0 f3 f4 f1 b0 / ! ! c==> c/\ c= f2 b1 c= cnext_el b1 f1 b2 cMEM b2 crtrans f0 f3 f4 f1 b0
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((!i. ((i < (((indexf w) z) f)) ==> ((((ITER (SUC (SUC i))) (next_el r2)) x) = ((f_list L) (((ITER (SUC i)) (next_el r2)) x))))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)))) = EMPTY))) ==> ((((indexf w) z) f) <= (((l'm L) r2) x))) ==> ((((indexf w) z) f) <= (((l'm L) r2) x)))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c==> c/\ ! c==> c< b0 cindexf f6 f10 f5 c= cITER cSUC cSUC b0 * part cnext_el f11 f3 cf_list f0 cITER cSUC b0 * part cnext_el f11 f3 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cITER cSUC cSUC b1 * part cnext_el f11 f3 cf_list f0 cITER cSUC b1 * part cnext_el f11 f3 b1 part cEMPTY c<= cindexf f6 f10 f5 cl'm f0 f11 f3 c<= cindexf f6 f10 f5 cl'm f0 f11 f3
+ (((A a) /\ (!a. (~ (A a)))) ==> F), (((!x. (~ (A x))) /\ (A a)) \/ ((A a) /\ (!a. (~ (A a))))) |- F
T c==> c==> c/\ * f0 f1 ! c~ * f0 b0 cF c==> c\/ c/\ ! c~ * f0 b0 * f0 f1 c/\ * f0 f1 ! c~ * f0 b0 cF
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c==> cMEM f6 f8 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f8 c==> c= cPOWER * part cnext_el f8 cindexf f6 f12 f8 f6 f12 c==> c= co * part cnext_el f8 * * part cPOWER * part cnext_el f8 cSUC cindexf f6 f12 f8 f3 cf_list f0 cPOWER * part cnext_el f8 cindexf f6 f12 f8 cf_list f0 f3 c~ c= cindexf f6 cl'y f0 f8 f3 f5 cl'm f0 f8 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((uniq (flatten (((((ntrans L) N) r) x) i))) /\ ((MEM r1) (((((ntrans L) N) r) x) i))) ==> (uniq r1)) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> c==> c/\ cuniq cflatten cntrans f0 f1 f2 f3 f4 cMEM f7 cntrans f0 f1 f2 f3 f4 cuniq f7 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ |- (((!w. (!x. (!i. (!j. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((((find_face L) x) = f) /\ ((((next_el f) x) = w) /\ (j <= (((indexf w) (((((ztrans L) N) r) x) i)) f))))))))) ==> (((MEM (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) /\ ((((indexf w) (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) = j))))))) ==> ((\w. (!x. (!i. (!j. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((((find_face L) x) = f) /\ ((((next_el f) x) = w) /\ (j <= (((indexf w) (((((ztrans L) N) r) x) i)) f))))))))) ==> (((MEM (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) /\ ((((indexf w) (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) = j))))))) w)) = ((\w. (!x. (!i. (!j. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((((find_face L) x) = f) /\ ((((next_el f) x) = w) /\ (j <= (((indexf w) (((((ztrans L) N) r) x) i)) f))))))))) ==> (((MEM (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) /\ ((((indexf w) (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) = j))))))) w))
T c= c==> ! ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b1 c/\ c~ cfinal_list f0 crtrans f0 f1 f2 b1 b2 c/\ c= cfind_face f0 b1 f3 c/\ c= cnext_el f3 b1 b0 c<= b3 cindexf b0 cztrans f0 f1 f2 b1 b2 f3 c/\ cMEM cPOWER * part cnext_el f3 b3 b0 crtrans f0 f1 f2 b1 cSUC b2 c= cindexf b0 cPOWER * part cnext_el f3 b3 b0 crtrans f0 f1 f2 b1 cSUC b2 b3 * / ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b1 c/\ c~ cfinal_list f0 crtrans f0 f1 f2 b1 b2 c/\ c= cfind_face f0 b1 f3 c/\ c= cnext_el f3 b1 b0 c<= b3 cindexf b0 cztrans f0 f1 f2 b1 b2 f3 c/\ cMEM cPOWER * part cnext_el f3 b3 b0 crtrans f0 f1 f2 b1 cSUC b2 c= cindexf b0 cPOWER * part cnext_el f3 b3 b0 crtrans f0 f1 f2 b1 cSUC b2 b3 f4 * / ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b1 c/\ c~ cfinal_list f0 crtrans f0 f1 f2 b1 b2 c/\ c= cfind_face f0 b1 f3 c/\ c= cnext_el f3 b1 b0 c<= b3 cindexf b0 cztrans f0 f1 f2 b1 b2 f3 c/\ cMEM cPOWER * part cnext_el f3 b3 b0 crtrans f0 f1 f2 b1 cSUC b2 c= cindexf b0 cPOWER * part cnext_el f3 b3 b0 crtrans f0 f1 f2 b1 cSUC b2 b3 f4
+ (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) r1) x) |- (((((marked_list L) (((((ntrans L) N) r) x) i)) r1) x) /\ ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) (((((ntrans L) N) r) x) i)) ==> (((MEM r1) (((((ntrans L) N) r) x) i)) ==> (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cmarked_list f0 f4 f5 f2 c==> cmarked_list f0 cntrans f0 f4 f5 f2 f6 f7 f2 c/\ cmarked_list f0 cntrans f0 f4 f5 f2 f6 f7 f2 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 cntrans f0 f4 f5 f2 f6 c==> cMEM f7 cntrans f0 f4 f5 f2 f6 c==> cMEM f2 f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 f6 c==> c= cnext_el f7 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 f6 f7 f2 c==> c= crtrans f0 f4 f5 f2 f6 f7 c==> c= crtrans f0 f4 f5 f2 cSUC f6 f8 c==> c= cl'y f0 f7 f2 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f4 f5 f2 f6 f10 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c==> cuniq cflatten cntrans f0 f4 f5 f2 f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f6 c==> cuniq f7 c==> cMEM f3 f8 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f8 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f2 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> c= cnext_el f8 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> cuniq f8 c==> c= cPOWER * part cnext_el f8 cindexf f3 f12 f8 f3 f12 c==> c= co * part cnext_el f8 * * part cPOWER * part cnext_el f8 cSUC cindexf f3 f12 f8 f2 cf_list f0 cPOWER * part cnext_el f8 cindexf f3 f12 f8 cf_list f0 f2 c~ c= cindexf f3 cl'y f0 f8 f2 f1 cl'm f0 f8 f2
+ (good_list L) |- ((~ ((final_list L) r2)) ==> (((((marked_list L) N) r) x) ==> ((((find_face L) x) = f) ==> ((((next_el f) x) = w) ==> ((~ ((final_list L) r1)) ==> (((((marked_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) (((((ntrans L) N) r) x) i)) ==> (((MEM r1) (((((ntrans L) N) r) x) i)) ==> (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> c~ cfinal_list f0 f1 c==> cmarked_list f0 f2 f3 f4 c==> c= cfind_face f0 f4 f5 c==> c= cnext_el f5 f4 f6 c==> c~ cfinal_list f0 f7 c==> cmarked_list f0 cntrans f0 f2 f3 f4 f8 f7 f4 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 cntrans f0 f2 f3 f4 f8 c==> cMEM f7 cntrans f0 f2 f3 f4 f8 c==> cMEM f4 f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f2 f3 f4 f8 c==> c= cnext_el f7 f4 cf_list f0 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f2 f3 f4 f8 ce_list f4 c==> cs_flag_list f0 cntrans f0 f2 f3 f4 f8 f7 f4 c==> c= crtrans f0 f2 f3 f4 f8 f7 c==> c= crtrans f0 f2 f3 f4 cSUC f8 f1 c==> c= cl'y f0 f7 f4 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f2 f3 f4 f8 f10 c==> cMEM f12 f1 c==> c~ c= cf_list f0 f12 cnext_el f1 f12 c==> cuniq cflatten cntrans f0 f2 f3 f4 f8 c==> call / c~ c= b0 cNIL cntrans f0 f2 f3 f4 f8 c==> call * part cf_last f0 cntrans f0 f2 f3 f4 f8 c==> call * part cloop_list f0 cntrans f0 f2 f3 f4 f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f2 f3 f4 f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f2 f3 f4 f8 c==> cuniq f7 c==> cMEM f6 f1 c==> cmarked_list f0 cntrans f0 f2 f3 f4 cSUC f8 f1 f4 c==> cnormal_list f0 cntrans f0 f2 f3 f4 cSUC f8 c==> cMEM f1 cntrans f0 f2 f3 f4 cSUC f8 c==> cMEM f4 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f2 f3 f4 cSUC f8 c==> c= cnext_el f1 f4 cf_list f0 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f2 f3 f4 cSUC f8 ce_list f4 c==> cs_flag_list f0 cntrans f0 f2 f3 f4 cSUC f8 f1 f4 c==> cuniq cflatten cntrans f0 f2 f3 f4 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f2 f3 f4 cSUC f8 c==> call * part cf_last f0 cntrans f0 f2 f3 f4 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f2 f3 f4 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f2 f3 f4 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f2 f3 f4 cSUC f8 c==> cuniq f1 c==> c= cPOWER * part cnext_el f1 cindexf f6 f12 f1 f6 f12 c==> c= co * part cnext_el f1 * * part cPOWER * part cnext_el f1 cSUC cindexf f6 f12 f1 f4 cf_list f0 cPOWER * part cnext_el f1 cindexf f6 f12 f1 cf_list f0 f4 c~ c= cindexf f6 cl'y f0 f1 f4 f5 cl'm f0 f1 f4
+ |- ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) /\ (i' <= (((indexf w) z) f))))
T c==> c< f0 cindexf f1 f2 f3 c/\ c<= cSUC f0 cindexf f1 f2 f3 c<= f0 cindexf f1 f2 f3
+ ((\x. (((MEM x) r2) /\ (~ (((f_list L) x) = ((next_el r2) x))))) x') |- (((((MEM x') r2) /\ (~ (((f_list L) x') = ((next_el r2) x')))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))) = (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))
T c==> * / c/\ cMEM b0 f0 c~ c= cf_list f1 b0 cnext_el f0 b0 f2 c= c==> c/\ cMEM f2 f0 c~ c= cf_list f1 f2 cnext_el f0 f2 c~ c= cindexf f3 cytrans f1 f4 f5 f6 cSUC f7 f8 cl'm f1 f0 f6 c~ c= cindexf f3 cytrans f1 f4 f5 f6 cSUC f7 f8 cl'm f1 f0 f6
+ |- ((\r. (!x. (!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))))) r)
T * / ! ! c= cytrans f0 f1 b0 b1 b2 cl'y f0 crtrans f0 f1 b0 b1 b2 b1 f2
+ |- ((\r. (!k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r)))) ((find_face L) x))
T * / ! c==> c/\ cMEM f0 b0 cuniq b0 cMEM cPOWER * part cnext_el b0 b1 f0 b0 cfind_face f1 f0
- (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019)))) (real_of_num (NUMERAL _0)))))) |- ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ ((\y. ((((l'y L) r1) x) = y)) y) |- ((((((l'y L) r1) x) = y) ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f))) = ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c= c==> c= cl'y f0 f1 f2 f3 c<= cindexf f4 cztrans f0 f5 f6 f2 f7 f8 cindexf f4 cytrans f0 f5 f6 f2 cSUC f7 f8 c<= cindexf f4 cztrans f0 f5 f6 f2 f7 f8 cindexf f4 cytrans f0 f5 f6 f2 cSUC f7 f8
+ |- (p = ((~ p) ==> F))
T c= f0 c==> c~ f0 cF
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((next_el r2) x))) = ((f_list L) (((POWER (next_el r2)) i') ((next_el r2) x)))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f10 f5 c==> c<= cSUC f11 cindexf f6 f10 f5 c==> c< f11 cindexf f6 f10 f5 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cnext_el f12 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cnext_el f12 f3
+ |- ((\s. ((((MEM w) s) /\ (((MEM (((POWER (next_el f)) i') w)) s) /\ (uniq s))) ==> ((((POWER (next_el s)) (((indexf w) (((POWER (next_el f)) i') w)) s)) w) = (((POWER (next_el f)) i') w)))) r2)
T * / c==> c/\ cMEM f0 b0 c/\ cMEM cPOWER * part cnext_el f1 f2 f0 b0 cuniq b0 c= cPOWER * part cnext_el b0 cindexf f0 cPOWER * part cnext_el f1 f2 f0 b0 f0 cPOWER * part cnext_el f1 f2 f0 f3
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cindexf f3 cPOWER * part cnext_el f1 f4 f3 f5 f4 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f4 f3 f5 cSUC f4 c==> c= cfind_face f0 f2 f1 c==> c= crtrans f0 f6 f7 f2 cSUC f8 f5 c==> cMEM cPOWER * part cnext_el f1 f4 f3 f5 c==> cMEM cPOWER * part cnext_el f1 cSUC f4 f3 f5 c==> cmarked_list f0 f6 f7 f2 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> cuniq f5 c= cPOWER * part cnext_el f5 f4 cnext_el f5 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f5 f4 cf_list f0 f2
- |- ((?m. t) = t)
T c= c? / f0 f0
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ |- (((!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))) = (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))
T c= c==> ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 c~ c= cindexf f0 cytrans f1 f2 f3 f4 cSUC f5 f6 cl'm f1 f7 f4 c~ c= cindexf f0 cytrans f1 f2 f3 f4 cSUC f5 f6 cl'm f1 f7 f4
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))) /\ (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 c~ c= cindexf f9 cytrans f0 f1 f2 f3 cSUC f4 f8 cl'm f0 f5 f3
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), ((((marked_list L) N) r) x) |- ((((find_face L) x) = f) ==> ((((next_el f) x) = w) ==> ((~ ((final_list L) r1)) ==> (((((marked_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) (((((ntrans L) N) r) x) i)) ==> (((MEM r1) (((((ntrans L) N) r) x) i)) ==> (((MEM x) r1) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> cmarked_list f0 f1 f2 f3 c==> c= cfind_face f0 f3 f4 c==> c= cnext_el f4 f3 f5 c==> c~ cfinal_list f0 f6 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f7 f6 f3 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f7 c==> cMEM f6 cntrans f0 f1 f2 f3 f7 c==> cMEM f3 f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f7 c==> c= cnext_el f6 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f7 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f7 f6 f3 c==> c= crtrans f0 f1 f2 f3 f7 f6 c==> c= crtrans f0 f1 f2 f3 cSUC f7 f8 c==> c= cl'y f0 f6 f3 f9 c==> c= cprev_el f6 f10 f11 c==> c= cztrans f0 f1 f2 f3 f7 f10 c==> c= cindexf f5 cytrans f0 f1 f2 f3 cSUC f7 f4 cl'm f0 f8 f3 c==> c< f12 cindexf f5 f10 f4 c==> c<= cSUC f12 cindexf f5 f10 f4 c==> c<= f12 cindexf f5 f10 f4 c==> cMEM cPOWER * part cnext_el f4 cSUC f12 f5 f8 c==> c= cindexf f5 cPOWER * part cnext_el f4 cSUC f12 f5 f8 cSUC f12 c==> cMEM cPOWER * part cnext_el f4 f12 f5 f8 c==> c= cindexf f5 cPOWER * part cnext_el f4 f12 f5 f8 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f7 f8 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f7 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f7 c==> cMEM f3 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f7 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f7 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f7 f8 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 f7 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f7 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f7 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f7 c==> cuniq f6 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f7 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f7 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f7 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f7 c==> cuniq f8 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
- |- ((\i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) i)
T * / c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 f4
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) |- ((((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i))))) = T)
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c= c==> cMEM f5 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 f5 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 cT
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((?z. ((((((ztrans L) N) r) x) i) = z)) ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f10 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c? / c= cztrans f0 f1 f2 f3 f4 b0 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((uniq (flatten (((((ntrans L) N) r) x) i))) /\ (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) /\ (((all (f_last L)) (((((ntrans L) N) r) x) i)) /\ (((all (loop_list L)) (((((ntrans L) N) r) x) i)) /\ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c/\ cuniq cflatten cntrans f0 f1 f2 f3 f4 c/\ call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c/\ call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c/\ call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
- |- ((\r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))) r)
T * / ! c= ctransform_list f0 b1 c, f1 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b0 c, f1 b0 c, b7 cSND b6 cAPPEND creplace b0 cCONS cSND b6 cNIL f1 cCONS cFST b6 cNIL csplit_normal_list f0 b0 b5 b2 b4 cfind_face f0 b2 cprev_el b0 b3 cl'z f0 f1 b0 b1 cl'y f0 b0 b1 f2
+ |- (?z. ((((((ztrans L) N) r) x) i) = z))
T c? / c= cztrans f0 f1 f2 f3 f4 b0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((A a) /\ (!a. (~ (A a)))) |- ((~ (A a)) ==> (A a))
T c==> c/\ * f0 f1 ! c~ * f0 b0 c==> c~ * f0 f1 * f0 f1
- |- ((\x. (!y. (((MEM x) ((CONS y) NIL)) = (x = y)))) x)
T * / ! c= cMEM b0 cCONS b1 cNIL c= b0 b1 f0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) /\ (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((!i. ((i < (((indexf w) z) f)) ==> ((((ITER (SUC (SUC i))) (next_el r2)) x) = ((f_list L) (((ITER (SUC i)) (next_el r2)) x))))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)))) = EMPTY))) ==> ((((indexf w) z) f) <= (((l'm L) r2) x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((indexf w) z) f) <= (((l'm L) r2) x))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> c==> c/\ ! c==> c< b0 cindexf f6 f10 f5 c= cITER cSUC cSUC b0 * part cnext_el f11 f3 cf_list f0 cITER cSUC b0 * part cnext_el f11 f3 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cITER cSUC cSUC b1 * part cnext_el f11 f3 cf_list f0 cITER cSUC b1 * part cnext_el f11 f3 b1 part cEMPTY c<= cindexf f6 f10 f5 cl'm f0 f11 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c<= cindexf f6 f10 f5 cl'm f0 f11 f3
- |- ((((\z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)) z1) ==> (?z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1))) = T)
T c= c==> * / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0 f6 c? / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0 cT
+ (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((MEM x') r2), ((((marked_list L) N) r) x) |- (((MEM x') r2) /\ ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cMEM f4 f5 c==> cmarked_list f0 f6 f7 f2 c/\ cMEM f4 f5 c==> c~ c= cf_list f0 f4 cnext_el f5 f4 c==> cuniq cflatten cntrans f0 f6 f7 f2 f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f2 f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f2 f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 f8 c==> cuniq f9 c==> cMEM f3 f5 c==> cmarked_list f0 cntrans f0 f6 f7 f2 cSUC f8 f5 f2 c==> cnormal_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> cMEM f5 cntrans f0 f6 f7 f2 cSUC f8 c==> cMEM f2 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> c= cnext_el f5 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f6 f7 f2 cSUC f8 ce_list f2 c==> cs_flag_list f0 cntrans f0 f6 f7 f2 cSUC f8 f5 f2 c==> cuniq cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f3 f4 f5 f3 f4 c==> c= co * part cnext_el f5 * * part cPOWER * part cnext_el f5 cSUC cindexf f3 f4 f5 f2 cf_list f0 cPOWER * part cnext_el f5 cindexf f3 f4 f5 cf_list f0 f2 c~ c= cindexf f3 cl'y f0 f5 f2 f1 cl'm f0 f5 f2
+ (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((?x. (((MEM x) r2) /\ (~ (((f_list L) x) = ((next_el r2) x))))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 f5 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 cSUC f5 c==> cis_restricted chypermap_of_list f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f6 f1 f7 c==> c= cnext_el crtrans f2 f3 f4 f1 f5 f1 cf_list f2 f1 c==> c= cprev_el f8 cztrans f2 f3 f4 f1 f5 f9 c==> c= cl'y f2 f8 f1 f10 c==> c= cztrans f2 f3 f4 f1 f5 f11 c==> c= cfind_face f2 f1 f6 c==> c= crtrans f2 f3 f4 f1 f5 f8 c==> c= crtrans f2 f3 f4 f1 cSUC f5 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f3 f4 f1 f5 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f3 f4 f1 f5 c==> cMEM f1 crtrans f2 f3 f4 f1 f5 c==> cMEM crtrans f2 f3 f4 f1 f5 cntrans f2 f3 f4 f1 f5 c==> cnormal_list f2 cntrans f2 f3 f4 f1 f5 c==> cs_flag_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 c==> cmarked_list f2 f3 f4 f1 c==> cmarked_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 c==> c? / c/\ cMEM b0 f0 c~ c= cf_list f2 b0 cnext_el f0 b0 c~ c= cindexf f7 cytrans f2 f3 f4 f1 cSUC f5 f6 cl'm f2 f0 f1
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> c~ c= cf_list f0 f5 cnext_el f6 f5 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f6 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f6 c==> cMEM f3 f7 c==> cMEM f3 f6 c==> cMEM f5 f6 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f6 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f6 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f6 f3 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f6 c==> c= cPOWER * part cnext_el f6 cindexf f9 f5 f6 f9 f5 c==> c= co * part cnext_el f6 * * part cPOWER * part cnext_el f6 cSUC cindexf f9 f5 f6 f3 cf_list f0 cPOWER * part cnext_el f6 cindexf f9 f5 f6 cf_list f0 f3 c~ c= cindexf f9 cl'y f0 f6 f3 f8 cl'm f0 f6 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f8 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
- ((all (\l. (~ (l = NIL)))) L) |- (((all (\l. (~ (l = NIL)))) L) = T)
T c==> call / c~ c= b0 cNIL f0 c= call / c~ c= b0 cNIL f0 cT
+ |- (((!L. (!N. (!r. (!x. (!i. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))))))) ==> (~ ((final_list L) (((((rtrans L) N) r) x) i))))))))) ==> ((\L. (!N. (!r. (!x. (!i. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))))))) ==> (~ ((final_list L) (((((rtrans L) N) r) x) i))))))))) L)) = ((\L. (!N. (!r. (!x. (!i. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))))))) ==> (~ ((final_list L) (((((rtrans L) N) r) x) i))))))))) L))
T c= c==> ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 crtrans b0 b1 b2 b3 cSUC b4 c~ cfinal_list b0 crtrans b0 b1 b2 b3 b4 * / ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 crtrans b0 b1 b2 b3 cSUC b4 c~ cfinal_list b0 crtrans b0 b1 b2 b3 b4 f0 * / ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 crtrans b0 b1 b2 b3 cSUC b4 c~ cfinal_list b0 crtrans b0 b1 b2 b3 b4 f0
+ (~ (((f_list L) x') = ((next_el r2) x'))), (((next_el f) x) = w), (((next_el r2) x) = ((f_list L) x)), ((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x'), (((find_face L) x) = f), ((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))))), ((((marked_list L) N) r) x) |- (((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))))) /\ (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> c= cnext_el f3 f4 f5 c==> c= cnext_el f2 f4 cf_list f0 f4 c==> c= cPOWER * part cnext_el f2 cindexf f5 f1 f2 f5 f1 c==> c= cfind_face f0 f4 f3 c==> c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cmarked_list f0 f6 f7 f4 c/\ c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f5 f1 f2 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f5 f1 f2 cf_list f0 f4 c~ c= cindexf f5 cl'y f0 f2 f4 f3 cl'm f0 f2 f4
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c/\ c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cmarked_list f0 f4 f5 f2 c==> c= cnext_el f6 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 f7 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 f7 f6 f2 c==> c= crtrans f0 f4 f5 f2 f7 f6 c==> c= crtrans f0 f4 f5 f2 cSUC f7 f8 c==> c= cl'y f0 f6 f2 f9 c==> c= cprev_el f6 f10 f11 c==> c= cztrans f0 f4 f5 f2 f7 f10 c==> c= cindexf f3 cytrans f0 f4 f5 f2 cSUC f7 f1 cl'm f0 f8 f2 c==> c< f12 cindexf f3 f10 f1 c==> c<= cSUC f12 cindexf f3 f10 f1 c==> c<= f12 cindexf f3 f10 f1 c==> cMEM cPOWER * part cnext_el f1 cSUC f12 f3 f8 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f12 f3 f8 cSUC f12 c==> cMEM cPOWER * part cnext_el f1 f12 f3 f8 c==> c= cindexf f3 cPOWER * part cnext_el f1 f12 f3 f8 f12 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f7 f8 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f7 c==> cMEM f8 cntrans f0 f4 f5 f2 cSUC f7 c==> cMEM f2 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f7 c==> c= cnext_el f8 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f7 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f7 f8 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 f7 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f7 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f7 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f7 c==> cuniq f6 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f7 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f7 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f7 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f7 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f7 c==> cuniq f8 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f2
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((((marked_list L) N) r) x) |- (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) /\ (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cindexf f3 cPOWER * part cnext_el f1 f4 f3 f5 f4 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f4 f3 f5 cSUC f4 c==> c= cfind_face f0 f2 f1 c==> c= crtrans f0 f6 f7 f2 cSUC f8 f5 c==> cMEM cPOWER * part cnext_el f1 f4 f3 f5 c==> cMEM cPOWER * part cnext_el f1 cSUC f4 f3 f5 c==> call * part cf_last f0 cntrans f0 f6 f7 f2 cSUC f8 c==> cmarked_list f0 f6 f7 f2 c/\ call * part cf_last f0 cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> cuniq f5 c= cPOWER * part cnext_el f5 f4 cnext_el f5 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f5 f4 cf_list f0 f2
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> ! c= cPOWER * part cnext_el f8 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f8 cSUC b0 f3 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c~ c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((\r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)) r2) |- (((\r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)) r2) /\ ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> * / c= crtrans f0 f1 f2 f3 cSUC f4 b0 f8 c/\ * / c= crtrans f0 f1 f2 f3 cSUC f4 b0 f8 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), ((((l'y L) r1) x) = y), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((?z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)) ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cl'y f0 f7 f3 f8 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f9 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c? / c= cprev_el f7 cztrans f0 f1 f2 f3 f4 b0 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f8 f5 c==> c<= cSUC f11 cindexf f6 f8 f5 c==> c< f11 cindexf f6 f8 f5 c==> cMEM f3 f7 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cMEM f3 f12 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f12 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cf_list f0 f3
+ |- (((!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) x)))) ==> ((\L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) x)))) L)) = ((\L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) x)))) L))
T c= c==> ! c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 * / c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 f1 * / c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 f1
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c< f12 cindexf f6 f10 f5 c==> c<= cSUC f12 cindexf f6 f10 f5 c==> c<= f12 cindexf f6 f10 f5 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3 c==> c< f12 cindexf f6 f8 f5 c==> c<= cSUC f12 cindexf f6 f8 f5 c==> c<= f12 cindexf f6 f8 f5 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f11 cSUC f12 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f11 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f11 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f11 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f11 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c= cPOWER * part cnext_el f11 f12 cnext_el f11 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f11 f12 cf_list f0 f3
- |- ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((all (f_last L)) (((((ntrans L) N) r) x) i)) /\ (((all (loop_list L)) (((((ntrans L) N) r) x) i)) /\ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c/\ call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c/\ call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ |- ((\p. (!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x)))) p)
T * / ! c= cIN b1 * part cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 * b0 b1 f0
+ (uniq f), (uniq (list_of_darts L)), (((next_el f) x) = w), (((find_face L) x) = f), ((MEM x) (list_of_darts L)) |- ((((POWER (next_el f)) (SUC i')) w) = ((f_list L) (((POWER (next_el f)) i') w)))
T c==> cuniq f0 c==> cuniq clist_of_darts f1 c==> c= cnext_el f0 f2 f3 c==> c= cfind_face f1 f2 f0 c==> cMEM f2 clist_of_darts f1 c= cPOWER * part cnext_el f0 cSUC f4 f3 cf_list f1 cPOWER * part cnext_el f0 f4 f3
- (!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))) |- ((((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i))) = T)
T c==> ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 c= c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 f4 c= cnext_el f4 f3 f5 cMEM f5 crtrans f0 f1 f2 f3 f6 cT
- ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F), (((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F) ==> ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F)) |- (((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F) /\ ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F))
T c==> c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c==> c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c/\ c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' < (((indexf w) z) f)), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((i' < (((indexf w) z) f)) /\ ((((POWER (next_el r2)) (SUC (SUC i'))) x) = ((f_list L) (((POWER (next_el r2)) (SUC i')) x))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c< f12 cindexf f6 f10 f5 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ c< f12 cindexf f6 f10 f5 c= cPOWER * part cnext_el f11 cSUC cSUC f12 f3 cf_list f0 cPOWER * part cnext_el f11 cSUC f12 f3
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) (((((ntrans L) N) r) x) i)) /\ (((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)) /\ (((MEM x) (((((rtrans L) N) r) x) i)) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) /\ ((((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))))))), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cfind_face f0 f3 f5 c==> c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 cntrans f0 f1 f2 f3 f4 c/\ cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c/\ cMEM f3 crtrans f0 f1 f2 f3 f4 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c/\ c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
+ |- ((\z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)) ((prev_el r1) (((((ztrans L) N) r) x) i)))
T * / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0 cprev_el f0 cztrans f1 f2 f3 f4 f5
+ |- (((!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) ==> ((\x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) x)) = ((\x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) x))
T c= c==> ! c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 * / c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 f3 * / c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 f3
+ |- (((((uniq (flatten (((((ntrans L) N) r) x) i))) /\ ((MEM r1) (((((ntrans L) N) r) x) i))) ==> (uniq r1)) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))) = ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))
T c= c==> c==> c/\ cuniq cflatten cntrans f0 f1 f2 f3 f4 cMEM f5 cntrans f0 f1 f2 f3 f4 cuniq f5 c= cPOWER * part cnext_el f6 f7 cnext_el f6 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f6 f7 cf_list f0 f3 c= cPOWER * part cnext_el f6 f7 cnext_el f6 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f6 f7 cf_list f0 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((find_face L) x) = f), ((((find_face L) x) = f) /\ (((next_el f) x) = w)), ((((marked_list L) N) r) x) |- ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cfind_face f0 f3 f5 c==> c/\ c= cfind_face f0 f3 f5 c= cnext_el f5 f3 f6 c==> cmarked_list f0 f1 f2 f3 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
+ |- (((!y. (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y))))) ==> ((\y. (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y))))) (((POWER (next_el f)) i') w))) = ((\y. (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y))))) (((POWER (next_el f)) i') w)))
T c= c==> ! ! c==> c/\ cuniq clist_of_darts f0 cMEM b0 clist_of_darts f0 c= cPOWER * part cf_list f0 b1 b0 cPOWER * part cnext_el cfind_face f0 b0 b1 b0 * / ! c==> c/\ cuniq clist_of_darts f0 cMEM b0 clist_of_darts f0 c= cPOWER * part cf_list f0 b1 b0 cPOWER * part cnext_el cfind_face f0 b0 b1 b0 cPOWER * part cnext_el f1 f2 f3 * / ! c==> c/\ cuniq clist_of_darts f0 cMEM b0 clist_of_darts f0 c= cPOWER * part cf_list f0 b1 b0 cPOWER * part cnext_el cfind_face f0 b0 b1 b0 cPOWER * part cnext_el f1 f2 f3
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((marked_list L) N) r) x) |- (((((((rtrans L) N) r) x) i) = r1) /\ (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> c= crtrans f0 f4 f5 f2 f6 f7 c==> cmarked_list f0 f4 f5 f2 c/\ c= crtrans f0 f4 f5 f2 f6 f7 c==> c= crtrans f0 f4 f5 f2 cSUC f6 f8 c==> c= cl'y f0 f7 f2 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f4 f5 f2 f6 f10 c==> c= cindexf f3 cytrans f0 f4 f5 f2 cSUC f6 f1 cl'm f0 f8 f2 c==> c< f12 cindexf f3 f10 f1 c==> c<= cSUC f12 cindexf f3 f10 f1 c==> c<= f12 cindexf f3 f10 f1 c==> cMEM cPOWER * part cnext_el f1 cSUC f12 f3 f8 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f12 f3 f8 cSUC f12 c==> cMEM cPOWER * part cnext_el f1 f12 f3 f8 c==> c= cindexf f3 cPOWER * part cnext_el f1 f12 f3 f8 f12 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f8 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f2 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> c= cnext_el f8 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f6 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> cuniq f8 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f2
+ (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM x') r2), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ c= cf_list f2 f3 cnext_el f0 f3 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 f6 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 cSUC f6 c==> cis_restricted chypermap_of_list f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f7 f1 f8 c==> c= cnext_el crtrans f2 f4 f5 f1 f6 f1 cf_list f2 f1 c==> c= cprev_el f9 cztrans f2 f4 f5 f1 f6 f10 c==> c= cl'y f2 f9 f1 f11 c==> c= cztrans f2 f4 f5 f1 f6 f12 c==> c= cfind_face f2 f1 f7 c==> c= crtrans f2 f4 f5 f1 f6 f9 c==> c= crtrans f2 f4 f5 f1 cSUC f6 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 f6 c==> cMEM f1 crtrans f2 f4 f5 f1 f6 c==> cMEM f3 f0 c==> cMEM crtrans f2 f4 f5 f1 f6 cntrans f2 f4 f5 f1 f6 c==> cnormal_list f2 cntrans f2 f4 f5 f1 f6 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 f6 crtrans f2 f4 f5 f1 f6 f1 c==> cmarked_list f2 f4 f5 f1 c==> cmarked_list f2 cntrans f2 f4 f5 f1 f6 crtrans f2 f4 f5 f1 f6 f1 c~ c= cindexf f8 cytrans f2 f4 f5 f1 cSUC f6 f7 cl'm f2 f0 f1
+ |- (((!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))))) ==> ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))))) L)) = ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))))) L))
T c= c==> ! ! ! ! c==> cmarked_list b0 b1 b2 b3 cMEM b3 clist_of_darts b0 * / ! ! ! c==> cmarked_list b0 b1 b2 b3 cMEM b3 clist_of_darts b0 f0 * / ! ! ! c==> cmarked_list b0 b1 b2 b3 cMEM b3 clist_of_darts b0 f0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (!x'. (((\x. (((MEM x) r2) /\ (~ (((f_list L) x) = ((next_el r2) x))))) x') ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 f5 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 cSUC f5 c==> cis_restricted chypermap_of_list f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f6 f1 f7 c==> c= cnext_el crtrans f2 f3 f4 f1 f5 f1 cf_list f2 f1 c==> c= cprev_el f8 cztrans f2 f3 f4 f1 f5 f9 c==> c= cl'y f2 f8 f1 f10 c==> c= cztrans f2 f3 f4 f1 f5 f11 c==> c= cfind_face f2 f1 f6 c==> c= crtrans f2 f3 f4 f1 f5 f8 c==> c= crtrans f2 f3 f4 f1 cSUC f5 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f3 f4 f1 f5 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f3 f4 f1 f5 c==> cMEM f1 crtrans f2 f3 f4 f1 f5 c==> cMEM crtrans f2 f3 f4 f1 f5 cntrans f2 f3 f4 f1 f5 c==> cnormal_list f2 cntrans f2 f3 f4 f1 f5 c==> cs_flag_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 c==> cmarked_list f2 f3 f4 f1 c==> cmarked_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 ! c==> * / c/\ cMEM b1 f0 c~ c= cf_list f2 b1 cnext_el f0 b1 b0 c~ c= cindexf f7 cytrans f2 f3 f4 f1 cSUC f5 f6 cl'm f2 f0 f1
- ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) = T)
T c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c= cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 cT
+ (((next_el r2) x') = ((f_list L) x')) |- (((f_list L) x') = ((next_el r2) x'))
T c==> c= cnext_el f0 f1 cf_list f2 f1 c= cf_list f2 f1 cnext_el f0 f1
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cmarked_list f0 f4 f5 f2 c==> c= crtrans f0 f4 f5 f2 cSUC f6 f7 c==> c= cl'y f0 f8 f2 f9 c==> c= cprev_el f8 f10 f11 c==> c= cztrans f0 f4 f5 f2 f6 f10 c==> c= cindexf f3 cytrans f0 f4 f5 f2 cSUC f6 f1 cl'm f0 f7 f2 c==> c< f12 cindexf f3 f10 f1 c==> c<= cSUC f12 cindexf f3 f10 f1 c==> c<= f12 cindexf f3 f10 f1 c==> cMEM cPOWER * part cnext_el f1 cSUC f12 f3 f7 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f12 f3 f7 cSUC f12 c==> cMEM cPOWER * part cnext_el f1 f12 f3 f7 c==> c= cindexf f3 cPOWER * part cnext_el f1 f12 f3 f7 f12 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f6 f7 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f7 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f2 f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> c= cnext_el f7 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f6 f7 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f6 c==> cuniq f8 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> cuniq f7 c= cPOWER * part cnext_el f7 f12 cnext_el f7 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f7 f12 cf_list f0 f2
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((~ (?a. (a IN (GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((POWER (next_el r2)) (SUC (SUC m))) x) = ((f_list L) (((POWER (next_el r2)) (SUC m)) x))))) m))))))) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> F))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c~ c? / cIN b0 * part cGSPEC / c? / cSETSPEC b1 c~ c= cPOWER * part cnext_el f11 cSUC cSUC b2 f3 cf_list f0 cPOWER * part cnext_el f11 cSUC b2 f3 b2 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3 cF
- (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019)))) (real_of_num (NUMERAL _0)))))) |- ((real_ge ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019)))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0
+ |- (((!w. (((~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))) /\ ((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x)))))))) ==> ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) (((((rtrans L) N) r) x) (SUC i))) x)))) ==> ((\w. (((~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))) /\ ((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x)))))))) ==> ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) (((((rtrans L) N) r) x) (SUC i))) x)))) w)) = ((\w. (((~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))) /\ ((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x)))))))) ==> ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) (((((rtrans L) N) r) x) (SUC i))) x)))) w))
T c= c==> ! c==> c/\ c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= f5 cfind_face f0 f3 c= b0 cnext_el f5 f3 c= cindexf b0 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 crtrans f0 f1 f2 f3 cSUC f4 f3 * / c==> c/\ c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= f5 cfind_face f0 f3 c= b0 cnext_el f5 f3 c= cindexf b0 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 crtrans f0 f1 f2 f3 cSUC f4 f3 f6 * / c==> c/\ c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= f5 cfind_face f0 f3 c= b0 cnext_el f5 f3 c= cindexf b0 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 crtrans f0 f1 f2 f3 cSUC f4 f3 f6
- |- (((((((ztrans L) N) r) x) i) = z) = ((\z. ((((((ztrans L) N) r) x) i) = z)) z))
T c= c= cztrans f0 f1 f2 f3 f4 f5 * / c= cztrans f0 f1 f2 f3 f4 b0 f5
+ ((((((rtrans L) N) r) x) i) = r1), ((MEM x) (((((rtrans L) N) r) x) i)) |- ((MEM x) r1)
T c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 cMEM f3 f5
- ((!x. (~ (A x))) /\ (A a)) |- ((~ F) ==> F)
T c==> c/\ ! c~ * f0 b0 * f0 f1 c==> c~ cF cF
- (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))))) |- (((((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((((marked_list L) N) r) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) /\ (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 f6 ce_list f2 c==> cmarked_list f0 f4 f5 f2 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 f6 f7 f2 c==> c= crtrans f0 f4 f5 f2 f6 f7 c==> c= crtrans f0 f4 f5 f2 cSUC f6 f8 c==> c= cl'y f0 f7 f2 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f4 f5 f2 f6 f10 c==> c= cindexf f3 cytrans f0 f4 f5 f2 cSUC f6 f1 cl'm f0 f8 f2 c==> c< f12 cindexf f3 f10 f1 c==> c<= cSUC f12 cindexf f3 f10 f1 c==> c<= f12 cindexf f3 f10 f1 c==> cMEM cPOWER * part cnext_el f1 cSUC f12 f3 f8 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f12 f3 f8 cSUC f12 c==> cMEM cPOWER * part cnext_el f1 f12 f3 f8 c==> c= cindexf f3 cPOWER * part cnext_el f1 f12 f3 f8 f12 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f8 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f2 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> c= cnext_el f8 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f6 f8 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f6 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> cuniq f8 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f2
+ |- ((\n. ((((min_num (GSPEC (\GEN%PVAR%8675. (?m. (((SETSPEC GEN%PVAR%8675) ((\m. (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)) m))))) = n) /\ ((!i. ((i < (((indexf w) z) f)) ==> (~ ((\m. (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) i)))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) ((\m. (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)) m)))) = EMPTY)))) ==> ((((indexf w) z) f) <= n))) (((l'm L) r2) x))
T * / c==> c/\ c= cmin_num * part cGSPEC / c? / cSETSPEC b1 * / c~ c= cITER cSUC cSUC b3 * part cnext_el f0 f1 cf_list f2 cITER cSUC b3 * part cnext_el f0 f1 b2 b2 b0 c/\ ! c==> c< b1 cindexf f3 f4 f5 c~ * / c~ c= cITER cSUC cSUC b2 * part cnext_el f0 f1 cf_list f2 cITER cSUC b2 * part cnext_el f0 f1 b1 c~ c= * part cGSPEC / c? / cSETSPEC b1 * / c~ c= cITER cSUC cSUC b3 * part cnext_el f0 f1 cf_list f2 cITER cSUC b3 * part cnext_el f0 f1 b2 b2 part cEMPTY c<= cindexf f3 f4 f5 b0 cl'm f2 f0 f1
- |- ((\r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) r)
T * / ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 f1
+ |- (((!x. (~ (A x))) /\ (A a)) ==> F)
T c==> c/\ ! c~ * f0 b0 * f0 f1 cF
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((uniq (flatten (((((ntrans L) N) r) x) i))) /\ (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) /\ (((all (f_last L)) (((((ntrans L) N) r) x) i)) /\ (((all (loop_list L)) (((((ntrans L) N) r) x) i)) /\ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))))))) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> c/\ cuniq cflatten cntrans f0 f1 f2 f3 f4 c/\ call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c/\ call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c/\ call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cfind_face f0 f3 f5 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
+ ((MEM x) (list_of_darts L)) |- (((MEM x) (list_of_darts L)) = T)
T c==> cMEM f0 clist_of_darts f1 c= cMEM f0 clist_of_darts f1 cT
+ ((MEM (((POWER (next_el f)) i') w)) f) |- (((MEM (((POWER (next_el f)) i') w)) f) = T)
T c==> cMEM cPOWER * part cnext_el f0 f1 f2 f0 c= cMEM cPOWER * part cnext_el f0 f1 f2 f0 cT
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
+ (~ (((f_list L) x') = ((next_el r2) x'))), (good_list L), (((next_el f) x) = w), (((next_el r2) x) = ((f_list L) x)), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cgood_list f0 c==> c= cnext_el f3 f4 f5 c==> c= cnext_el f2 f4 cf_list f0 f4 c==> c= cfind_face f0 f4 f3 c==> cmarked_list f0 f6 f7 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f6 f7 f4 cSUC f8 ce_list f4 c==> cs_flag_list f0 cntrans f0 f6 f7 f4 cSUC f8 f2 f4 c==> cuniq cflatten cntrans f0 f6 f7 f4 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f4 cSUC f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f4 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f4 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f4 cSUC f8 c==> cuniq f2 c==> c= cPOWER * part cnext_el f2 cindexf f5 f1 f2 f5 f1 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f5 f1 f2 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f5 f1 f2 cf_list f0 f4 c~ c= cindexf f5 cl'y f0 f2 f4 f3 cl'm f0 f2 f4
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) /\ ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i'))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((POWER (next_el r2)) (SUC (SUC i'))) x) = ((f_list L) (((POWER (next_el r2)) (SUC i')) x)))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> c/\ cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f11 c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f11 cSUC f12 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f12 cindexf f6 f10 f5 c==> c<= cSUC f12 cindexf f6 f10 f5 c==> c< f12 cindexf f6 f10 f5 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f11 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= cPOWER * part cnext_el f11 cSUC cSUC f12 f3 cf_list f0 cPOWER * part cnext_el f11 cSUC f12 f3
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM w) r2), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x) |- (((all (loop_list L)) (((((ntrans L) N) r) x) i)) /\ ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cindexf f3 cPOWER * part cnext_el f1 f4 f3 f5 f4 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f4 f3 f5 cSUC f4 c==> c= cfind_face f0 f2 f1 c==> c= crtrans f0 f6 f7 f2 cSUC f8 f5 c==> cMEM cPOWER * part cnext_el f1 f4 f3 f5 c==> cMEM cPOWER * part cnext_el f1 cSUC f4 f3 f5 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 f8 c==> cmarked_list f0 f6 f7 f2 c/\ call * part cloop_list f0 cntrans f0 f6 f7 f2 f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 f8 c==> cuniq f9 c==> cuniq cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> cuniq f5 c= cPOWER * part cnext_el f5 f4 cnext_el f5 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f5 f4 cf_list f0 f2
- (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ c= cf_list f2 f3 cnext_el f0 f3 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 f6 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 cSUC f6 c==> cis_restricted chypermap_of_list f2 c==> cuniq cflatten cntrans f2 f4 f5 f1 f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f7 f1 f8 c==> c= cnext_el f9 f1 cf_list f2 f1 c==> c= cprev_el f9 f10 f11 c==> c= cl'y f2 f9 f1 f12 c==> c= cztrans f2 f4 f5 f1 f6 f10 c==> c= cfind_face f2 f1 f7 c==> c= crtrans f2 f4 f5 f1 f6 f9 c==> c= crtrans f2 f4 f5 f1 cSUC f6 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 f6 c==> cMEM f1 f9 c==> cMEM f3 f0 c==> cMEM f9 cntrans f2 f4 f5 f1 f6 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 f6 c==> cnormal_list f2 cntrans f2 f4 f5 f1 f6 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 f6 f9 f1 c==> cmarked_list f2 f4 f5 f1 c==> cmarked_list f2 cntrans f2 f4 f5 f1 f6 crtrans f2 f4 f5 f1 f6 f1 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 f6 c==> call * part cloop_list f2 cntrans f2 f4 f5 f1 f6 c==> ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 f6 c==> cuniq f9 c==> cMEM f8 f0 c==> cmarked_list f2 cntrans f2 f4 f5 f1 cSUC f6 f0 f1 c==> cnormal_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> cMEM f0 cntrans f2 f4 f5 f1 cSUC f6 c==> cMEM f1 f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> c= cnext_el f0 f1 cf_list f2 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 cSUC f6 ce_list f1 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 cSUC f6 f0 f1 c==> cuniq cflatten cntrans f2 f4 f5 f1 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 cSUC f6 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 cSUC f6 c==> call * part cloop_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 cSUC f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 cSUC f6 c==> cuniq f0 c==> c= cPOWER * part cnext_el f0 cindexf f8 f3 f0 f8 f3 c~ c= cindexf f8 cl'y f2 f0 f1 f7 cl'm f2 f0 f1
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) /\ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i)))))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> c/\ call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- |- ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))
T c= c\/ f0 c\/ f1 f2 c\/ c\/ f0 f1 f2
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) |- (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 f5 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4
+ (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))) |- (((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))) = ((((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) /\ ((MEM r2) (((((ntrans L) N) r) x) (SUC i)))) ==> (uniq r2)) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))
T c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c= c==> cuniq f5 c= cPOWER * part cnext_el f5 f6 cnext_el f5 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f5 f6 cf_list f0 f3 c==> c==> c/\ cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 cuniq f5 c= cPOWER * part cnext_el f5 f6 cnext_el f5 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f5 f6 cf_list f0 f3
+ |- (((!s. ((~ ((all a) s)) = (?x. (((MEM x) s) /\ (~ (a x)))))) ==> ((\s. ((~ ((all a) s)) = (?x. (((MEM x) s) /\ (~ (a x)))))) s)) = ((\s. ((~ ((all a) s)) = (?x. (((MEM x) s) /\ (~ (a x)))))) s))
T c= c==> ! c= c~ call f0 b0 c? / c/\ cMEM b1 b0 c~ * f0 b1 * / c= c~ call f0 b0 c? / c/\ cMEM b1 b0 c~ * f0 b1 f1 * / c= c~ call f0 b0 c? / c/\ cMEM b1 b0 c~ * f0 b1 f1
+ |- ((\n. (((ITER n) f) = ((POWER f) n))) n)
T * / c= * * part cITER b0 f0 * * part cPOWER f0 b0 f1
- ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) = T)
T c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c= cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 cT
+ |- ((\r. (!x. (!d. (!i. (!f. (!w. (((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x)))))))) ==> ((((indexf w) (((((ytrans L) N) r) x) i)) f) = (((l'm L) (((((rtrans L) N) r) x) i)) x))))))))) r)
T * / ! ! ! ! ! c==> c/\ c~ cfinal_list f0 crtrans f0 f1 b0 b1 b3 c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c/\ c= b4 cfind_face f0 b1 c= b5 cnext_el b4 b1 c= cindexf b5 cytrans f0 f1 b0 b1 b3 b4 cl'm f0 crtrans f0 f1 b0 b1 b3 b1 f2
+ (uniq f), (uniq (list_of_darts L)), (((next_el f) x) = w), ((((POWER (next_el r2)) i') ((next_el r2) w)) = (((POWER (next_el f)) (SUC i')) w)), (((find_face L) x) = f), ((MEM x) (list_of_darts L)) |- (((((POWER (next_el r2)) i') ((next_el r2) w)) = (((POWER (next_el f)) (SUC i')) w)) /\ ((((POWER (next_el r2)) i') ((next_el r2) w)) = ((f_list L) (((POWER (next_el f)) i') w))))
T c==> cuniq f0 c==> cuniq clist_of_darts f1 c==> c= cnext_el f0 f2 f3 c==> c= cPOWER * part cnext_el f4 f5 cnext_el f4 f3 cPOWER * part cnext_el f0 cSUC f5 f3 c==> c= cfind_face f1 f2 f0 c==> cMEM f2 clist_of_darts f1 c/\ c= cPOWER * part cnext_el f4 f5 cnext_el f4 f3 cPOWER * part cnext_el f0 cSUC f5 f3 c= cPOWER * part cnext_el f4 f5 cnext_el f4 f3 cf_list f1 cPOWER * part cnext_el f0 f5 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f5 f3 f6 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c==> cMEM f6 f8 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f8 c==> c= cPOWER * part cnext_el f8 cindexf f6 f12 f8 f6 f12 c==> c= co * part cnext_el f8 * * part cPOWER * part cnext_el f8 cSUC cindexf f6 f12 f8 f3 cf_list f0 cPOWER * part cnext_el f8 cindexf f6 f12 f8 cf_list f0 f3 c~ c= cindexf f6 cl'y f0 f8 f3 f5 cl'm f0 f8 f3
+ (~ (((f_list L) x') = ((next_el r2) x'))), (good_list L), (((next_el f) x) = w), (((next_el r2) x) = ((f_list L) x)), (((find_face L) x) = f), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((((marked_list L) N) r) x) |- (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) /\ (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cgood_list f0 c==> c= cnext_el f3 f4 f5 c==> c= cnext_el f2 f4 cf_list f0 f4 c==> c= cfind_face f0 f4 f3 c==> call * part cf_last f0 cntrans f0 f6 f7 f4 cSUC f8 c==> cmarked_list f0 f6 f7 f4 c/\ call * part cf_last f0 cntrans f0 f6 f7 f4 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f4 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f4 cSUC f8 c==> cuniq f2 c==> c= cPOWER * part cnext_el f2 cindexf f5 f1 f2 f5 f1 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f5 f1 f2 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f5 f1 f2 cf_list f0 f4 c~ c= cindexf f5 cl'y f0 f2 f4 f3 cl'm f0 f2 f4
+ (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cmarked_list f0 f4 f5 f2 c==> c= cprev_el f6 f7 f8 c==> c= cztrans f0 f4 f5 f2 f9 f7 c==> cMEM f10 f11 c==> c~ c= cf_list f0 f10 cnext_el f11 f10 c==> cuniq cflatten cntrans f0 f4 f5 f2 f9 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f9 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f9 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f9 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f9 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f9 c==> cuniq f6 c==> cMEM f3 f11 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f9 f11 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f9 c==> cMEM f11 cntrans f0 f4 f5 f2 cSUC f9 c==> cMEM f2 f11 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f9 c==> c= cnext_el f11 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f9 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f9 f11 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f9 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f9 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f9 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f9 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f9 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f9 c==> cuniq f11 c==> c= cPOWER * part cnext_el f11 cindexf f3 f10 f11 f3 f10 c==> c= co * part cnext_el f11 * * part cPOWER * part cnext_el f11 cSUC cindexf f3 f10 f11 f2 cf_list f0 cPOWER * part cnext_el f11 cindexf f3 f10 f11 cf_list f0 f2 c~ c= cindexf f3 cl'y f0 f11 f2 f1 cl'm f0 f11 f2
+ |- (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x)))) ==> ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) (((((rtrans L) N) r) x) (SUC i))) x))
T c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 f1 f2 f3 cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 crtrans f0 f1 f2 f3 cSUC f4 f3
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ ((((((rtrans L) N) r) x) i) = r1), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))))))))))) = (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))))))))))
T c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f5 f3 c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f6 c==> c= cl'y f0 f5 f3 f7 c==> c= cprev_el f5 f8 f9 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> ! c= cPOWER * part cnext_el f6 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f6 cSUC b0 f3 c==> cMEM f10 f6 c==> c~ c= cf_list f0 f10 cnext_el f6 f10 c~ c= cindexf f11 cytrans f0 f1 f2 f3 cSUC f4 f12 cl'm f0 f6 f3 c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f6 c==> c= cl'y f0 f5 f3 f7 c==> c= cprev_el f5 f8 f9 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> ! c= cPOWER * part cnext_el f6 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f6 cSUC b0 f3 c==> cMEM f10 f6 c==> c~ c= cf_list f0 f10 cnext_el f6 f10 c~ c= cindexf f11 cytrans f0 f1 f2 f3 cSUC f4 f12 cl'm f0 f6 f3
+ ((A a) /\ (!a. (~ (A a)))) |- ((A _10304017) ==> F)
T c==> c/\ * f0 f1 ! c~ * f0 b0 c==> * f0 f2 cF
+ (!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))) |- (((!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))) ==> ((\i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))) (SUC i))) = ((\i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))) (SUC i)))
T c==> ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 c= c==> ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 b1 c= cnext_el b1 f3 b2 cMEM b2 crtrans f0 f1 f2 f3 b0 * / ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 b1 c= cnext_el b1 f3 b2 cMEM b2 crtrans f0 f1 f2 f3 b0 cSUC f4 * / ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 b1 c= cnext_el b1 f3 b2 cMEM b2 crtrans f0 f1 f2 f3 b0 cSUC f4
+ (~ (((f_list L) x') = ((next_el r2) x'))), (good_list L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cgood_list f0 c==> c= cnext_el f3 f4 f5 c==> c= cfind_face f0 f4 f3 c==> cmarked_list f0 f6 f7 f4 c==> call * part cloop_list f0 cntrans f0 f6 f7 f4 f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f4 f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f4 f8 c==> cuniq f9 c==> cMEM f5 f2 c==> cmarked_list f0 cntrans f0 f6 f7 f4 cSUC f8 f2 f4 c==> cnormal_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> cMEM f2 cntrans f0 f6 f7 f4 cSUC f8 c==> cMEM f4 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> c= cnext_el f2 f4 cf_list f0 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f6 f7 f4 cSUC f8 ce_list f4 c==> cs_flag_list f0 cntrans f0 f6 f7 f4 cSUC f8 f2 f4 c==> cuniq cflatten cntrans f0 f6 f7 f4 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f4 cSUC f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f4 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f4 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f4 cSUC f8 c==> cuniq f2 c==> c= cPOWER * part cnext_el f2 cindexf f5 f1 f2 f5 f1 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f5 f1 f2 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f5 f1 f2 cf_list f0 f4 c~ c= cindexf f5 cl'y f0 f2 f4 f3 cl'm f0 f2 f4
+ (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) /\ (((all (f_last L)) (((((ntrans L) N) r) x) i)) /\ (((all (loop_list L)) (((((ntrans L) N) r) x) i)) /\ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i))))))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ c= cf_list f2 f3 cnext_el f0 f3 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 f6 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 cSUC f6 c==> cis_restricted chypermap_of_list f2 c==> cuniq cflatten cntrans f2 f4 f5 f1 f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f7 f1 f8 c==> c= cnext_el f9 f1 cf_list f2 f1 c==> c= cprev_el f9 f10 f11 c==> c= cl'y f2 f9 f1 f12 c==> c= cztrans f2 f4 f5 f1 f6 f10 c==> c= cfind_face f2 f1 f7 c==> c= crtrans f2 f4 f5 f1 f6 f9 c==> c= crtrans f2 f4 f5 f1 cSUC f6 f0 c==> c/\ call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 f6 c/\ call * part cf_last f2 cntrans f2 f4 f5 f1 f6 c/\ call * part cloop_list f2 cntrans f2 f4 f5 f1 f6 ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 f6 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 f6 c==> cMEM f1 f9 c==> cMEM f3 f0 c==> cMEM f9 cntrans f2 f4 f5 f1 f6 c==> cnormal_list f2 cntrans f2 f4 f5 f1 f6 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 f6 f9 f1 c==> cmarked_list f2 f4 f5 f1 c==> cmarked_list f2 cntrans f2 f4 f5 f1 f6 crtrans f2 f4 f5 f1 f6 f1 c~ c= cindexf f8 cytrans f2 f4 f5 f1 cSUC f6 f7 cl'm f2 f0 f1
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((MEM x) r2) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f8 f5 c==> c<= cSUC f11 cindexf f6 f8 f5 c==> c< f11 cindexf f6 f8 f5 c==> cMEM f3 f7 c==> cMEM f3 f12 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c/\ cMEM f3 f12 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f12 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cf_list f0 f3
- |- (((((l'y L) r1) x) = y) = ((\y. ((((l'y L) r1) x) = y)) y))
T c= c= cl'y f0 f1 f2 f3 * / c= cl'y f0 f1 f2 b0 f3
+ |- ((\s. (((uniq (flatten (((((ntrans L) N) r) x) i))) /\ ((MEM s) (((((ntrans L) N) r) x) i))) ==> (uniq s))) r1)
T * / c==> c/\ cuniq cflatten cntrans f0 f1 f2 f3 f4 cMEM b0 cntrans f0 f1 f2 f3 f4 cuniq b0 f5
+ |- ((\N. (!r. (!x. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x)))) ==> ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) (((((rtrans L) N) r) x) (SUC i))) x))))) N)
T * / ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 b0 b1 b2 cmarked_list f0 cntrans f0 b0 b1 b2 cSUC f1 crtrans f0 b0 b1 b2 cSUC f1 b2 f2
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> c/\ c= cnext_el f5 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ |- ((((is_restricted (hypermap_of_list L)) /\ (((normal_list L) (((((ntrans L) N) r) x) i)) /\ (((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)) /\ (((MEM x) (((((rtrans L) N) r) x) i)) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) /\ ((((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) /\ ((((final_list L) (((((rtrans L) N) r) x) i)) ==> ((flag_list L) (((((ntrans L) N) r) x) i))) /\ ((~ ((final_list L) (((((rtrans L) N) r) x) i))) ==> ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))))))))) ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f))) = (((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f))))
T c= c==> c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 cntrans f0 f1 f2 f3 f4 c/\ cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c/\ cMEM f3 crtrans f0 f1 f2 f3 f4 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c/\ c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c/\ c==> cfinal_list f0 crtrans f0 f1 f2 f3 f4 cflag_list f0 cntrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c<= cindexf f5 cztrans f0 f1 f2 f3 f4 f6 cindexf f5 cytrans f0 f1 f2 f3 cSUC f4 f6 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c<= cindexf f5 cztrans f0 f1 f2 f3 f4 f6 cindexf f5 cytrans f0 f1 f2 f3 cSUC f4 f6
+ (uniq f), (uniq (list_of_darts L)), (((next_el f) x) = w), (((find_face L) x) = f), ((MEM x) (list_of_darts L)) |- (((next_el f) (((POWER (next_el f)) i') w)) = ((f_list L) (((POWER (next_el f)) i') w)))
T c==> cuniq f0 c==> cuniq clist_of_darts f1 c==> c= cnext_el f0 f2 f3 c==> c= cfind_face f1 f2 f0 c==> cMEM f2 clist_of_darts f1 c= cnext_el f0 cPOWER * part cnext_el f0 f4 f3 cf_list f1 cPOWER * part cnext_el f0 f4 f3
+ (uniq (flatten (((((ntrans L) N) r) x) i))) |- ((uniq (flatten (((((ntrans L) N) r) x) i))) = T)
T c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c= cuniq cflatten cntrans f0 f1 f2 f3 f4 cT
+ |- ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f)
T * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0
+ (~ (((f_list L) x') = ((next_el r2) x'))), (good_list L), (((next_el f) x) = w), (((next_el r2) x) = ((f_list L) x)), (((find_face L) x) = f), ((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))), ((((marked_list L) N) r) x) |- (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) /\ ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cgood_list f0 c==> c= cnext_el f3 f4 f5 c==> c= cnext_el f2 f4 cf_list f0 f4 c==> c= cfind_face f0 f4 f3 c==> call * part cloop_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> cmarked_list f0 f6 f7 f4 c/\ call * part cloop_list f0 cntrans f0 f6 f7 f4 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f4 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f4 cSUC f8 c==> cuniq f2 c==> c= cPOWER * part cnext_el f2 cindexf f5 f1 f2 f5 f1 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f5 f1 f2 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f5 f1 f2 cf_list f0 f4 c~ c= cindexf f5 cl'y f0 f2 f4 f3 cl'm f0 f2 f4
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f8 f5 c==> c<= cSUC f11 cindexf f6 f8 f5 c==> c< f11 cindexf f6 f8 f5 c==> cMEM f3 f7 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c/\ cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f12 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f12 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cf_list f0 f3
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM w) r2), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cMEM f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
+ |- ((\x. (!r. (!k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r))))) x)
T * / ! ! c==> c/\ cMEM b0 b1 cuniq b1 cMEM cPOWER * part cnext_el b1 b2 b0 b1 f0
+ |- ((((((POWER (next_el r2)) (SUC (SUC (((indexf w) x') r2)))) x) = ((f_list L) ((\x. (((POWER (next_el r2)) (((indexf w) x') r2)) ((next_el r2) x))) x))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))) = (((((POWER (next_el r2)) (SUC (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (SUC (((indexf w) x') r2))) x))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))
T c= c==> c= cPOWER * part cnext_el f0 cSUC cSUC cindexf f1 f2 f0 f3 cf_list f4 * / cPOWER * part cnext_el f0 cindexf f1 f2 f0 cnext_el f0 b0 f3 c~ c= cindexf f1 cl'y f4 f0 f3 f5 cl'm f4 f0 f3 c==> c= cPOWER * part cnext_el f0 cSUC cSUC cindexf f1 f2 f0 f3 cf_list f4 cPOWER * part cnext_el f0 cSUC cindexf f1 f2 f0 f3 c~ c= cindexf f1 cl'y f4 f0 f3 f5 cl'm f4 f0 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3 c==> c< f12 cindexf f6 f10 f5 c==> c<= cSUC f12 cindexf f6 f10 f5 c==> c<= f12 cindexf f6 f10 f5 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f11 cSUC f12 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f11 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f11 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f11 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f11 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c= cPOWER * part cnext_el f11 f12 cnext_el f11 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f11 f12 cf_list f0 f3
+ |- ((\i. (!N. (!r. (!x. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x)))) ==> ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))))) (SUC i))
T * / ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 b1 b2 b3 cmarked_list f0 cntrans f0 b1 b2 b3 b0 crtrans f0 b1 b2 b3 b0 b3 cSUC f1
+ |- (((!f. (!w. (!x. (!i. (!j. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((((find_face L) x) = f) /\ ((((next_el f) x) = w) /\ (j <= (((indexf w) (((((ztrans L) N) r) x) i)) f))))))))) ==> (((MEM (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) /\ ((((indexf w) (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) = j)))))))) ==> ((\f. (!w. (!x. (!i. (!j. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((((find_face L) x) = f) /\ ((((next_el f) x) = w) /\ (j <= (((indexf w) (((((ztrans L) N) r) x) i)) f))))))))) ==> (((MEM (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) /\ ((((indexf w) (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) = j)))))))) f)) = ((\f. (!w. (!x. (!i. (!j. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((((find_face L) x) = f) /\ ((((next_el f) x) = w) /\ (j <= (((indexf w) (((((ztrans L) N) r) x) i)) f))))))))) ==> (((MEM (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) /\ ((((indexf w) (((POWER (next_el f)) j) w)) (((((rtrans L) N) r) x) (SUC i))) = j)))))))) f))
T c= c==> ! ! ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b2 c/\ c~ cfinal_list f0 crtrans f0 f1 f2 b2 b3 c/\ c= cfind_face f0 b2 b0 c/\ c= cnext_el b0 b2 b1 c<= b4 cindexf b1 cztrans f0 f1 f2 b2 b3 b0 c/\ cMEM cPOWER * part cnext_el b0 b4 b1 crtrans f0 f1 f2 b2 cSUC b3 c= cindexf b1 cPOWER * part cnext_el b0 b4 b1 crtrans f0 f1 f2 b2 cSUC b3 b4 * / ! ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b2 c/\ c~ cfinal_list f0 crtrans f0 f1 f2 b2 b3 c/\ c= cfind_face f0 b2 b0 c/\ c= cnext_el b0 b2 b1 c<= b4 cindexf b1 cztrans f0 f1 f2 b2 b3 b0 c/\ cMEM cPOWER * part cnext_el b0 b4 b1 crtrans f0 f1 f2 b2 cSUC b3 c= cindexf b1 cPOWER * part cnext_el b0 b4 b1 crtrans f0 f1 f2 b2 cSUC b3 b4 f3 * / ! ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b2 c/\ c~ cfinal_list f0 crtrans f0 f1 f2 b2 b3 c/\ c= cfind_face f0 b2 b0 c/\ c= cnext_el b0 b2 b1 c<= b4 cindexf b1 cztrans f0 f1 f2 b2 b3 b0 c/\ cMEM cPOWER * part cnext_el b0 b4 b1 crtrans f0 f1 f2 b2 cSUC b3 c= cindexf b1 cPOWER * part cnext_el b0 b4 b1 crtrans f0 f1 f2 b2 cSUC b3 b4 f3
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), (i' < (((indexf w) z) f)), ((((marked_list L) N) r) x) |- ((i' < (((indexf w) z) f)) /\ (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> c= crtrans f0 f4 f5 f2 cSUC f6 f7 c==> c< f8 cindexf f3 f9 f1 c==> cmarked_list f0 f4 f5 f2 c/\ c< f8 cindexf f3 f9 f1 c==> c<= cSUC f8 cindexf f3 f9 f1 c==> c<= f8 cindexf f3 f9 f1 c==> cMEM cPOWER * part cnext_el f1 cSUC f8 f3 f7 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f8 f3 f7 cSUC f8 c==> cMEM cPOWER * part cnext_el f1 f8 f3 f7 c==> c= cindexf f3 cPOWER * part cnext_el f1 f8 f3 f7 f8 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f6 f7 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f7 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f2 f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> c= cnext_el f7 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f6 f7 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f6 c==> cuniq f10 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> cuniq f7 c= cPOWER * part cnext_el f7 f8 cnext_el f7 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f7 f8 cf_list f0 f2
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c< f12 cindexf f6 f8 f5 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c<= cSUC f12 cindexf f6 f8 f5 c==> c<= f12 cindexf f6 f8 f5 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f11 cSUC f12 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f11 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f11 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f11 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f11 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f11 f3 c= cPOWER * part cnext_el f11 f12 cnext_el f11 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f11 f12 cf_list f0 f3
- |- ((\r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) r)
T * / ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 f2
+ (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), ((((((rtrans L) N) r) x) (SUC i)) = r2) |- (~ ((final_list L) r2))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c~ cfinal_list f0 f5
+ (!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))) |- (((!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))) ==> ((\r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))) r)) = ((\r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))) r))
T c==> ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 c= c==> ! ! ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c/\ c= cfind_face f0 b1 b3 c= cnext_el b3 b1 b4 cMEM b4 crtrans f0 f1 b0 b1 b2 * / ! ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c/\ c= cfind_face f0 b1 b3 c= cnext_el b3 b1 b4 cMEM b4 crtrans f0 f1 b0 b1 b2 f2 * / ! ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c/\ c= cfind_face f0 b1 b3 c= cnext_el b3 b1 b4 cMEM b4 crtrans f0 f1 b0 b1 b2 f2
- ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)) |- (((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)) = T)
T c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c= cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 cT
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((((indexf w) z) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f11 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f11 f3 c<= cindexf f6 f10 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
+ |- (((real_mul (real_neg (real_of_num x))) (real_of_num (NUMERAL _0))) = (real_of_num (NUMERAL _0)))
T c= creal_mul creal_neg creal_of_num f0 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
+ ((((((rtrans L) N) r) x) i) = r1), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x)
T c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f5 f3
- |- ((((\r1. ((((((rtrans L) N) r) x) i) = r1)) r1) ==> (?r1. ((((((rtrans L) N) r) x) i) = r1))) = T)
T c= c==> * / c= crtrans f0 f1 f2 f3 f4 b0 f5 c? / c= crtrans f0 f1 f2 f3 f4 b0 cT
- (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1) |- ((\z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)) z1)
T c==> c= cprev_el f0 cztrans f1 f2 f3 f4 f5 f6 * / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0 f6
+ |- ((\y. (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y))))) (((POWER (next_el f)) i') w))
T * / ! c==> c/\ cuniq clist_of_darts f0 cMEM b0 clist_of_darts f0 c= cPOWER * part cf_list f0 b1 b0 cPOWER * part cnext_el cfind_face f0 b0 b1 b0 cPOWER * part cnext_el f1 f2 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) /\ ((((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cfind_face f0 f3 f5 c==> c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c/\ c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
- |- ((\L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) L)
T * / ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 f0
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM x) r2) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) /\ ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x)))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((next_el r2) x))) = ((f_list L) (((POWER (next_el r2)) i') ((next_el r2) x))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> c/\ cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c/\ cMEM f3 f12 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ c= cnext_el f12 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f10 f5 c==> c<= cSUC f11 cindexf f6 f10 f5 c==> c< f11 cindexf f6 f10 f5 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cnext_el f12 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cnext_el f12 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), ((((l'y L) r1) x) = y), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((l'y L) r1) x) = y) /\ ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cl'y f0 f7 f3 f8 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f9 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ c= cl'y f0 f7 f3 f8 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> ! c= cPOWER * part cnext_el f9 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f9 cSUC b0 f3 c==> cMEM f12 f9 c==> c~ c= cf_list f0 f12 cnext_el f9 f12 c~ c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f9 f3
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((((marked_list L) N) r) x) |- (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cindexf f3 cPOWER * part cnext_el f1 f4 f3 f5 f4 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f4 f3 f5 cSUC f4 c==> c= cfind_face f0 f2 f1 c==> c= crtrans f0 f6 f7 f2 cSUC f8 f5 c==> cMEM cPOWER * part cnext_el f1 f4 f3 f5 c==> cMEM cPOWER * part cnext_el f1 cSUC f4 f3 f5 c==> cmarked_list f0 f6 f7 f2 c==> call * part cf_last f0 cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> cuniq f5 c= cPOWER * part cnext_el f5 f4 cnext_el f5 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f5 f4 cf_list f0 f2
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM x) r2) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) /\ ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x)))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((next_el r2) x))) = ((f_list L) (((POWER (next_el r2)) i') ((next_el r2) x))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> c/\ cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c/\ cMEM f3 f12 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ c= cnext_el f12 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f10 f5 c==> c<= cSUC f11 cindexf f6 f10 f5 c==> c< f11 cindexf f6 f10 f5 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cnext_el f12 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cnext_el f12 f3
- |- ((\j. ((((POWER ((transform_list L) x)) j) (N , r)) = ((((((ntrans L) N) r) x) j) , (((((rtrans L) N) r) x) j)))) j)
T * / c= cPOWER * * part ctransform_list f0 f1 b0 c, f2 f3 c, cntrans f0 f2 f3 f1 b0 crtrans f0 f2 f3 f1 b0 f4
+ (uniq r2), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((((marked_list L) N) r) x) |- ((good_list L) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))
T c==> cuniq f0 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> ctransform_assumption_v2 f1 c==> c= cnext_el f2 f3 f4 c==> c= cindexf f4 cPOWER * part cnext_el f2 f5 f4 f0 f5 c==> c= cindexf f4 cPOWER * part cnext_el f2 cSUC f5 f4 f0 cSUC f5 c==> c= cfind_face f1 f3 f2 c==> c= crtrans f1 f6 f7 f3 cSUC f8 f0 c==> cMEM cPOWER * part cnext_el f2 f5 f4 f0 c==> cMEM cPOWER * part cnext_el f2 cSUC f5 f4 f0 c==> cmarked_list f1 f6 f7 f3 c==> cgood_list f1 c= cPOWER * part cnext_el f0 f5 cnext_el f0 cf_list f1 f3 cf_list f1 cPOWER * part cnext_el f0 f5 cf_list f1 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((find_face L) x) = f), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c< f12 cindexf f6 f10 f5 c==> c<= cSUC f12 cindexf f6 f10 f5 c==> c<= f12 cindexf f6 f10 f5 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cuniq f7 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ |- (((!N. (!r. (!x. (!d. (!i. (!f. (!w. (((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x)))))))) ==> ((((indexf w) (((((ytrans L) N) r) x) i)) f) = (((l'm L) (((((rtrans L) N) r) x) i)) x)))))))))) ==> ((\N. (!r. (!x. (!d. (!i. (!f. (!w. (((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x)))))))) ==> ((((indexf w) (((((ytrans L) N) r) x) i)) f) = (((l'm L) (((((rtrans L) N) r) x) i)) x)))))))))) N)) = ((\N. (!r. (!x. (!d. (!i. (!f. (!w. (((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x)))))))) ==> ((((indexf w) (((((ytrans L) N) r) x) i)) f) = (((l'm L) (((((rtrans L) N) r) x) i)) x)))))))))) N))
T c= c==> ! ! ! ! ! ! ! c==> c/\ c~ cfinal_list f0 crtrans f0 b0 b1 b2 b4 c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c= b5 cfind_face f0 b2 c= b6 cnext_el b5 b2 c= cindexf b6 cytrans f0 b0 b1 b2 b4 b5 cl'm f0 crtrans f0 b0 b1 b2 b4 b2 * / ! ! ! ! ! ! c==> c/\ c~ cfinal_list f0 crtrans f0 b0 b1 b2 b4 c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c= b5 cfind_face f0 b2 c= b6 cnext_el b5 b2 c= cindexf b6 cytrans f0 b0 b1 b2 b4 b5 cl'm f0 crtrans f0 b0 b1 b2 b4 b2 f1 * / ! ! ! ! ! ! c==> c/\ c~ cfinal_list f0 crtrans f0 b0 b1 b2 b4 c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c= b5 cfind_face f0 b2 c= b6 cnext_el b5 b2 c= cindexf b6 cytrans f0 b0 b1 b2 b4 b5 cl'm f0 crtrans f0 b0 b1 b2 b4 b2 f1
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((((rtrans L) N) r) x) i) = r1) /\ (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) ==> (((MEM x') r2) ==> ((~ (((f_list L) x') = ((next_el r2) x'))) ==> (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> ! c= cPOWER * part cnext_el f8 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f8 cSUC b0 f3 c==> cMEM f12 f8 c==> c~ c= cf_list f0 f12 cnext_el f8 f12 c~ c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f8 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
- |- (!y. (((\y. ((((l'y L) r1) x) = y)) y) ==> (?y. ((((l'y L) r1) x) = y))))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c? / c= cl'y f0 f1 f2 b0
- |- ((LET_END t) = t)
T c= cLET_END f0 f0
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((((rtrans L) N) r) x) i) = r1) ==> (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (((((l'y L) r1) x) = y) ==> ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cprev_el f7 f10 f11 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c< f12 cindexf f6 f10 f5 c==> c<= cSUC f12 cindexf f6 f10 f5 c==> c<= f12 cindexf f6 f10 f5 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f8 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((((marked_list L) N) r) x) |- ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> c= crtrans f0 f4 f5 f2 cSUC f6 f7 c==> cmarked_list f0 f4 f5 f2 c==> c< f8 cindexf f3 f9 f1 c==> c<= cSUC f8 cindexf f3 f9 f1 c==> c<= f8 cindexf f3 f9 f1 c==> cMEM cPOWER * part cnext_el f1 cSUC f8 f3 f7 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f8 f3 f7 cSUC f8 c==> cMEM cPOWER * part cnext_el f1 f8 f3 f7 c==> c= cindexf f3 cPOWER * part cnext_el f1 f8 f3 f7 f8 c==> cmarked_list f0 cntrans f0 f4 f5 f2 cSUC f6 f7 f2 c==> cnormal_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f7 cntrans f0 f4 f5 f2 cSUC f6 c==> cMEM f2 f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> c= cnext_el f7 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f4 f5 f2 cSUC f6 ce_list f2 c==> cs_flag_list f0 cntrans f0 f4 f5 f2 cSUC f6 f7 f2 c==> cuniq cflatten cntrans f0 f4 f5 f2 f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 f6 c==> cuniq f10 c==> cuniq cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cf_last f0 cntrans f0 f4 f5 f2 cSUC f6 c==> call * part cloop_list f0 cntrans f0 f4 f5 f2 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f0 f4 f5 f2 cSUC f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f4 f5 f2 cSUC f6 c==> cuniq f7 c= cPOWER * part cnext_el f7 f8 cnext_el f7 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f7 f8 cf_list f0 f2
+ (uniq f), (uniq r2), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((f_list L) x) = w), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM x) (list_of_darts L)), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((((marked_list L) N) r) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))
T c==> cuniq f0 c==> cuniq f1 c==> cuniq clist_of_darts f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f0 f3 f4 c==> c= cf_list f2 f3 f4 c==> c= cindexf f4 cPOWER * part cnext_el f0 f5 f4 f1 f5 c==> c= cindexf f4 cPOWER * part cnext_el f0 cSUC f5 f4 f1 cSUC f5 c==> c= cfind_face f2 f3 f0 c==> c= crtrans f2 f6 f7 f3 cSUC f8 f1 c==> cMEM f3 clist_of_darts f2 c==> cMEM cPOWER * part cnext_el f0 f5 f4 f1 c==> cMEM cPOWER * part cnext_el f0 cSUC f5 f4 f1 c==> cmarked_list f2 f6 f7 f3 c= cPOWER * part cnext_el f1 f5 cnext_el f1 cf_list f2 f3 cf_list f2 cPOWER * part cnext_el f1 f5 cf_list f2 f3
- (good_list L), (good_list_nodes L), (transform_assumption_v2 L) |- ((\x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i))))))) = (\x. (!i. (!f. (!w. ((((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w))) ==> ((MEM w) (((((rtrans L) N) r) x) i))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c= / ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c= cfind_face f0 b0 b2 c= cnext_el b2 b0 b3 cMEM b3 crtrans f0 f1 f2 b0 b1 / ! ! ! c==> c/\ cmarked_list f0 f1 f2 b0 c/\ c= cfind_face f0 b0 b2 c= cnext_el b2 b0 b3 cMEM b3 crtrans f0 f1 f2 b0 b1
+ |- (((!s. (((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) /\ ((MEM s) (((((ntrans L) N) r) x) (SUC i)))) ==> (uniq s))) ==> ((\s. (((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) /\ ((MEM s) (((((ntrans L) N) r) x) (SUC i)))) ==> (uniq s))) r2)) = ((\s. (((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) /\ ((MEM s) (((((ntrans L) N) r) x) (SUC i)))) ==> (uniq s))) r2))
T c= c==> ! c==> c/\ cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 cMEM b0 cntrans f0 f1 f2 f3 cSUC f4 cuniq b0 * / c==> c/\ cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 cMEM b0 cntrans f0 f1 f2 f3 cSUC f4 cuniq b0 f5 * / c==> c/\ cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 cMEM b0 cntrans f0 f1 f2 f3 cSUC f4 cuniq b0 f5
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((((marked_list L) N) r) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cindexf f3 cPOWER * part cnext_el f1 f4 f3 f5 f4 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f4 f3 f5 cSUC f4 c==> c= cfind_face f0 f2 f1 c==> c= crtrans f0 f6 f7 f2 cSUC f8 f5 c==> cMEM cPOWER * part cnext_el f1 f4 f3 f5 c==> cMEM cPOWER * part cnext_el f1 cSUC f4 f3 f5 c==> cmarked_list f0 f6 f7 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> c= cnext_el f5 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f6 f7 f2 cSUC f8 ce_list f2 c==> cs_flag_list f0 cntrans f0 f6 f7 f2 cSUC f8 f5 f2 c==> cuniq cflatten cntrans f0 f6 f7 f2 f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f2 f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f2 f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 f8 c==> cuniq f9 c==> cuniq cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> cuniq f5 c= cPOWER * part cnext_el f5 f4 cnext_el f5 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f5 f4 cf_list f0 f2
+ |- (((((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))) ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))) = (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))
T c= c==> c==> cmarked_list f0 f1 f2 f3 cMEM f3 clist_of_darts f0 c==> c= co * part cnext_el f4 * * part cPOWER * part cnext_el f4 cSUC cindexf f5 f6 f4 f3 cf_list f0 cPOWER * part cnext_el f4 cindexf f5 f6 f4 cf_list f0 f3 c~ c= cindexf f5 cl'y f0 f4 f3 f7 cl'm f0 f4 f3 c==> c= co * part cnext_el f4 * * part cPOWER * part cnext_el f4 cSUC cindexf f5 f6 f4 f3 cf_list f0 cPOWER * part cnext_el f4 cindexf f5 f6 f4 cf_list f0 f3 c~ c= cindexf f5 cl'y f0 f4 f3 f7 cl'm f0 f4 f3
- (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))))) |- ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- (((!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) ==> ((\x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) x)) = ((\x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) x))
T c= c==> ! ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 * / ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 f3 * / ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 f3
- |- (((((((rtrans L) N) r) x) (SUC i)) = r2) = ((\r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)) r2))
T c= c= crtrans f0 f1 f2 f3 cSUC f4 f5 * / c= crtrans f0 f1 f2 f3 cSUC f4 b0 f5
- (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019)))) (real_of_num (NUMERAL _0)))))) |- (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019)))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0
- |- ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1)
T * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3
+ (uniq f), (uniq r2), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM x) (list_of_darts L)), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((((marked_list L) N) r) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))
T c==> cuniq f0 c==> cuniq f1 c==> cuniq clist_of_darts f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f0 f3 f4 c==> c= cindexf f4 cPOWER * part cnext_el f0 f5 f4 f1 f5 c==> c= cindexf f4 cPOWER * part cnext_el f0 cSUC f5 f4 f1 cSUC f5 c==> c= cfind_face f2 f3 f0 c==> c= crtrans f2 f6 f7 f3 cSUC f8 f1 c==> cMEM f3 clist_of_darts f2 c==> cMEM cPOWER * part cnext_el f0 f5 f4 f1 c==> cMEM cPOWER * part cnext_el f0 cSUC f5 f4 f1 c==> cmarked_list f2 f6 f7 f3 c= cPOWER * part cnext_el f1 f5 cnext_el f1 cf_list f2 f3 cf_list f2 cPOWER * part cnext_el f1 f5 cf_list f2 f3
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((\z. ((((((ztrans L) N) r) x) i) = z)) z) ==> ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f))) = T)
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f10 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= c==> * / c= cztrans f0 f1 f2 f3 f4 b0 f11 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cT
- ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = T)
T c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cT
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((is_restricted (hypermap_of_list L)) /\ (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM x) r2) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) /\ ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ ((((final_list L) r2) ==> ((flag_list L) (((((ntrans L) N) r) x) (SUC i)))) /\ ((~ ((final_list L) r2)) ==> ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x)))))))))) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((next_el r2) x))) = ((f_list L) (((POWER (next_el r2)) i') ((next_el r2) x)))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f7 cztrans f0 f1 f2 f3 f4 f8 c==> c= cl'y f0 f7 f3 f9 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f10 f5 c==> c<= cSUC f11 cindexf f6 f10 f5 c==> c< f11 cindexf f6 f10 f5 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c/\ cMEM f3 f12 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c/\ c= cnext_el f12 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c/\ c==> cfinal_list f0 f12 cflag_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c~ cfinal_list f0 f12 cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cnext_el f12 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cnext_el f12 f3
+ (!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))) |- (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i))))))))
T c==> ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 ! ! ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c/\ c= cfind_face f0 b1 b3 c= cnext_el b3 b1 b4 cMEM b4 crtrans f0 f1 b0 b1 b2
+ |- (((!P. (!m. (!n. ((((min_num (GSPEC (\GEN%PVAR%8675. (?m. (((SETSPEC GEN%PVAR%8675) (P m)) m))))) = n) /\ ((!i. ((i < m) ==> (~ (P i)))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (P m)) m)))) = EMPTY)))) ==> (m <= n))))) ==> ((\P. (!m. (!n. ((((min_num (GSPEC (\GEN%PVAR%8675. (?m. (((SETSPEC GEN%PVAR%8675) (P m)) m))))) = n) /\ ((!i. ((i < m) ==> (~ (P i)))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (P m)) m)))) = EMPTY)))) ==> (m <= n))))) (\m. (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))))) = ((\P. (!m. (!n. ((((min_num (GSPEC (\GEN%PVAR%8675. (?m. (((SETSPEC GEN%PVAR%8675) (P m)) m))))) = n) /\ ((!i. ((i < m) ==> (~ (P i)))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (P m)) m)))) = EMPTY)))) ==> (m <= n))))) (\m. (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x)))))))
T c= c==> ! ! ! c==> c/\ c= cmin_num * part cGSPEC / c? / cSETSPEC b3 * b0 b4 b4 b2 c/\ ! c==> c< b3 b1 c~ * b0 b3 c~ c= * part cGSPEC / c? / cSETSPEC b3 * b0 b4 b4 part cEMPTY c<= b1 b2 * / ! ! c==> c/\ c= cmin_num * part cGSPEC / c? / cSETSPEC b3 * b0 b4 b4 b2 c/\ ! c==> c< b3 b1 c~ * b0 b3 c~ c= * part cGSPEC / c? / cSETSPEC b3 * b0 b4 b4 part cEMPTY c<= b1 b2 / c~ c= cITER cSUC cSUC b0 * part cnext_el f0 f1 cf_list f2 cITER cSUC b0 * part cnext_el f0 f1 * / ! ! c==> c/\ c= cmin_num * part cGSPEC / c? / cSETSPEC b3 * b0 b4 b4 b2 c/\ ! c==> c< b3 b1 c~ * b0 b3 c~ c= * part cGSPEC / c? / cSETSPEC b3 * b0 b4 b4 part cEMPTY c<= b1 b2 / c~ c= cITER cSUC cSUC b0 * part cnext_el f0 f1 cf_list f2 cITER cSUC b0 * part cnext_el f0 f1
+ |- (((!i. (!f. (!w. (((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x)))))))) ==> ((((indexf w) (((((ytrans L) N) r) x) i)) f) = (((l'm L) (((((rtrans L) N) r) x) i)) x)))))) ==> ((\i. (!f. (!w. (((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x)))))))) ==> ((((indexf w) (((((ytrans L) N) r) x) i)) f) = (((l'm L) (((((rtrans L) N) r) x) i)) x)))))) (SUC i))) = ((\i. (!f. (!w. (((~ ((final_list L) (((((rtrans L) N) r) x) i))) /\ ((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x)))))))) ==> ((((indexf w) (((((ytrans L) N) r) x) i)) f) = (((l'm L) (((((rtrans L) N) r) x) i)) x)))))) (SUC i)))
T c= c==> ! ! ! c==> c/\ c~ cfinal_list f0 crtrans f0 f1 f2 f3 b0 c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= b1 cfind_face f0 f3 c= b2 cnext_el b1 f3 c= cindexf b2 cytrans f0 f1 f2 f3 b0 b1 cl'm f0 crtrans f0 f1 f2 f3 b0 f3 * / ! ! c==> c/\ c~ cfinal_list f0 crtrans f0 f1 f2 f3 b0 c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= b1 cfind_face f0 f3 c= b2 cnext_el b1 f3 c= cindexf b2 cytrans f0 f1 f2 f3 b0 b1 cl'm f0 crtrans f0 f1 f2 f3 b0 f3 cSUC f4 * / ! ! c==> c/\ c~ cfinal_list f0 crtrans f0 f1 f2 f3 b0 c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= b1 cfind_face f0 f3 c= b2 cnext_el b1 f3 c= cindexf b2 cytrans f0 f1 f2 f3 b0 b1 cl'm f0 crtrans f0 f1 f2 f3 b0 f3 cSUC f4
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), ((((l'y L) r1) x) = y), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((((marked_list L) N) r) x) |- (((((l'y L) r1) x) = y) /\ ((((prev_el r1) z) = z1) ==> (((((((ztrans L) N) r) x) i) = z) ==> (((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)) ==> ((i' < (((indexf w) z) f)) ==> (((SUC i') <= (((indexf w) z) f)) ==> ((i' <= (((indexf w) z) f)) ==> (((MEM (((POWER (next_el f)) (SUC i')) w)) r2) ==> (((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')) ==> (((MEM (((POWER (next_el f)) i') w)) r2) ==> (((((indexf w) (((POWER (next_el f)) i') w)) r2) = i') ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cl'y f0 f4 f2 f5 c==> c= cfind_face f0 f2 f1 c==> c= crtrans f0 f6 f7 f2 cSUC f8 f9 c==> cmarked_list f0 f6 f7 f2 c/\ c= cl'y f0 f4 f2 f5 c==> c= cprev_el f4 f10 f11 c==> c= cztrans f0 f6 f7 f2 f8 f10 c==> c= cindexf f3 cytrans f0 f6 f7 f2 cSUC f8 f1 cl'm f0 f9 f2 c==> c< f12 cindexf f3 f10 f1 c==> c<= cSUC f12 cindexf f3 f10 f1 c==> c<= f12 cindexf f3 f10 f1 c==> cMEM cPOWER * part cnext_el f1 cSUC f12 f3 f9 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f12 f3 f9 cSUC f12 c==> cMEM cPOWER * part cnext_el f1 f12 f3 f9 c==> c= cindexf f3 cPOWER * part cnext_el f1 f12 f3 f9 f12 c==> cmarked_list f0 cntrans f0 f6 f7 f2 cSUC f8 f9 f2 c==> cnormal_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> cMEM f9 cntrans f0 f6 f7 f2 cSUC f8 c==> cMEM f2 f9 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> c= cnext_el f9 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f6 f7 f2 cSUC f8 ce_list f2 c==> cs_flag_list f0 cntrans f0 f6 f7 f2 cSUC f8 f9 f2 c==> cuniq cflatten cntrans f0 f6 f7 f2 f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f2 f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f2 f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 f8 c==> cuniq f4 c==> cuniq cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> cuniq f9 c= cPOWER * part cnext_el f9 f12 cnext_el f9 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f9 f12 cf_list f0 f2
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((((rtrans L) N) r) x) i) = r1) /\ ((((indexf w) (((((ztrans L) N) r) x) i)) f) <= (((indexf w) (((((ytrans L) N) r) x) (SUC i))) f)))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ c= crtrans f0 f1 f2 f3 f4 f7 c<= cindexf f6 cztrans f0 f1 f2 f3 f4 f5 cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), (((find_face L) x) = f), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((((marked_list L) N) r) x) |- (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cindexf f3 cPOWER * part cnext_el f1 f4 f3 f5 f4 c==> c= cindexf f3 cPOWER * part cnext_el f1 cSUC f4 f3 f5 cSUC f4 c==> c= cfind_face f0 f2 f1 c==> c= crtrans f0 f6 f7 f2 cSUC f8 f5 c==> cMEM cPOWER * part cnext_el f1 f4 f3 f5 c==> cMEM cPOWER * part cnext_el f1 cSUC f4 f3 f5 c==> cmarked_list f0 f6 f7 f2 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 f8 c==> cuniq f9 c==> cuniq cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> call / c~ c= b0 cNIL cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cf_last f0 cntrans f0 f6 f7 f2 cSUC f8 c==> call * part cloop_list f0 cntrans f0 f6 f7 f2 cSUC f8 c==> ! c==> cMEM b0 cflatten cntrans f0 f6 f7 f2 cSUC f8 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f6 f7 f2 cSUC f8 c==> cuniq f5 c= cPOWER * part cnext_el f5 f4 cnext_el f5 cf_list f0 f2 cf_list f0 cPOWER * part cnext_el f5 f4 cf_list f0 f2
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- |- ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))
T c= csplit_normal_list f0 f1 f2 f3 f4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b5 b6 cAPPEND b7 b4 cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 f3 cCONS f3 cNIL cAPPEND cCONS b0 cNIL cAPPEND cbetwn f1 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f2 f3 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f4 cnext_el f1 f3
- |- ((\i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))) i)
T * / c= crtrans f0 f1 f2 f3 b0 cSND cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4
- ((((l'y L) r1) x) = y) |- ((\y. ((((l'y L) r1) x) = y)) y)
T c==> c= cl'y f0 f1 f2 f3 * / c= cl'y f0 f1 f2 b0 f3
- (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))))) |- ((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- (((real_div x) (real_of_num (NUMERAL (BIT1 _0)))) = x)
T c= creal_div f0 creal_of_num cNUMERAL cBIT1 c_0 f0
- |- ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)
T * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
- (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((uniq (flatten (((((ntrans L) N) r) x) i))) /\ (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ c= cf_list f2 f3 cnext_el f0 f3 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 f6 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 cSUC f6 c==> cis_restricted chypermap_of_list f2 c==> cuniq cflatten cntrans f2 f4 f5 f1 f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f7 f1 f8 c==> c= cnext_el f9 f1 cf_list f2 f1 c==> c= cprev_el f9 f10 f11 c==> c= cl'y f2 f9 f1 f12 c==> c= cztrans f2 f4 f5 f1 f6 f10 c==> c= cfind_face f2 f1 f7 c==> c= crtrans f2 f4 f5 f1 f6 f9 c==> c= crtrans f2 f4 f5 f1 cSUC f6 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 f6 c==> cMEM f1 f9 c==> cMEM f3 f0 c==> cMEM f9 cntrans f2 f4 f5 f1 f6 c==> cnormal_list f2 cntrans f2 f4 f5 f1 f6 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 f6 f9 f1 c==> cmarked_list f2 f4 f5 f1 c==> cmarked_list f2 cntrans f2 f4 f5 f1 f6 crtrans f2 f4 f5 f1 f6 f1 c/\ cuniq cflatten cntrans f2 f4 f5 f1 f6 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 f6 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 f6 c==> call * part cloop_list f2 cntrans f2 f4 f5 f1 f6 c==> ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 f6 c==> cuniq f9 c==> cMEM f8 f0 c==> cmarked_list f2 cntrans f2 f4 f5 f1 cSUC f6 f0 f1 c==> cnormal_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> cMEM f0 cntrans f2 f4 f5 f1 cSUC f6 c==> cMEM f1 f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> c= cnext_el f0 f1 cf_list f2 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 cSUC f6 ce_list f1 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 cSUC f6 f0 f1 c==> cuniq cflatten cntrans f2 f4 f5 f1 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 cSUC f6 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 cSUC f6 c==> call * part cloop_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 cSUC f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 cSUC f6 c==> cuniq f0 c==> c= cPOWER * part cnext_el f0 cindexf f8 f3 f0 f8 f3 c~ c= cindexf f8 cl'y f2 f0 f1 f7 cl'm f2 f0 f1
- ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) = T)
T c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c= cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 cT
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((all (f_last L)) (((((ntrans L) N) r) x) i)) /\ (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ c= cf_list f2 f3 cnext_el f0 f3 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 f6 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 cSUC f6 c==> cis_restricted chypermap_of_list f2 c==> cuniq cflatten cntrans f2 f4 f5 f1 f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f7 f1 f8 c==> c= cnext_el f9 f1 cf_list f2 f1 c==> c= cprev_el f9 f10 f11 c==> c= cl'y f2 f9 f1 f12 c==> c= cztrans f2 f4 f5 f1 f6 f10 c==> c= cfind_face f2 f1 f7 c==> c= crtrans f2 f4 f5 f1 f6 f9 c==> c= crtrans f2 f4 f5 f1 cSUC f6 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 f6 c==> cMEM f1 f9 c==> cMEM f3 f0 c==> cMEM f9 cntrans f2 f4 f5 f1 f6 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 f6 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 f6 c==> cnormal_list f2 cntrans f2 f4 f5 f1 f6 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 f6 f9 f1 c==> cmarked_list f2 f4 f5 f1 c==> cmarked_list f2 cntrans f2 f4 f5 f1 f6 crtrans f2 f4 f5 f1 f6 f1 c/\ call * part cf_last f2 cntrans f2 f4 f5 f1 f6 c==> call * part cloop_list f2 cntrans f2 f4 f5 f1 f6 c==> ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 f6 c==> cuniq f9 c==> cMEM f8 f0 c==> cmarked_list f2 cntrans f2 f4 f5 f1 cSUC f6 f0 f1 c==> cnormal_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> cMEM f0 cntrans f2 f4 f5 f1 cSUC f6 c==> cMEM f1 f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> c= cnext_el f0 f1 cf_list f2 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 cSUC f6 ce_list f1 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 cSUC f6 f0 f1 c==> cuniq cflatten cntrans f2 f4 f5 f1 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 cSUC f6 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 cSUC f6 c==> call * part cloop_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 cSUC f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 cSUC f6 c==> cuniq f0 c==> c= cPOWER * part cnext_el f0 cindexf f8 f3 f0 f8 f3 c~ c= cindexf f8 cl'y f2 f0 f1 f7 cl'm f2 f0 f1
- ((\r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)) r2) |- (((\r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)) r2) /\ (?r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)))
T c==> * / c= crtrans f0 f1 f2 f3 cSUC f4 b0 f5 c/\ * / c= crtrans f0 f1 f2 f3 cSUC f4 b0 f5 c? / c= crtrans f0 f1 f2 f3 cSUC f4 b0
- |- (((!L. (!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))))) ==> ((\L. (!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))))) L)) = ((\L. (!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))))) L))
T c= c==> ! ! ! ! ! c= crtrans b0 b1 b2 b3 b4 cSND cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 * / ! ! ! ! c= crtrans b0 b1 b2 b3 b4 cSND cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0 * / ! ! ! ! c= crtrans b0 b1 b2 b3 b4 cSND cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- ((\r1. ((((((rtrans L) N) r) x) i) = r1)) r1) |- (((\r1. ((((((rtrans L) N) r) x) i) = r1)) r1) /\ (?r1. ((((((rtrans L) N) r) x) i) = r1)))
T c==> * / c= crtrans f0 f1 f2 f3 f4 b0 f5 c/\ * / c= crtrans f0 f1 f2 f3 f4 b0 f5 c? / c= crtrans f0 f1 f2 f3 f4 b0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0)))
T creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- (((((l'y L) r1) x) = y) ==> (?y. ((((l'y L) r1) x) = y)))
T c==> c= cl'y f0 f1 f2 f3 c? / c= cl'y f0 f1 f2 b0
- |- ((\x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x))) x)
T * / c= cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 b0 * f0 b0 f1
- |- (((((((rtrans L) N) r) x) i) = r1) = ((\r1. ((((((rtrans L) N) r) x) i) = r1)) r1))
T c= c= crtrans f0 f1 f2 f3 f4 f5 * / c= crtrans f0 f1 f2 f3 f4 b0 f5
- |- ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1)
T * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
- |- (((!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) ==> ((\r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) r)) = ((\r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) r))
T c= c==> ! ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 * / ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 f1 * / ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 f1
- |- (((real_ge ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019)))) (real_of_num (NUMERAL _0))) = (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019)))) (real_of_num (NUMERAL _0)))))
T c= creal_ge creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0
- |- (((!f. (!x. (((LET f) x) = (f x)))) ==> ((\f. (!x. (((LET f) x) = (f x)))) f)) = ((\f. (!x. (((LET f) x) = (f x)))) f))
T c= c==> ! ! c= cLET b0 b1 * b0 b1 * / ! c= cLET b0 b1 * b0 b1 f0 * / ! c= cLET b0 b1 * b0 b1 f0
- ((!x. (~ (A x))) /\ (A a)) |- ((~ (A a)) ==> (A a))
T c==> c/\ ! c~ * f0 b0 * f0 f1 c==> c~ * f0 f1 * f0 f1
- ((((((ztrans L) N) r) x) i) = z) |- ((\z. ((((((ztrans L) N) r) x) i) = z)) z)
T c==> c= cztrans f0 f1 f2 f3 f4 f5 * / c= cztrans f0 f1 f2 f3 f4 b0 f5
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) /\ ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- |- (((!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) ==> ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)) = ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2))
T c= c==> ! ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) /\ (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- |- ((!P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) /\ ((!p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) /\ (!p. (!x. ((x IN (\y. (p y))) = (p x))))))
T c/\ ! ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 c/\ ! ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 ! ! c= cIN b1 / * b0 b2 * b0 b1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((\L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) L)
T * / ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 f0
- (!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))) |- (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i))))
T c==> ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 f4 c= cnext_el f4 f3 b0 cMEM b0 crtrans f0 f1 f2 f3 f5
- |- (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))
T c= cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cztrans f0 f1 f2 f3 f4
- |- (((!y. (((MEM x) ((CONS y) NIL)) = (x = y))) ==> ((\y. (((MEM x) ((CONS y) NIL)) = (x = y))) y)) = ((\y. (((MEM x) ((CONS y) NIL)) = (x = y))) y))
T c= c==> ! c= cMEM f0 cCONS b0 cNIL c= f0 b0 * / c= cMEM f0 cCONS b0 cNIL c= f0 b0 f1 * / c= cMEM f0 cCONS b0 cNIL c= f0 b0 f1
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) |- ((\d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) d)
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 * / c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 f5
- (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- ((\f'. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f') /\ (((next_el f') x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) _10304035))))) = (\f'. (!w. (((f = f') /\ (((next_el f') x) = w)) ==> ((MEM w) (((((rtrans L) N) r) x) _10304035))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cfind_face f0 f1 f2 c==> cmarked_list f0 f3 f4 f1 c= / ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f3 f4 f1 c/\ c= cfind_face f0 f1 b0 c= cnext_el b0 f1 b1 cMEM b1 crtrans f0 f3 f4 f1 f5 / ! c==> c/\ c= f2 b0 c= cnext_el b0 f1 b1 cMEM b1 crtrans f0 f3 f4 f1 f5
- (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ c= cf_list f2 f3 cnext_el f0 f3 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 f6 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 cSUC f6 c==> cis_restricted chypermap_of_list f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f7 f1 f8 c==> c= cnext_el f9 f1 cf_list f2 f1 c==> c= cprev_el f9 f10 f11 c==> c= cl'y f2 f9 f1 f12 c==> c= cztrans f2 f4 f5 f1 f6 f10 c==> c= cfind_face f2 f1 f7 c==> c= crtrans f2 f4 f5 f1 f6 f9 c==> c= crtrans f2 f4 f5 f1 cSUC f6 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 f6 c==> cMEM f1 f9 c==> cMEM f3 f0 c==> cMEM f9 cntrans f2 f4 f5 f1 f6 c==> cnormal_list f2 cntrans f2 f4 f5 f1 f6 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 f6 f9 f1 c==> cmarked_list f2 f4 f5 f1 c==> cmarked_list f2 cntrans f2 f4 f5 f1 f6 crtrans f2 f4 f5 f1 f6 f1 c==> cuniq cflatten cntrans f2 f4 f5 f1 f6 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 f6 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 f6 c==> call * part cloop_list f2 cntrans f2 f4 f5 f1 f6 c==> ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 f6 c==> cuniq f9 c==> cMEM f8 f0 c==> cmarked_list f2 cntrans f2 f4 f5 f1 cSUC f6 f0 f1 c==> cnormal_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> cMEM f0 cntrans f2 f4 f5 f1 cSUC f6 c==> cMEM f1 f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> c= cnext_el f0 f1 cf_list f2 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 cSUC f6 ce_list f1 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 cSUC f6 f0 f1 c==> cuniq cflatten cntrans f2 f4 f5 f1 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 cSUC f6 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 cSUC f6 c==> call * part cloop_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 cSUC f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 cSUC f6 c==> cuniq f0 c==> c= cPOWER * part cnext_el f0 cindexf f8 f3 f0 f8 f3 c~ c= cindexf f8 cl'y f2 f0 f1 f7 cl'm f2 f0 f1
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM w) r2), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) /\ ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c/\ cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
- (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019)))) (real_of_num (NUMERAL _0)))))) |- (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- (uniq (list_of_darts L)), (((find_face L) x) = f) |- (((uniq f) ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))) = (((uniq (list_of_darts L)) ==> (uniq ((find_face L) x))) ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))
T c==> cuniq clist_of_darts f0 c==> c= cfind_face f0 f1 f2 c= c==> cuniq f2 c==> c= co * part cnext_el f3 * * part cPOWER * part cnext_el f3 cSUC cindexf f4 f5 f3 f1 cf_list f0 cPOWER * part cnext_el f3 cindexf f4 f5 f3 cf_list f0 f1 c~ c= cindexf f4 cl'y f0 f3 f1 f2 cl'm f0 f3 f1 c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c==> c= co * part cnext_el f3 * * part cPOWER * part cnext_el f3 cSUC cindexf f4 f5 f3 f1 cf_list f0 cPOWER * part cnext_el f3 cindexf f4 f5 f3 cf_list f0 f1 c~ c= cindexf f4 cl'y f0 f3 f1 f2 cl'm f0 f3 f1
- ((\z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)) z1) |- (((((prev_el r1) (((((ztrans L) N) r) x) i)) = z1) ==> (?z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1))) = (?z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)))
T c==> * / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0 f6 c= c==> c= cprev_el f0 cztrans f1 f2 f3 f4 f5 f6 c? / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0 c? / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0
- (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ c= cf_list f2 f3 cnext_el f0 f3 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 f6 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 cSUC f6 c==> cis_restricted chypermap_of_list f2 c==> cuniq cflatten cntrans f2 f4 f5 f1 f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f7 f1 f8 c==> c= cnext_el f9 f1 cf_list f2 f1 c==> c= cprev_el f9 f10 f11 c==> c= cl'y f2 f9 f1 f12 c==> c= cztrans f2 f4 f5 f1 f6 f10 c==> c= cfind_face f2 f1 f7 c==> c= crtrans f2 f4 f5 f1 f6 f9 c==> c= crtrans f2 f4 f5 f1 cSUC f6 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 f6 c==> cMEM f1 f9 c==> cMEM f3 f0 c==> cMEM f9 cntrans f2 f4 f5 f1 f6 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 f6 c==> call * part cloop_list f2 cntrans f2 f4 f5 f1 f6 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 f6 c==> cnormal_list f2 cntrans f2 f4 f5 f1 f6 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 f6 f9 f1 c==> cmarked_list f2 f4 f5 f1 c==> cmarked_list f2 cntrans f2 f4 f5 f1 f6 crtrans f2 f4 f5 f1 f6 f1 c==> ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 f6 c==> cuniq f9 c==> cMEM f8 f0 c==> cmarked_list f2 cntrans f2 f4 f5 f1 cSUC f6 f0 f1 c==> cnormal_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> cMEM f0 cntrans f2 f4 f5 f1 cSUC f6 c==> cMEM f1 f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> c= cnext_el f0 f1 cf_list f2 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 cSUC f6 ce_list f1 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 cSUC f6 f0 f1 c==> cuniq cflatten cntrans f2 f4 f5 f1 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 cSUC f6 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 cSUC f6 c==> call * part cloop_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 cSUC f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 cSUC f6 c==> cuniq f0 c==> c= cPOWER * part cnext_el f0 cindexf f8 f3 f0 f8 f3 c~ c= cindexf f8 cl'y f2 f0 f1 f7 cl'm f2 f0 f1
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f11 cindexf f6 f8 f5 c==> c<= cSUC f11 cindexf f6 f8 f5 c==> c< f11 cindexf f6 f8 f5 c==> cMEM f3 f7 c==> cMEM f3 f12 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> c= cnext_el f12 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cf_list f0 f3
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f8 f5 c==> c<= cSUC f11 cindexf f6 f8 f5 c==> c< f11 cindexf f6 f8 f5 c==> cMEM f3 f7 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cMEM f3 f12 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f12 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cf_list f0 f3
- (((!i. ((i < (((indexf w) z) f)) ==> ((((ITER (SUC (SUC i))) (next_el r2)) x) = ((f_list L) (((ITER (SUC i)) (next_el r2)) x))))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)))) = EMPTY))) ==> ((((indexf w) z) f) <= (((l'm L) r2) x))) |- ((((!i. ((i < (((indexf w) z) f)) ==> ((((ITER (SUC (SUC i))) (next_el r2)) x) = ((f_list L) (((ITER (SUC i)) (next_el r2)) x))))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)))) = EMPTY))) ==> ((((indexf w) z) f) <= (((l'm L) r2) x))) = T)
T c==> c==> c/\ ! c==> c< b0 cindexf f0 f1 f2 c= cITER cSUC cSUC b0 * part cnext_el f3 f4 cf_list f5 cITER cSUC b0 * part cnext_el f3 f4 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cITER cSUC cSUC b1 * part cnext_el f3 f4 cf_list f5 cITER cSUC b1 * part cnext_el f3 f4 b1 part cEMPTY c<= cindexf f0 f1 f2 cl'm f5 f3 f4 c= c==> c/\ ! c==> c< b0 cindexf f0 f1 f2 c= cITER cSUC cSUC b0 * part cnext_el f3 f4 cf_list f5 cITER cSUC b0 * part cnext_el f3 f4 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cITER cSUC cSUC b1 * part cnext_el f3 f4 cf_list f5 cITER cSUC b1 * part cnext_el f3 f4 b1 part cEMPTY c<= cindexf f0 f1 f2 cl'm f5 f3 f4 cT
- (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 f5 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 cSUC f5 c==> cis_restricted chypermap_of_list f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f6 f1 f7 c==> c= cnext_el f8 f1 cf_list f2 f1 c==> c= cprev_el f8 f9 f10 c==> c= cl'y f2 f8 f1 f11 c==> c= cztrans f2 f3 f4 f1 f5 f9 c==> c= cfind_face f2 f1 f6 c==> c= crtrans f2 f3 f4 f1 f5 f8 c==> c= crtrans f2 f3 f4 f1 cSUC f5 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f3 f4 f1 f5 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f3 f4 f1 f5 c==> cMEM f1 f8 c==> cMEM f12 f0 c==> cMEM f8 cntrans f2 f3 f4 f1 f5 c==> cnormal_list f2 cntrans f2 f3 f4 f1 f5 c==> cs_flag_list f2 cntrans f2 f3 f4 f1 f5 f8 f1 c==> cmarked_list f2 f3 f4 f1 c==> cmarked_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 c==> c~ c= cf_list f2 f12 cnext_el f0 f12 c==> cuniq cflatten cntrans f2 f3 f4 f1 f5 c==> call / c~ c= b0 cNIL cntrans f2 f3 f4 f1 f5 c==> call * part cf_last f2 cntrans f2 f3 f4 f1 f5 c==> call * part cloop_list f2 cntrans f2 f3 f4 f1 f5 c==> ! c==> cMEM b0 cflatten cntrans f2 f3 f4 f1 f5 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f3 f4 f1 f5 c==> cuniq f8 c==> cMEM f7 f0 c==> cmarked_list f2 cntrans f2 f3 f4 f1 cSUC f5 f0 f1 c==> cnormal_list f2 cntrans f2 f3 f4 f1 cSUC f5 c==> cMEM f0 cntrans f2 f3 f4 f1 cSUC f5 c==> cMEM f1 f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f3 f4 f1 cSUC f5 c==> c= cnext_el f0 f1 cf_list f2 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f3 f4 f1 cSUC f5 ce_list f1 c==> cs_flag_list f2 cntrans f2 f3 f4 f1 cSUC f5 f0 f1 c==> cuniq cflatten cntrans f2 f3 f4 f1 cSUC f5 c==> call / c~ c= b0 cNIL cntrans f2 f3 f4 f1 cSUC f5 c==> call * part cf_last f2 cntrans f2 f3 f4 f1 cSUC f5 c==> call * part cloop_list f2 cntrans f2 f3 f4 f1 cSUC f5 c==> ! c==> cMEM b0 cflatten cntrans f2 f3 f4 f1 cSUC f5 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f3 f4 f1 cSUC f5 c==> cuniq f0 c==> c= cPOWER * part cnext_el f0 cindexf f7 f12 f0 f7 f12 c~ c= cindexf f7 cl'y f2 f0 f1 f6 cl'm f2 f0 f1
- |- ((((prev_el r1) (((((ztrans L) N) r) x) i)) = z1) ==> (?z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)))
T c==> c= cprev_el f0 cztrans f1 f2 f3 f4 f5 f6 c? / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq r2), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((uniq r2) /\ (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- |- ((real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((((((rtrans L) N) r) x) (SUC i)) = r2) |- ((\r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)) r2)
T c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 * / c= crtrans f0 f1 f2 f3 cSUC f4 b0 f5
- |- ((\A. ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F)) A)
T * / c==> c~ c= ! c~ * b0 b1 c~ c? / * b0 b1 cF f0
- ((\z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)) z1) |- (((\z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)) z1) /\ (?z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)))
T c==> * / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0 f6 c/\ * / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0 f6 c? / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0
- |- (((MEM x) ((CONS y) NIL)) = (x = y))
T c= cMEM f0 cCONS f1 cNIL c= f0 f1
- (uniq f), (uniq (list_of_darts L)), (((next_el f) x) = w), ((((POWER (next_el r2)) (SUC i')) w) = (((POWER (next_el f)) (SUC i')) w)), (((find_face L) x) = f), ((MEM x) (list_of_darts L)) |- ((((POWER (next_el r2)) i') ((next_el r2) w)) = ((f_list L) (((POWER (next_el f)) i') w)))
T c==> cuniq f0 c==> cuniq clist_of_darts f1 c==> c= cnext_el f0 f2 f3 c==> c= cPOWER * part cnext_el f4 cSUC f5 f3 cPOWER * part cnext_el f0 cSUC f5 f3 c==> c= cfind_face f1 f2 f0 c==> cMEM f2 clist_of_darts f1 c= cPOWER * part cnext_el f4 f5 cnext_el f4 f3 cf_list f1 cPOWER * part cnext_el f0 f5 f3
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((MEM x) r2) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ cMEM f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) = T)
T c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c= cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 cT
- |- (((!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))) ==> ((\ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))) ram2)) = ((\ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))) ram2))
T c= c==> ! c= csplit_normal_list f0 f1 f2 f3 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b6 b7 cAPPEND b8 b5 cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 f3 cCONS f3 cNIL cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 b0 cCONS b0 cNIL cflatten cmap b4 b5 cbetwn f2 f3 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 b0 cnext_el f1 f3 * / c= csplit_normal_list f0 f1 f2 f3 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b6 b7 cAPPEND b8 b5 cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 f3 cCONS f3 cNIL cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 b0 cCONS b0 cNIL cflatten cmap b4 b5 cbetwn f2 f3 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 b0 cnext_el f1 f3 f4 * / c= csplit_normal_list f0 f1 f2 f3 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b6 b7 cAPPEND b8 b5 cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 f3 cCONS f3 cNIL cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 b0 cCONS b0 cNIL cflatten cmap b4 b5 cbetwn f2 f3 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 b0 cnext_el f1 f3 f4
- |- ((?r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)) ==> (?r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)))
T c==> c? / c= crtrans f0 f1 f2 f3 cSUC f4 b0 c? / c= crtrans f0 f1 f2 f3 cSUC f4 b0
- (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((marked_list L) N) r) x) |- ((\f'. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f') /\ (((next_el f') x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i))))) = (\f'. (!w. (((f = f') /\ (((next_el f') x) = w)) ==> ((MEM w) r1)))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cfind_face f0 f1 f2 c==> c= crtrans f0 f3 f4 f1 f5 f6 c==> cmarked_list f0 f3 f4 f1 c= / ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f3 f4 f1 c/\ c= cfind_face f0 f1 b0 c= cnext_el b0 f1 b1 cMEM b1 crtrans f0 f3 f4 f1 f5 / ! c==> c/\ c= f2 b0 c= cnext_el b0 f1 b1 cMEM b1 f6
- ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F) |- (((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F) /\ ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F))
T c==> c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c/\ c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
- ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F) |- ((((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F) ==> ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F)) ==> ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F))
T c==> c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c==> c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((next_el r2) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) /\ ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- |- (((!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))) ==> ((\l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))) l2)) = ((\l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))) l2))
T c= c==> ! c= cMEM f0 cAPPEND f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 * / c= cMEM f0 cAPPEND f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2 * / c= cMEM f0 cAPPEND f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) |- (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cMEM f1 clist_of_darts f0 cMEM c, cSND f1 cFST f1 clist_of_darts f0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM w) r2), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cMEM f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- |- ((\f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))) f)
T * / ! ! c= csplit_normal_list f0 f1 b0 b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b8 b9 cAPPEND b10 b7 cAPPEND cCONS b4 cNIL cAPPEND cbetwn f1 b4 b1 cCONS b1 cNIL cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b2 cCONS b2 cNIL cflatten cmap b6 b7 cbetwn b0 b1 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f1 b2 cnext_el f1 b1 f2
- (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019)))) (real_of_num (NUMERAL _0)))))) |- ((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0 creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0
- (!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))) |- (((!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i))))) ==> ((\f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i))))) f)) = ((\f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i))))) f))
T c==> ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 c= c==> ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 b0 c= cnext_el b0 f3 b1 cMEM b1 crtrans f0 f1 f2 f3 f4 * / ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 b0 c= cnext_el b0 f3 b1 cMEM b1 crtrans f0 f1 f2 f3 f4 f5 * / ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 b0 c= cnext_el b0 f3 b1 cMEM b1 crtrans f0 f1 f2 f3 f4 f5
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) |- ((\d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) d)
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 * / c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 f1
- ((\z. ((((((ztrans L) N) r) x) i) = z)) z) |- ((((((((ztrans L) N) r) x) i) = z) ==> (?z. ((((((ztrans L) N) r) x) i) = z))) = (?z. ((((((ztrans L) N) r) x) i) = z)))
T c==> * / c= cztrans f0 f1 f2 f3 f4 b0 f5 c= c==> c= cztrans f0 f1 f2 f3 f4 f5 c? / c= cztrans f0 f1 f2 f3 f4 b0 c? / c= cztrans f0 f1 f2 f3 f4 b0
- (!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))) |- ((\f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i))))) f)
T c==> ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 * / ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 b0 c= cnext_el b0 f3 b1 cMEM b1 crtrans f0 f1 f2 f3 f4 f5
- ((((((ztrans L) N) r) x) i) = z) |- (((((((ztrans L) N) r) x) i) = z) /\ (?z. ((((((ztrans L) N) r) x) i) = z)))
T c==> c= cztrans f0 f1 f2 f3 f4 f5 c/\ c= cztrans f0 f1 f2 f3 f4 f5 c? / c= cztrans f0 f1 f2 f3 f4 b0
- |- (((!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))) ==> ((\f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))) f)) = ((\f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))) f))
T c= c==> ! ! ! c= csplit_normal_list f0 f1 b0 b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b8 b9 cAPPEND b10 b7 cAPPEND cCONS b4 cNIL cAPPEND cbetwn f1 b4 b1 cCONS b1 cNIL cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b2 cCONS b2 cNIL cflatten cmap b6 b7 cbetwn b0 b1 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f1 b2 cnext_el f1 b1 * / ! ! c= csplit_normal_list f0 f1 b0 b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b8 b9 cAPPEND b10 b7 cAPPEND cCONS b4 cNIL cAPPEND cbetwn f1 b4 b1 cCONS b1 cNIL cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b2 cCONS b2 cNIL cflatten cmap b6 b7 cbetwn b0 b1 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f1 b2 cnext_el f1 b1 f2 * / ! ! c= csplit_normal_list f0 f1 b0 b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b8 b9 cAPPEND b10 b7 cAPPEND cCONS b4 cNIL cAPPEND cbetwn f1 b4 b1 cCONS b1 cNIL cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b2 cCONS b2 cNIL cflatten cmap b6 b7 cbetwn b0 b1 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f1 b2 cnext_el f1 b1 f2
- ((normal_list L) (((((ntrans L) N) r) x) (SUC i))) |- (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) = T)
T c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c= cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 cT
- ((((((rtrans L) N) r) x) (SUC i)) = r2) |- (((((((rtrans L) N) r) x) (SUC i)) = r2) /\ (?r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)))
T c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c/\ c= crtrans f0 f1 f2 f3 cSUC f4 f5 c? / c= crtrans f0 f1 f2 f3 cSUC f4 b0
- |- (((!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))))) ==> ((\N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))))) N)) = ((\N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))))) N))
T c= c==> ! ! ! c= ctransform_list f0 b2 c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b1 c, b0 b1 c, b8 cSND b7 cAPPEND creplace b1 cCONS cSND b7 cNIL b0 cCONS cFST b7 cNIL csplit_normal_list f0 b1 b6 b3 b5 cfind_face f0 b3 cprev_el b1 b4 cl'z f0 b0 b1 b2 cl'y f0 b1 b2 * / ! ! c= ctransform_list f0 b2 c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b1 c, b0 b1 c, b8 cSND b7 cAPPEND creplace b1 cCONS cSND b7 cNIL b0 cCONS cFST b7 cNIL csplit_normal_list f0 b1 b6 b3 b5 cfind_face f0 b3 cprev_el b1 b4 cl'z f0 b0 b1 b2 cl'y f0 b1 b2 f1 * / ! ! c= ctransform_list f0 b2 c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b1 c, b0 b1 c, b8 cSND b7 cAPPEND creplace b1 cCONS cSND b7 cNIL b0 cCONS cFST b7 cNIL csplit_normal_list f0 b1 b6 b3 b5 cfind_face f0 b3 cprev_el b1 b4 cl'z f0 b0 b1 b2 cl'y f0 b1 b2 f1
- (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019)))) (real_of_num (NUMERAL _0)))))) |- ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- (((!p. (!x. ((x IN (\y. (p y))) = (p x)))) ==> ((\p. (!x. ((x IN (\y. (p y))) = (p x)))) p)) = ((\p. (!x. ((x IN (\y. (p y))) = (p x)))) p))
T c= c==> ! ! c= cIN b1 / * b0 b2 * b0 b1 * / ! c= cIN b1 / * b0 b2 * b0 b1 f0 * / ! c= cIN b1 / * b0 b2 * b0 b1 f0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM w) r2), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((MEM w) r2) /\ (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ cMEM f9 f5 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
- (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019)))) (real_of_num (NUMERAL _0)))))) |- (((((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- (~ (((f_list L) x') = ((next_el r2) x'))), (uniq (list_of_darts L)), (((next_el f) x) = w), (((next_el r2) x) = ((f_list L) x)), ((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x'), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- ((uniq f) ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cuniq clist_of_darts f0 c==> c= cnext_el f3 f4 f5 c==> c= cnext_el f2 f4 cf_list f0 f4 c==> c= cPOWER * part cnext_el f2 cindexf f5 f1 f2 f5 f1 c==> c= cfind_face f0 f4 f3 c==> cmarked_list f0 f6 f7 f4 c==> cuniq f3 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f5 f1 f2 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f5 f1 f2 cf_list f0 f4 c~ c= cindexf f5 cl'y f0 f2 f4 f3 cl'm f0 f2 f4
- |- (((t1 \/ t2) \/ t3) = (t1 \/ (t2 \/ t3)))
T c= c\/ c\/ f0 f1 f2 c\/ f0 c\/ f1 f2
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- |- (((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (!z. (((\z. ((((((ztrans L) N) r) x) i) = z)) z) ==> (?z. ((((((ztrans L) N) r) x) i) = z))))
T c==> * / c= cztrans f0 f1 f2 f3 f4 b0 f5 c? / c= cztrans f0 f1 f2 f3 f4 b0
- |- (((!x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t))))))) ==> ((\x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t))))))) x)) = ((\x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t))))))) x))
T c= c==> ! c= cIN b0 * part cGSPEC / * f0 * part cSETSPEC b1 * f0 / / c/\ b1 c= b0 b2 * / c= cIN b0 * part cGSPEC / * f0 * part cSETSPEC b1 * f0 / / c/\ b1 c= b0 b2 f1 * / c= cIN b0 * part cGSPEC / * f0 * part cSETSPEC b1 * f0 / / c/\ b1 c= b0 b2 f1
- |- (((!P. (!x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t)))))))) ==> ((\P. (!x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t)))))))) P)) = ((\P. (!x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t)))))))) P))
T c= c==> ! ! c= cIN b1 * part cGSPEC / * b0 * part cSETSPEC b2 * b0 / / c/\ b2 c= b1 b3 * / ! c= cIN b1 * part cGSPEC / * b0 * part cSETSPEC b2 * b0 / / c/\ b2 c= b1 b3 f0 * / ! c= cIN b1 * part cGSPEC / * b0 * part cSETSPEC b2 * b0 / / c/\ b2 c= b1 b3 f0
- ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) |- (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) = T)
T c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c= call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 cT
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((uniq r1) /\ (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f7 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ cuniq f7 c==> cMEM f9 f5 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- |- (((!x'. (((\z. ((((((ztrans L) N) r) x) i) = z)) x') ==> (?z. ((((((ztrans L) N) r) x) i) = z)))) ==> ((?z. ((((((ztrans L) N) r) x) i) = z)) ==> (?z. ((((((ztrans L) N) r) x) i) = z)))) = ((?z. ((((((ztrans L) N) r) x) i) = z)) ==> (?z. ((((((ztrans L) N) r) x) i) = z))))
T c= c==> ! c==> * / c= cztrans f0 f1 f2 f3 f4 b1 b0 c? / c= cztrans f0 f1 f2 f3 f4 b1 c==> c? / c= cztrans f0 f1 f2 f3 f4 b0 c? / c= cztrans f0 f1 f2 f3 f4 b0 c==> c? / c= cztrans f0 f1 f2 f3 f4 b0 c? / c= cztrans f0 f1 f2 f3 f4 b0
- (~ ((final_list L) r1)) |- (((final_list L) r1) = F)
T c==> c~ cfinal_list f0 f1 c= cfinal_list f0 f1 cF
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((all (f_last L)) (((((ntrans L) N) r) x) i)) /\ (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c/\ call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
- |- ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((!L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) ==> ((\L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) L)) = ((\L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) L))
T c= c==> ! ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 * / ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 f0 * / ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 f0
- |- (((!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))) ==> ((\r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))) r)) = ((\r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))) r))
T c= c==> ! ! c= ctransform_list f0 b1 c, f1 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b0 c, f1 b0 c, b7 cSND b6 cAPPEND creplace b0 cCONS cSND b6 cNIL f1 cCONS cFST b6 cNIL csplit_normal_list f0 b0 b5 b2 b4 cfind_face f0 b2 cprev_el b0 b3 cl'z f0 f1 b0 b1 cl'y f0 b0 b1 * / ! c= ctransform_list f0 b1 c, f1 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b0 c, f1 b0 c, b7 cSND b6 cAPPEND creplace b0 cCONS cSND b6 cNIL f1 cCONS cFST b6 cNIL csplit_normal_list f0 b0 b5 b2 b4 cfind_face f0 b2 cprev_el b0 b3 cl'z f0 f1 b0 b1 cl'y f0 b0 b1 f2 * / ! c= ctransform_list f0 b1 c, f1 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b0 c, f1 b0 c, b7 cSND b6 cAPPEND creplace b0 cCONS cSND b6 cNIL f1 cCONS cFST b6 cNIL csplit_normal_list f0 b0 b5 b2 b4 cfind_face f0 b2 cprev_el b0 b3 cl'z f0 f1 b0 b1 cl'y f0 b0 b1 f2
- (((!i. ((i < (((indexf w) z) f)) ==> ((((ITER (SUC (SUC i))) (next_el r2)) x) = ((f_list L) (((ITER (SUC i)) (next_el r2)) x))))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)))) = EMPTY))) ==> ((((indexf w) z) f) <= (((l'm L) r2) x))) |- ((((!i. ((i < (((indexf w) z) f)) ==> ((((ITER (SUC (SUC i))) (next_el r2)) x) = ((f_list L) (((ITER (SUC i)) (next_el r2)) x))))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)))) = EMPTY))) ==> ((((indexf w) z) f) <= (((l'm L) r2) x))) /\ (((!i. ((i < (((indexf w) z) f)) ==> ((((ITER (SUC (SUC i))) (next_el r2)) x) = ((f_list L) (((ITER (SUC i)) (next_el r2)) x))))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)))) = EMPTY))) ==> ((((indexf w) z) f) <= (((l'm L) r2) x))))
T c==> c==> c/\ ! c==> c< b0 cindexf f0 f1 f2 c= cITER cSUC cSUC b0 * part cnext_el f3 f4 cf_list f5 cITER cSUC b0 * part cnext_el f3 f4 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cITER cSUC cSUC b1 * part cnext_el f3 f4 cf_list f5 cITER cSUC b1 * part cnext_el f3 f4 b1 part cEMPTY c<= cindexf f0 f1 f2 cl'm f5 f3 f4 c/\ c==> c/\ ! c==> c< b0 cindexf f0 f1 f2 c= cITER cSUC cSUC b0 * part cnext_el f3 f4 cf_list f5 cITER cSUC b0 * part cnext_el f3 f4 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cITER cSUC cSUC b1 * part cnext_el f3 f4 cf_list f5 cITER cSUC b1 * part cnext_el f3 f4 b1 part cEMPTY c<= cindexf f0 f1 f2 cl'm f5 f3 f4 c==> c/\ ! c==> c< b0 cindexf f0 f1 f2 c= cITER cSUC cSUC b0 * part cnext_el f3 f4 cf_list f5 cITER cSUC b0 * part cnext_el f3 f4 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cITER cSUC cSUC b1 * part cnext_el f3 f4 cf_list f5 cITER cSUC b1 * part cnext_el f3 f4 b1 part cEMPTY c<= cindexf f0 f1 f2 cl'm f5 f3 f4
- (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))))) |- (((((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- (((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (?r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)))
T c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c? / c= crtrans f0 f1 f2 f3 cSUC f4 b0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f8 f5 c==> c<= cSUC f11 cindexf f6 f8 f5 c==> c< f11 cindexf f6 f8 f5 c==> cMEM f3 f7 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f12 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f12 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cf_list f0 f3
- |- ((?z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)) ==> (?z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)))
T c==> c? / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0 c? / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((\y. ((((l'y L) r1) x) = y)) y) |- ((((((l'y L) r1) x) = y) ==> (?y. ((((l'y L) r1) x) = y))) = (?y. ((((l'y L) r1) x) = y)))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c= c==> c= cl'y f0 f1 f2 f3 c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0
- |- ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t))))))
T c= cIN f0 * part cGSPEC / * f1 * part cSETSPEC b0 * f1 / / c/\ b0 c= f0 b1
- (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) /\ (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ c= cf_list f2 f3 cnext_el f0 f3 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 f6 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 cSUC f6 c==> cis_restricted chypermap_of_list f2 c==> cuniq cflatten cntrans f2 f4 f5 f1 f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f7 f1 f8 c==> c= cnext_el f9 f1 cf_list f2 f1 c==> c= cprev_el f9 f10 f11 c==> c= cl'y f2 f9 f1 f12 c==> c= cztrans f2 f4 f5 f1 f6 f10 c==> c= cfind_face f2 f1 f7 c==> c= crtrans f2 f4 f5 f1 f6 f9 c==> c= crtrans f2 f4 f5 f1 cSUC f6 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 f6 c==> cMEM f1 f9 c==> cMEM f3 f0 c==> cMEM f9 cntrans f2 f4 f5 f1 f6 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 f6 c==> cnormal_list f2 cntrans f2 f4 f5 f1 f6 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 f6 f9 f1 c==> cmarked_list f2 f4 f5 f1 c==> cmarked_list f2 cntrans f2 f4 f5 f1 f6 crtrans f2 f4 f5 f1 f6 f1 c/\ call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 f6 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 f6 c==> call * part cloop_list f2 cntrans f2 f4 f5 f1 f6 c==> ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 f6 c==> cuniq f9 c==> cMEM f8 f0 c==> cmarked_list f2 cntrans f2 f4 f5 f1 cSUC f6 f0 f1 c==> cnormal_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> cMEM f0 cntrans f2 f4 f5 f1 cSUC f6 c==> cMEM f1 f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> c= cnext_el f0 f1 cf_list f2 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 cSUC f6 ce_list f1 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 cSUC f6 f0 f1 c==> cuniq cflatten cntrans f2 f4 f5 f1 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 cSUC f6 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 cSUC f6 c==> call * part cloop_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 cSUC f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 cSUC f6 c==> cuniq f0 c==> c= cPOWER * part cnext_el f0 cindexf f8 f3 f0 f8 f3 c~ c= cindexf f8 cl'y f2 f0 f1 f7 cl'm f2 f0 f1
- |- ((((\y. ((((l'y L) r1) x) = y)) y) ==> (?y. ((((l'y L) r1) x) = y))) = T)
T c= c==> * / c= cl'y f0 f1 f2 b0 f3 c? / c= cl'y f0 f1 f2 b0 cT
- |- (((!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))) ==> ((\x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))) x)) = ((\x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))) x))
T c= c==> ! ! c= crtrans f0 f1 f2 b0 b1 cSND cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 * / ! c= crtrans f0 f1 f2 b0 b1 cSND cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3 * / ! c= crtrans f0 f1 f2 b0 b1 cSND cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3
- (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((marked_list L) N) r) x) |- ((\w'. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w')))))) ==> ((MEM w') (((((rtrans L) N) r) x) i)))) = (\w'. ((w = w') ==> ((MEM w') r1))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> c= crtrans f0 f4 f5 f2 f6 f7 c==> cmarked_list f0 f4 f5 f2 c= / c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f4 f5 f2 c/\ c= cfind_face f0 f2 f1 c= cnext_el f1 f2 b0 cMEM b0 crtrans f0 f4 f5 f2 f6 / c==> c= f3 b0 cMEM b0 f7
- (~ (((f_list L) x') = ((next_el r2) x'))), (uniq (list_of_darts L)), (((next_el f) x) = w), (((next_el r2) x) = ((f_list L) x)), ((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x'), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((uniq (list_of_darts L)) ==> (uniq ((find_face L) x))) ==> (((((next_el r2) o ((POWER (next_el r2)) (SUC (((indexf w) x') r2)))) x) = ((f_list L) (((POWER (next_el r2)) (((indexf w) x') r2)) ((f_list L) x)))) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c==> cuniq clist_of_darts f0 c==> c= cnext_el f3 f4 f5 c==> c= cnext_el f2 f4 cf_list f0 f4 c==> c= cPOWER * part cnext_el f2 cindexf f5 f1 f2 f5 f1 c==> c= cfind_face f0 f4 f3 c==> cmarked_list f0 f6 f7 f4 c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f4 c==> c= co * part cnext_el f2 * * part cPOWER * part cnext_el f2 cSUC cindexf f5 f1 f2 f4 cf_list f0 cPOWER * part cnext_el f2 cindexf f5 f1 f2 cf_list f0 f4 c~ c= cindexf f5 cl'y f0 f2 f4 f3 cl'm f0 f2 f4
- |- ((\L. (!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))))) L)
T * / ! ! ! ! c= csplit_normal_list b0 b1 b2 b3 b4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b10 b11 cAPPEND b12 b9 cAPPEND cCONS b6 cNIL cAPPEND cbetwn b1 b6 b3 cCONS b3 cNIL cAPPEND cCONS b5 cNIL cAPPEND cbetwn b1 b5 b4 cCONS b4 cNIL cflatten cmap b8 b9 cbetwn b2 b3 b6 / cmap / cPOWER * part cn_list b0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten b0 cnext_el b1 b4 cnext_el b1 b3 f0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) /\ (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))))) |- (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- (!r2. (((\r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)) r2) ==> (?r2. ((((((rtrans L) N) r) x) (SUC i)) = r2))))
T c==> * / c= crtrans f0 f1 f2 f3 cSUC f4 b0 f5 c? / c= crtrans f0 f1 f2 f3 cSUC f4 b0
- |- (((!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) ==> ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)) = ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3))
T c= c==> ! c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
- ((((((rtrans L) N) r) x) i) = r1) |- ((\r1. ((((((rtrans L) N) r) x) i) = r1)) r1)
T c==> c= crtrans f0 f1 f2 f3 f4 f5 * / c= crtrans f0 f1 f2 f3 f4 b0 f5
- (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) |- ((\a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))) a)
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 * / c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 f3
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) /\ ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f11 cindexf f6 f8 f5 c==> c<= cSUC f11 cindexf f6 f8 f5 c==> c< f11 cindexf f6 f8 f5 c==> cMEM f3 f7 c==> cMEM f3 f12 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f12 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cf_list f0 f3
- |- ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x)
T * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) /\ ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f7 f3 f8 c==> c= cnext_el f9 f3 cf_list f0 f3 c==> c= cprev_el f9 f10 f11 c==> c= cl'y f0 f9 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f7 c==> c= crtrans f0 f1 f2 f3 f4 f9 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f9 c==> cMEM f6 f5 c==> cMEM f9 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f9 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f9 c==> cMEM f8 f5 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f8 f6 f5 f8 f6 c~ c= cindexf f8 cl'y f0 f5 f3 f7 cl'm f0 f5 f3
- (((next_el f) x) = w) |- ((\w'. (((transform_assumption_v2 _10304039) /\ ((good_list _10304039) /\ ((good_list_nodes _10304039) /\ (((((marked_list _10304039) N) r) x) /\ ((((find_face _10304039) x) = f) /\ (((next_el f) x) = w')))))) ==> ((MEM w') (((((rtrans _10304039) N) r) x) i)))) = (\w'. (((transform_assumption_v2 _10304039) /\ ((good_list _10304039) /\ ((good_list_nodes _10304039) /\ (((((marked_list _10304039) N) r) x) /\ ((((find_face _10304039) x) = f) /\ (w = w')))))) ==> ((MEM w') (((((rtrans _10304039) N) r) x) i)))))
T c==> c= cnext_el f0 f1 f2 c= / c==> c/\ ctransform_assumption_v2 f3 c/\ cgood_list f3 c/\ cgood_list_nodes f3 c/\ cmarked_list f3 f4 f5 f1 c/\ c= cfind_face f3 f1 f0 c= cnext_el f0 f1 b0 cMEM b0 crtrans f3 f4 f5 f1 f6 / c==> c/\ ctransform_assumption_v2 f3 c/\ cgood_list f3 c/\ cgood_list_nodes f3 c/\ cmarked_list f3 f4 f5 f1 c/\ c= cfind_face f3 f1 f0 c= f2 b0 cMEM b0 crtrans f3 f4 f5 f1 f6
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ c= cf_list f2 f3 cnext_el f0 f3 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 f6 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 cSUC f6 c==> cis_restricted chypermap_of_list f2 c==> cuniq cflatten cntrans f2 f4 f5 f1 f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f7 f1 f8 c==> c= cnext_el f9 f1 cf_list f2 f1 c==> c= cprev_el f9 f10 f11 c==> c= cl'y f2 f9 f1 f12 c==> c= cztrans f2 f4 f5 f1 f6 f10 c==> c= cfind_face f2 f1 f7 c==> c= crtrans f2 f4 f5 f1 f6 f9 c==> c= crtrans f2 f4 f5 f1 cSUC f6 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 f6 c==> cMEM f1 f9 c==> cMEM f3 f0 c==> cMEM f9 cntrans f2 f4 f5 f1 f6 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 f6 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 f6 c==> cnormal_list f2 cntrans f2 f4 f5 f1 f6 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 f6 f9 f1 c==> cmarked_list f2 f4 f5 f1 c==> cmarked_list f2 cntrans f2 f4 f5 f1 f6 crtrans f2 f4 f5 f1 f6 f1 c==> call * part cloop_list f2 cntrans f2 f4 f5 f1 f6 c==> ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 f6 c==> cuniq f9 c==> cMEM f8 f0 c==> cmarked_list f2 cntrans f2 f4 f5 f1 cSUC f6 f0 f1 c==> cnormal_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> cMEM f0 cntrans f2 f4 f5 f1 cSUC f6 c==> cMEM f1 f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> c= cnext_el f0 f1 cf_list f2 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 cSUC f6 ce_list f1 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 cSUC f6 f0 f1 c==> cuniq cflatten cntrans f2 f4 f5 f1 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 cSUC f6 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 cSUC f6 c==> call * part cloop_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 cSUC f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 cSUC f6 c==> cuniq f0 c==> c= cPOWER * part cnext_el f0 cindexf f8 f3 f0 f8 f3 c~ c= cindexf f8 cl'y f2 f0 f1 f7 cl'm f2 f0 f1
- |- ((\N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))))) N)
T * / ! ! c= ctransform_list f0 b2 c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b1 c, b0 b1 c, b8 cSND b7 cAPPEND creplace b1 cCONS cSND b7 cNIL b0 cCONS cFST b7 cNIL csplit_normal_list f0 b1 b6 b3 b5 cfind_face f0 b3 cprev_el b1 b4 cl'z f0 b0 b1 b2 cl'y f0 b1 b2 f1
- ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) = T)
T c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f5 f3 c= cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f5 f3 cT
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) /\ ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c/\ ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
- |- (((NUMERAL (BIT0 (BIT1 _0))) * (NUMERAL (BIT1 _0))) = (NUMERAL (BIT0 (BIT1 _0))))
T c= c* cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0
- |- (((!L. (!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))))) ==> ((\L. (!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))))) L)) = ((\L. (!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))))) L))
T c= c==> ! ! ! ! ! c= csplit_normal_list b0 b1 b2 b3 b4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b10 b11 cAPPEND b12 b9 cAPPEND cCONS b6 cNIL cAPPEND cbetwn b1 b6 b3 cCONS b3 cNIL cAPPEND cCONS b5 cNIL cAPPEND cbetwn b1 b5 b4 cCONS b4 cNIL cflatten cmap b8 b9 cbetwn b2 b3 b6 / cmap / cPOWER * part cn_list b0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten b0 cnext_el b1 b4 cnext_el b1 b3 * / ! ! ! ! c= csplit_normal_list b0 b1 b2 b3 b4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b10 b11 cAPPEND b12 b9 cAPPEND cCONS b6 cNIL cAPPEND cbetwn b1 b6 b3 cCONS b3 cNIL cAPPEND cCONS b5 cNIL cAPPEND cbetwn b1 b5 b4 cCONS b4 cNIL cflatten cmap b8 b9 cbetwn b2 b3 b6 / cmap / cPOWER * part cn_list b0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten b0 cnext_el b1 b4 cnext_el b1 b3 f0 * / ! ! ! ! c= csplit_normal_list b0 b1 b2 b3 b4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b10 b11 cAPPEND b12 b9 cAPPEND cCONS b6 cNIL cAPPEND cbetwn b1 b6 b3 cCONS b3 cNIL cAPPEND cCONS b5 cNIL cAPPEND cbetwn b1 b5 b4 cCONS b4 cNIL cflatten cmap b8 b9 cbetwn b2 b3 b6 / cmap / cPOWER * part cn_list b0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten b0 cnext_el b1 b4 cnext_el b1 b3 f0
- (!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))) |- ((\w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))) w)
T c==> ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 * / c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 f4 c= cnext_el f4 f3 b0 cMEM b0 crtrans f0 f1 f2 f3 f5 f6
- |- ((\N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) N)
T * / ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 f1
- ((A a) /\ (!a. (~ (A a)))) |- ((~ F) ==> F)
T c==> c/\ * f0 f1 ! c~ * f0 b0 c==> c~ cF cF
- ((((((rtrans L) N) r) x) i) = r1) |- (((((((rtrans L) N) r) x) i) = r1) /\ (?r1. ((((((rtrans L) N) r) x) i) = r1)))
T c==> c= crtrans f0 f1 f2 f3 f4 f5 c/\ c= crtrans f0 f1 f2 f3 f4 f5 c? / c= crtrans f0 f1 f2 f3 f4 b0
- ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) = T)
T c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c= cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 cT
- (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019)))) (real_of_num (NUMERAL _0)))))) |- (((real_ge ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019)))) (real_of_num (NUMERAL _0))) = (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019)))) (real_of_num (NUMERAL _0)))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0 c= creal_ge creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_num cNUMERAL c_0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) /\ (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- |- ((real_of_num (NUMERAL _0)) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((\r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) r)
T * / ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2
- |- (((!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t))))))) ==> ((\x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t))))))) x)) = ((\x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t))))))) x))
T c= c==> ! c= cGSPEC / * f0 * part cSETSPEC b1 b0 * f0 / / c/\ b1 c= b0 b2 * / c= cGSPEC / * f0 * part cSETSPEC b1 b0 * f0 / / c/\ b1 c= b0 b2 f1 * / c= cGSPEC / * f0 * part cSETSPEC b1 b0 * f0 / / c/\ b1 c= b0 b2 f1
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
- |- ((\l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))) l2)
T * / c= cMEM f0 cAPPEND f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2
- |- (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x))
T c= cGSPEC / c? / cSETSPEC b0 * f0 b1 b1 f1 * f0 f1
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) |- ((\d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) d)
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 * / c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 f5
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq r2), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq f6 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f7 f3 f8 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cnext_el f6 f3 cf_list f0 f3 c==> c= cprev_el f5 f9 f10 c==> c= cl'y f0 f5 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f8 cPOWER * part cnext_el f7 f12 f8 f6 f12 c==> c= cindexf f8 cPOWER * part cnext_el f7 cSUC f12 f8 f6 cSUC f12 c==> c= cindexf f8 cytrans f0 f1 f2 f3 cSUC f4 f7 cl'm f0 f6 f3 c==> c= cfind_face f0 f3 f7 c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f8 f9 f7 c==> c<= cSUC f12 cindexf f8 f9 f7 c==> c< f12 cindexf f8 f9 f7 c==> cMEM f3 f5 c==> cMEM f3 f6 c==> cMEM cPOWER * part cnext_el f7 f12 f8 f6 c==> cMEM cPOWER * part cnext_el f7 cSUC f12 f8 f6 c==> cMEM f5 cntrans f0 f1 f2 f3 f4 c==> cMEM f6 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f5 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f6 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f6 f3 c= cPOWER * part cnext_el f6 f12 cnext_el f6 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f6 f12 cf_list f0 f3
- (((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F) ==> ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F)) |- ((((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F) ==> ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F)) /\ (((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F) ==> ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F)))
T c==> c==> c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c/\ c==> c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF
- |- ((\p. (!x. ((x IN (\y. (p y))) = (p x)))) p)
T * / ! c= cIN b1 / * b0 b2 * b0 b1 f0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((((marked_list L) (((((ntrans L) N) r) x) i)) r1) x) |- (((((marked_list L) (((((ntrans L) N) r) x) i)) r1) x) = T)
T c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 f5 f3 c= cmarked_list f0 cntrans f0 f1 f2 f3 f4 f5 f3 cT
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
- |- ((((!i. ((i < (((indexf w) z) f)) ==> ((((ITER (SUC (SUC i))) (next_el r2)) x) = ((f_list L) (((ITER (SUC i)) (next_el r2)) x))))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)))) = EMPTY))) ==> ((((indexf w) z) f) <= (((l'm L) r2) x))) ==> (((!i. ((i < (((indexf w) z) f)) ==> ((((ITER (SUC (SUC i))) (next_el r2)) x) = ((f_list L) (((ITER (SUC i)) (next_el r2)) x))))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)))) = EMPTY))) ==> ((((indexf w) z) f) <= (((l'm L) r2) x))))
T c==> c==> c/\ ! c==> c< b0 cindexf f0 f1 f2 c= cITER cSUC cSUC b0 * part cnext_el f3 f4 cf_list f5 cITER cSUC b0 * part cnext_el f3 f4 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cITER cSUC cSUC b1 * part cnext_el f3 f4 cf_list f5 cITER cSUC b1 * part cnext_el f3 f4 b1 part cEMPTY c<= cindexf f0 f1 f2 cl'm f5 f3 f4 c==> c/\ ! c==> c< b0 cindexf f0 f1 f2 c= cITER cSUC cSUC b0 * part cnext_el f3 f4 cf_list f5 cITER cSUC b0 * part cnext_el f3 f4 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cITER cSUC cSUC b1 * part cnext_el f3 f4 cf_list f5 cITER cSUC b1 * part cnext_el f3 f4 b1 part cEMPTY c<= cindexf f0 f1 f2 cl'm f5 f3 f4
- |- (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) = (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))))
T c= creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- (((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) = (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))))
T c= creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f7 f3 f8 c==> c= cnext_el f9 f3 cf_list f0 f3 c==> c= cprev_el f9 f10 f11 c==> c= cl'y f0 f9 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f7 c==> c= crtrans f0 f1 f2 f3 f4 f9 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 f9 c==> cMEM f6 f5 c==> cMEM f9 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f9 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cuniq f9 c==> cMEM f8 f5 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f8 f6 f5 f8 f6 c~ c= cindexf f8 cl'y f0 f5 f3 f7 cl'm f0 f5 f3
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) /\ ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- (!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))) |- ((\i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))) i)
T c==> ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 * / ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 b1 c= cnext_el b1 f3 b2 cMEM b2 crtrans f0 f1 f2 f3 b0 f4
- |- (((!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x))) ==> ((\x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x))) x)) = ((\x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x))) x))
T c= c==> ! c= cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 b0 * f0 b0 * / c= cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 b0 * f0 b0 f1 * / c= cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 b0 * f0 b0 f1
- |- (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))))) |- ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((!x. (P x)) = ((P T) /\ (P F)))
T c= ! * f0 b0 c/\ * f0 cT * f0 cF
- |- ((x IN (\y. (p y))) = (p x))
T c= cIN f0 / * f1 b0 * f1 f0
- |- (T = ((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= cT creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((((((ztrans L) N) r) x) i) = z) ==> (?z. ((((((ztrans L) N) r) x) i) = z)))
T c==> c= cztrans f0 f1 f2 f3 f4 f5 c? / c= cztrans f0 f1 f2 f3 f4 b0
- ((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) |- (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) = T)
T c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c= call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 cT
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- (~ (((f_list L) x') = ((next_el r2) x'))) |- ((((f_list L) x') = ((next_el r2) x')) = F)
T c==> c~ c= cf_list f0 f1 cnext_el f2 f1 c= c= cf_list f0 f1 cnext_el f2 f1 cF
- |- (((((((rtrans L) N) r) x) i) = r1) ==> (?r1. ((((((rtrans L) N) r) x) i) = r1)))
T c==> c= crtrans f0 f1 f2 f3 f4 f5 c? / c= crtrans f0 f1 f2 f3 f4 b0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((!t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) ==> ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)) = ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1))
T c= c==> ! ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
- |- (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))
T c= cMEM f0 cAPPEND f1 f2 c\/ cMEM f0 f1 cMEM f0 f2
- ((!i. ((i < (((indexf w) z) f)) ==> ((((ITER (SUC (SUC i))) (next_el r2)) x) = ((f_list L) (((ITER (SUC i)) (next_el r2)) x))))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)))) = EMPTY))), (((!i. ((i < (((indexf w) z) f)) ==> ((((ITER (SUC (SUC i))) (next_el r2)) x) = ((f_list L) (((ITER (SUC i)) (next_el r2)) x))))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)))) = EMPTY))) ==> ((((indexf w) z) f) <= (((l'm L) r2) x))) |- ((((!i. ((i < (((indexf w) z) f)) ==> ((((ITER (SUC (SUC i))) (next_el r2)) x) = ((f_list L) (((ITER (SUC i)) (next_el r2)) x))))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)))) = EMPTY))) ==> ((((indexf w) z) f) <= (((l'm L) r2) x))) /\ ((((indexf w) z) f) <= (((l'm L) r2) x)))
T c==> c/\ ! c==> c< b0 cindexf f0 f1 f2 c= cITER cSUC cSUC b0 * part cnext_el f3 f4 cf_list f5 cITER cSUC b0 * part cnext_el f3 f4 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cITER cSUC cSUC b1 * part cnext_el f3 f4 cf_list f5 cITER cSUC b1 * part cnext_el f3 f4 b1 part cEMPTY c==> c==> c/\ ! c==> c< b0 cindexf f0 f1 f2 c= cITER cSUC cSUC b0 * part cnext_el f3 f4 cf_list f5 cITER cSUC b0 * part cnext_el f3 f4 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cITER cSUC cSUC b1 * part cnext_el f3 f4 cf_list f5 cITER cSUC b1 * part cnext_el f3 f4 b1 part cEMPTY c<= cindexf f0 f1 f2 cl'm f5 f3 f4 c/\ c==> c/\ ! c==> c< b0 cindexf f0 f1 f2 c= cITER cSUC cSUC b0 * part cnext_el f3 f4 cf_list f5 cITER cSUC b0 * part cnext_el f3 f4 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cITER cSUC cSUC b1 * part cnext_el f3 f4 cf_list f5 cITER cSUC b1 * part cnext_el f3 f4 b1 part cEMPTY c<= cindexf f0 f1 f2 cl'm f5 f3 f4 c<= cindexf f0 f1 f2 cl'm f5 f3 f4
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f8 f9 c==> c= cl'y f0 f7 f3 f10 c==> c= cztrans f0 f1 f2 f3 f4 f8 c==> c= cindexf f6 cPOWER * part cnext_el f5 f11 f6 f12 f11 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f11 f6 f12 cSUC f11 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f12 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f12 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> c<= f11 cindexf f6 f8 f5 c==> c<= cSUC f11 cindexf f6 f8 f5 c==> c< f11 cindexf f6 f8 f5 c==> cMEM f3 f7 c==> cMEM f3 f12 c==> cMEM cPOWER * part cnext_el f5 f11 f6 f12 c==> cMEM cPOWER * part cnext_el f5 cSUC f11 f6 f12 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f12 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f12 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f12 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f12 f11 cnext_el f12 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f12 f11 cf_list f0 f3
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM w) r2), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))))) |- (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq r2), (uniq (flatten (((((ntrans L) N) r) x) i))), (uniq (flatten (((((ntrans L) N) r) x) (SUC i)))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((uniq r2) /\ ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq f6 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f7 f3 f8 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cnext_el f6 f3 cf_list f0 f3 c==> c= cprev_el f5 f9 f10 c==> c= cl'y f0 f5 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f8 cPOWER * part cnext_el f7 f12 f8 f6 f12 c==> c= cindexf f8 cPOWER * part cnext_el f7 cSUC f12 f8 f6 cSUC f12 c==> c= cindexf f8 cytrans f0 f1 f2 f3 cSUC f4 f7 cl'm f0 f6 f3 c==> c= cfind_face f0 f3 f7 c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f8 f9 f7 c==> c<= cSUC f12 cindexf f8 f9 f7 c==> c< f12 cindexf f8 f9 f7 c==> cMEM f3 f5 c==> cMEM f3 f6 c==> cMEM cPOWER * part cnext_el f7 f12 f8 f6 c==> cMEM cPOWER * part cnext_el f7 cSUC f12 f8 f6 c==> cMEM f5 cntrans f0 f1 f2 f3 f4 c==> cMEM f6 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f5 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f6 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f6 f3 c/\ cuniq f6 c= cPOWER * part cnext_el f6 f12 cnext_el f6 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f6 f12 cf_list f0 f3
- ((all (loop_list L)) (((((ntrans L) N) r) x) i)) |- (((all (loop_list L)) (((((ntrans L) N) r) x) i)) = T)
T c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c= call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 cT
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) /\ ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- |- (((NUMERAL _0) < (NUMERAL (BIT1 _0))) = T)
T c= c< cNUMERAL c_0 cNUMERAL cBIT1 c_0 cT
- (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- ((\w'. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w')))))) ==> ((MEM w') (((((rtrans L) N) r) x) _10304035)))) = (\w'. ((w = w') ==> ((MEM w') (((((rtrans L) N) r) x) _10304035)))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cmarked_list f0 f4 f5 f2 c= / c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f4 f5 f2 c/\ c= cfind_face f0 f2 f1 c= cnext_el f1 f2 b0 cMEM b0 crtrans f0 f4 f5 f2 f6 / c==> c= f3 b0 cMEM b0 crtrans f0 f4 f5 f2 f6
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((!A. ((!x. (~ (A x))) = (~ (?a. (A a))))) = (!A. ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F)))
T c= ! c= ! c~ * b0 b1 c~ c? / * b0 b1 ! c==> c~ c= ! c~ * b0 b1 c~ c? / * b0 b1 cF
- |- (((!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))) ==> ((\i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))) i)) = ((\i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))) i))
T c= c==> ! c= crtrans f0 f1 f2 f3 b0 cSND cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 * / c= crtrans f0 f1 f2 f3 b0 cSND cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4 * / c= crtrans f0 f1 f2 f3 b0 cSND cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4
- ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)) |- (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))
T c==> c= cztrans f0 f1 f2 f3 f4 cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cztrans f0 f1 f2 f3 f4
- (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((~ (((f_list L) x') = ((next_el r2) x'))) /\ ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ c= cf_list f2 f3 cnext_el f0 f3 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 f6 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 cSUC f6 c==> cis_restricted chypermap_of_list f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f7 f1 f8 c==> c= cnext_el f9 f1 cf_list f2 f1 c==> c= cprev_el f9 f10 f11 c==> c= cl'y f2 f9 f1 f12 c==> c= cztrans f2 f4 f5 f1 f6 f10 c==> c= cfind_face f2 f1 f7 c==> c= crtrans f2 f4 f5 f1 f6 f9 c==> c= crtrans f2 f4 f5 f1 cSUC f6 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 f6 c==> cMEM f1 f9 c==> cMEM f3 f0 c==> cMEM f9 cntrans f2 f4 f5 f1 f6 c==> cnormal_list f2 cntrans f2 f4 f5 f1 f6 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 f6 f9 f1 c==> cmarked_list f2 f4 f5 f1 c==> cmarked_list f2 cntrans f2 f4 f5 f1 f6 crtrans f2 f4 f5 f1 f6 f1 c/\ c~ c= cf_list f2 f3 cnext_el f0 f3 c==> cuniq cflatten cntrans f2 f4 f5 f1 f6 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 f6 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 f6 c==> call * part cloop_list f2 cntrans f2 f4 f5 f1 f6 c==> ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 f6 c==> cuniq f9 c==> cMEM f8 f0 c==> cmarked_list f2 cntrans f2 f4 f5 f1 cSUC f6 f0 f1 c==> cnormal_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> cMEM f0 cntrans f2 f4 f5 f1 cSUC f6 c==> cMEM f1 f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> c= cnext_el f0 f1 cf_list f2 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 cSUC f6 ce_list f1 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 cSUC f6 f0 f1 c==> cuniq cflatten cntrans f2 f4 f5 f1 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 cSUC f6 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 cSUC f6 c==> call * part cloop_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 cSUC f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 cSUC f6 c==> cuniq f0 c==> c= cPOWER * part cnext_el f0 cindexf f8 f3 f0 f8 f3 c~ c= cindexf f8 cl'y f2 f0 f1 f7 cl'm f2 f0 f1
- |- (!r1. (((\r1. ((((((rtrans L) N) r) x) i) = r1)) r1) ==> (?r1. ((((((rtrans L) N) r) x) i) = r1))))
T c==> * / c= crtrans f0 f1 f2 f3 f4 b0 f5 c? / c= crtrans f0 f1 f2 f3 f4 b0
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
- (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((MEM x') r2) /\ ((~ (((f_list L) x') = ((next_el r2) x'))) ==> ((uniq (flatten (((((ntrans L) N) r) x) i))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))))))))))))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 f5 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 cSUC f5 c==> cis_restricted chypermap_of_list f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f6 f1 f7 c==> c= cnext_el f8 f1 cf_list f2 f1 c==> c= cprev_el f8 f9 f10 c==> c= cl'y f2 f8 f1 f11 c==> c= cztrans f2 f3 f4 f1 f5 f9 c==> c= cfind_face f2 f1 f6 c==> c= crtrans f2 f3 f4 f1 f5 f8 c==> c= crtrans f2 f3 f4 f1 cSUC f5 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f3 f4 f1 f5 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f3 f4 f1 f5 c==> cMEM f1 f8 c==> cMEM f12 f0 c==> cMEM f8 cntrans f2 f3 f4 f1 f5 c==> cnormal_list f2 cntrans f2 f3 f4 f1 f5 c==> cs_flag_list f2 cntrans f2 f3 f4 f1 f5 f8 f1 c==> cmarked_list f2 f3 f4 f1 c==> cmarked_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 c/\ cMEM f12 f0 c==> c~ c= cf_list f2 f12 cnext_el f0 f12 c==> cuniq cflatten cntrans f2 f3 f4 f1 f5 c==> call / c~ c= b0 cNIL cntrans f2 f3 f4 f1 f5 c==> call * part cf_last f2 cntrans f2 f3 f4 f1 f5 c==> call * part cloop_list f2 cntrans f2 f3 f4 f1 f5 c==> ! c==> cMEM b0 cflatten cntrans f2 f3 f4 f1 f5 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f3 f4 f1 f5 c==> cuniq f8 c==> cMEM f7 f0 c==> cmarked_list f2 cntrans f2 f3 f4 f1 cSUC f5 f0 f1 c==> cnormal_list f2 cntrans f2 f3 f4 f1 cSUC f5 c==> cMEM f0 cntrans f2 f3 f4 f1 cSUC f5 c==> cMEM f1 f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f3 f4 f1 cSUC f5 c==> c= cnext_el f0 f1 cf_list f2 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f3 f4 f1 cSUC f5 ce_list f1 c==> cs_flag_list f2 cntrans f2 f3 f4 f1 cSUC f5 f0 f1 c==> cuniq cflatten cntrans f2 f3 f4 f1 cSUC f5 c==> call / c~ c= b0 cNIL cntrans f2 f3 f4 f1 cSUC f5 c==> call * part cf_last f2 cntrans f2 f3 f4 f1 cSUC f5 c==> call * part cloop_list f2 cntrans f2 f3 f4 f1 cSUC f5 c==> ! c==> cMEM b0 cflatten cntrans f2 f3 f4 f1 cSUC f5 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f3 f4 f1 cSUC f5 c==> cuniq f0 c==> c= cPOWER * part cnext_el f0 cindexf f7 f12 f0 f7 f12 c~ c= cindexf f7 cl'y f2 f0 f1 f6 cl'm f2 f0 f1
- |- (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((\z. ((((((ztrans L) N) r) x) i) = z)) z) |- (((\z. ((((((ztrans L) N) r) x) i) = z)) z) /\ (?z. ((((((ztrans L) N) r) x) i) = z)))
T c==> * / c= cztrans f0 f1 f2 f3 f4 b0 f5 c/\ * / c= cztrans f0 f1 f2 f3 f4 b0 f5 c? / c= cztrans f0 f1 f2 f3 f4 b0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((all (loop_list L)) (((((ntrans L) N) r) x) i)) /\ ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> (((MEM w) r2) ==> (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c~ c= cf_list f2 f3 cnext_el f0 f3 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 f6 c==> c~ cfinal_list f2 crtrans f2 f4 f5 f1 cSUC f6 c==> cis_restricted chypermap_of_list f2 c==> cuniq cflatten cntrans f2 f4 f5 f1 f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f7 f1 f8 c==> c= cnext_el f9 f1 cf_list f2 f1 c==> c= cprev_el f9 f10 f11 c==> c= cl'y f2 f9 f1 f12 c==> c= cztrans f2 f4 f5 f1 f6 f10 c==> c= cfind_face f2 f1 f7 c==> c= crtrans f2 f4 f5 f1 f6 f9 c==> c= crtrans f2 f4 f5 f1 cSUC f6 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 f6 c==> cMEM f1 f9 c==> cMEM f3 f0 c==> cMEM f9 cntrans f2 f4 f5 f1 f6 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 f6 c==> call * part cloop_list f2 cntrans f2 f4 f5 f1 f6 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 f6 c==> cnormal_list f2 cntrans f2 f4 f5 f1 f6 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 f6 f9 f1 c==> cmarked_list f2 f4 f5 f1 c==> cmarked_list f2 cntrans f2 f4 f5 f1 f6 crtrans f2 f4 f5 f1 f6 f1 c/\ call * part cloop_list f2 cntrans f2 f4 f5 f1 f6 c==> ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 f6 c==> cuniq f9 c==> cMEM f8 f0 c==> cmarked_list f2 cntrans f2 f4 f5 f1 cSUC f6 f0 f1 c==> cnormal_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> cMEM f0 cntrans f2 f4 f5 f1 cSUC f6 c==> cMEM f1 f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> c= cnext_el f0 f1 cf_list f2 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f4 f5 f1 cSUC f6 ce_list f1 c==> cs_flag_list f2 cntrans f2 f4 f5 f1 cSUC f6 f0 f1 c==> cuniq cflatten cntrans f2 f4 f5 f1 cSUC f6 c==> call / c~ c= b0 cNIL cntrans f2 f4 f5 f1 cSUC f6 c==> call * part cf_last f2 cntrans f2 f4 f5 f1 cSUC f6 c==> call * part cloop_list f2 cntrans f2 f4 f5 f1 cSUC f6 c==> ! c==> cMEM b0 cflatten cntrans f2 f4 f5 f1 cSUC f6 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten cntrans f2 f4 f5 f1 cSUC f6 c==> cuniq f0 c==> c= cPOWER * part cnext_el f0 cindexf f8 f3 f0 f8 f3 c~ c= cindexf f8 cl'y f2 f0 f1 f7 cl'm f2 f0 f1
- ((!i. ((i < (((indexf w) z) f)) ==> ((((ITER (SUC (SUC i))) (next_el r2)) x) = ((f_list L) (((ITER (SUC i)) (next_el r2)) x))))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)))) = EMPTY))) |- ((((!i. ((i < (((indexf w) z) f)) ==> ((((ITER (SUC (SUC i))) (next_el r2)) x) = ((f_list L) (((ITER (SUC i)) (next_el r2)) x))))) /\ (~ ((GSPEC (\GEN%PVAR%8676. (?m. (((SETSPEC GEN%PVAR%8676) (~ ((((ITER (SUC (SUC m))) (next_el r2)) x) = ((f_list L) (((ITER (SUC m)) (next_el r2)) x))))) m)))) = EMPTY))) ==> ((((indexf w) z) f) <= (((l'm L) r2) x))) ==> ((((indexf w) z) f) <= (((l'm L) r2) x)))
T c==> c/\ ! c==> c< b0 cindexf f0 f1 f2 c= cITER cSUC cSUC b0 * part cnext_el f3 f4 cf_list f5 cITER cSUC b0 * part cnext_el f3 f4 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cITER cSUC cSUC b1 * part cnext_el f3 f4 cf_list f5 cITER cSUC b1 * part cnext_el f3 f4 b1 part cEMPTY c==> c==> c/\ ! c==> c< b0 cindexf f0 f1 f2 c= cITER cSUC cSUC b0 * part cnext_el f3 f4 cf_list f5 cITER cSUC b0 * part cnext_el f3 f4 c~ c= * part cGSPEC / c? / cSETSPEC b0 c~ c= cITER cSUC cSUC b1 * part cnext_el f3 f4 cf_list f5 cITER cSUC b1 * part cnext_el f3 f4 b1 part cEMPTY c<= cindexf f0 f1 f2 cl'm f5 f3 f4 c<= cindexf f0 f1 f2 cl'm f5 f3 f4
- |- ((\L. (!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))))) L)
T * / ! ! ! ! c= crtrans b0 b1 b2 b3 b4 cSND cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0
- |- (((\d. (f d)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- |- ((((\z. ((((((ztrans L) N) r) x) i) = z)) z) ==> (?z. ((((((ztrans L) N) r) x) i) = z))) = T)
T c= c==> * / c= cztrans f0 f1 f2 f3 f4 b0 f5 c? / c= cztrans f0 f1 f2 f3 f4 b0 cT
- |- (((!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) ==> ((\r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) r)) = ((\r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) r))
T c= c==> ! ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 * / ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 f2 * / ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 f2
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (uniq f), (uniq (list_of_darts L)), (((next_el f) x) = w), ((((POWER (next_el r2)) (SUC i')) w) = (((POWER (next_el f)) (SUC i')) w)), (((find_face L) x) = f), ((MEM x) (list_of_darts L)) |- (((((POWER (next_el r2)) (SUC i')) w) = (((POWER (next_el f)) (SUC i')) w)) /\ ((((POWER (next_el r2)) i') ((next_el r2) w)) = ((f_list L) (((POWER (next_el f)) i') w))))
T c==> cuniq f0 c==> cuniq clist_of_darts f1 c==> c= cnext_el f0 f2 f3 c==> c= cPOWER * part cnext_el f4 cSUC f5 f3 cPOWER * part cnext_el f0 cSUC f5 f3 c==> c= cfind_face f1 f2 f0 c==> cMEM f2 clist_of_darts f1 c/\ c= cPOWER * part cnext_el f4 cSUC f5 f3 cPOWER * part cnext_el f0 cSUC f5 f3 c= cPOWER * part cnext_el f4 f5 cnext_el f4 f3 cf_list f1 cPOWER * part cnext_el f0 f5 f3
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) |- (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f5 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 f5 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4
- ((\r1. ((((((rtrans L) N) r) x) i) = r1)) r1) |- ((((((((rtrans L) N) r) x) i) = r1) ==> (?r1. ((((((rtrans L) N) r) x) i) = r1))) = (?r1. ((((((rtrans L) N) r) x) i) = r1)))
T c==> * / c= crtrans f0 f1 f2 f3 f4 b0 f5 c= c==> c= crtrans f0 f1 f2 f3 f4 f5 c? / c= crtrans f0 f1 f2 f3 f4 b0 c? / c= crtrans f0 f1 f2 f3 f4 b0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- |- ((\ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))) ram2)
T * / c= csplit_normal_list f0 f1 f2 f3 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b6 b7 cAPPEND b8 b5 cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 f3 cCONS f3 cNIL cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 b0 cCONS b0 cNIL cflatten cmap b4 b5 cbetwn f2 f3 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 b0 cnext_el f1 f3 f4
- |- (((((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F) ==> ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F)) ==> (((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F) ==> ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F))) = (((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F) ==> ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F)))
T c= c==> c==> c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF
- (((real_ge (real_of_int _10304018)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304018))) ((real_add (real_of_int _10304019)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10304018)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10304019))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))))) |- ((real_ge (real_of_int _10304019)) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM w) r2), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) /\ (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- |- ((\t. ((LET_END t) = t)) t)
T * / c= cLET_END b0 b0 f0
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- ((uniq (flatten (((((ntrans L) N) r) x) i))) /\ (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) ==> (((all (f_last L)) (((((ntrans L) N) r) x) i)) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x))))))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c/\ cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM w) r2), ((MEM x) r1), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> (((normal_list L) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM r2) (((((ntrans L) N) r) x) (SUC i))) ==> (((MEM x) r2) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> cMEM f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- ((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) |- (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) = T)
T c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c= call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 cT
- (~ F), ((A a) /\ (!a. (~ (A a)))) |- ((~ F) /\ F)
T c==> c~ cF c==> c/\ * f0 f1 ! c~ * f0 b0 c/\ c~ cF cF
- |- (((real_mul (real_of_num (NUMERAL _0))) (real_of_num x)) = (real_of_num (NUMERAL _0)))
T c= creal_mul creal_of_num cNUMERAL c_0 creal_of_num f0 creal_of_num cNUMERAL c_0
- |- ((real_of_num x) = ((real_div (real_of_num x)) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_of_num f0 creal_div creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))
T c= ctransform_list f0 f1 c, f2 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f3 c, f2 f3 c, b5 cSND b4 cAPPEND creplace f3 cCONS cSND b4 cNIL f2 cCONS cFST b4 cNIL csplit_normal_list f0 f3 b3 b0 b2 cfind_face f0 b0 cprev_el f3 b1 cl'z f0 f2 f3 f1 cl'y f0 f3 f1
- |- ((((POWER ((transform_list L) x)) j) (N , r)) = ((((((ntrans L) N) r) x) j) , (((((rtrans L) N) r) x) j)))
T c= cPOWER * * part ctransform_list f0 f1 f2 c, f3 f4 c, cntrans f0 f3 f4 f1 f2 crtrans f0 f3 f4 f1 f2
- (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (?x. (((MEM x) r2) /\ (~ (((f_list L) x) = ((next_el r2) x))))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((?x. (((MEM x) r2) /\ (~ (((f_list L) x) = ((next_el r2) x))))) /\ (~ ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x))))
T c==> ! c= cPOWER * part cnext_el f0 cSUC cSUC b0 f1 cf_list f2 cPOWER * part cnext_el f0 cSUC b0 f1 c==> c? / c/\ cMEM b0 f0 c~ c= cf_list f2 b0 cnext_el f0 b0 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 f5 c==> c~ cfinal_list f2 crtrans f2 f3 f4 f1 cSUC f5 c==> cis_restricted chypermap_of_list f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> ctransform_assumption_v2 f2 c==> c= cnext_el f6 f1 f7 c==> c= cnext_el crtrans f2 f3 f4 f1 f5 f1 cf_list f2 f1 c==> c= cprev_el f8 cztrans f2 f3 f4 f1 f5 f9 c==> c= cl'y f2 f8 f1 f10 c==> c= cztrans f2 f3 f4 f1 f5 f11 c==> c= cfind_face f2 f1 f6 c==> c= crtrans f2 f3 f4 f1 f5 f8 c==> c= crtrans f2 f3 f4 f1 cSUC f5 f0 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list cntrans f2 f3 f4 f1 f5 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 cntrans f2 f3 f4 f1 f5 c==> cMEM f1 crtrans f2 f3 f4 f1 f5 c==> cMEM crtrans f2 f3 f4 f1 f5 cntrans f2 f3 f4 f1 f5 c==> cnormal_list f2 cntrans f2 f3 f4 f1 f5 c==> cs_flag_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 c==> cmarked_list f2 f3 f4 f1 c==> cmarked_list f2 cntrans f2 f3 f4 f1 f5 crtrans f2 f3 f4 f1 f5 f1 c/\ c? / c/\ cMEM b0 f0 c~ c= cf_list f2 b0 cnext_el f0 b0 c~ c= cindexf f7 cytrans f2 f3 f4 f1 cSUC f5 f6 cl'm f2 f0 f1
- |- ((\y. (((MEM x) ((CONS y) NIL)) = (x = y))) y)
T * / c= cMEM f0 cCONS b0 cNIL c= f0 b0 f1
- |- (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t))))))
T c= cGSPEC / * f0 * part cSETSPEC b0 f1 * f0 / / c/\ b0 c= f1 b1
- |- (((!x. (((\r1. ((((((rtrans L) N) r) x) i) = r1)) x) ==> (?r1. ((((((rtrans L) N) r) x) i) = r1)))) ==> ((?r1. ((((((rtrans L) N) r) x) i) = r1)) ==> (?r1. ((((((rtrans L) N) r) x) i) = r1)))) = ((?r1. ((((((rtrans L) N) r) x) i) = r1)) ==> (?r1. ((((((rtrans L) N) r) x) i) = r1))))
T c= c==> ! c==> * / c= crtrans f0 f1 f2 f3 f4 b1 b0 c? / c= crtrans f0 f1 f2 f3 f4 b1 c==> c? / c= crtrans f0 f1 f2 f3 f4 b0 c? / c= crtrans f0 f1 f2 f3 f4 b0 c==> c? / c= crtrans f0 f1 f2 f3 f4 b0 c? / c= crtrans f0 f1 f2 f3 f4 b0
- (!L. (!N. (!r. (!x. (!i. (!f. (!w. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))))))))) |- (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ (((next_el f) x) = w)))))) ==> ((MEM w) (((((rtrans L) N) r) x) i)))
T c==> ! ! ! ! ! ! ! c==> c/\ ctransform_assumption_v2 b0 c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c= cfind_face b0 b3 b5 c= cnext_el b5 b3 b6 cMEM b6 crtrans b0 b1 b2 b3 b4 c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 f4 c= cnext_el f4 f3 f5 cMEM f5 crtrans f0 f1 f2 f3 f6
- |- (((!j. ((((POWER ((transform_list L) x)) j) (N , r)) = ((((((ntrans L) N) r) x) j) , (((((rtrans L) N) r) x) j)))) ==> ((\j. ((((POWER ((transform_list L) x)) j) (N , r)) = ((((((ntrans L) N) r) x) j) , (((((rtrans L) N) r) x) j)))) j)) = ((\j. ((((POWER ((transform_list L) x)) j) (N , r)) = ((((((ntrans L) N) r) x) j) , (((((rtrans L) N) r) x) j)))) j))
T c= c==> ! c= cPOWER * * part ctransform_list f0 f1 b0 c, f2 f3 c, cntrans f0 f2 f3 f1 b0 crtrans f0 f2 f3 f1 b0 * / c= cPOWER * * part ctransform_list f0 f1 b0 c, f2 f3 c, cntrans f0 f2 f3 f1 b0 crtrans f0 f2 f3 f1 b0 f4 * / c= cPOWER * * part ctransform_list f0 f1 b0 c, f2 f3 c, cntrans f0 f2 f3 f1 b0 crtrans f0 f2 f3 f1 b0 f4
- ((((((rtrans L) N) r) x) i) = r1), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)) |- (((MEM r1) (((((ntrans L) N) r) x) i)) = T)
T c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c= cMEM f5 cntrans f0 f1 f2 f3 f4 cT
- |- (((!p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) ==> ((\p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) p)) = ((\p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) p))
T c= c==> ! ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 * / ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 f0 * / ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 f0
- |- (((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((\p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) p)
T * / ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 f0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))), (!a. ((((POWER (next_el r2)) (SUC (SUC a))) x) = ((f_list L) (((POWER (next_el r2)) (SUC a)) x)))), (~ (((f_list L) x') = ((next_el r2) x'))), (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq r1), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM w) r2), ((MEM x) r1), ((MEM x) r2), ((MEM x') r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (loop_list L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((MEM x) r2) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))) ==> ((((next_el r2) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) ==> ((uniq (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (f_last L)) (((((ntrans L) N) r) x) (SUC i))) ==> (((all (loop_list L)) (((((ntrans L) N) r) x) (SUC i))) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) (SUC i)))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) (SUC i))))))) ==> ((uniq r2) ==> (((((POWER (next_el r2)) (((indexf w) x') r2)) w) = x') ==> (~ ((((indexf w) (((l'y L) r2) x)) f) = (((l'm L) r2) x)))))))))))))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> ! c= cPOWER * part cnext_el f5 cSUC cSUC b0 f3 cf_list f0 cPOWER * part cnext_el f5 cSUC b0 f3 c==> c~ c= cf_list f0 f6 cnext_el f5 f6 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f7 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f8 f3 f9 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cprev_el f7 f10 f11 c==> c= cl'y f0 f7 f3 f12 c==> c= cztrans f0 f1 f2 f3 f4 f10 c==> c= cfind_face f0 f3 f8 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f6 f5 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c/\ cMEM f3 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c= cnext_el f5 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f5 f3 c==> cuniq cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 cSUC f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 cSUC f4 c==> cuniq f5 c==> c= cPOWER * part cnext_el f5 cindexf f9 f6 f5 f9 f6 c~ c= cindexf f9 cl'y f0 f5 f3 f8 cl'm f0 f5 f3
- ((\y. ((((l'y L) r1) x) = y)) y) |- (((\y. ((((l'y L) r1) x) = y)) y) /\ (?y. ((((l'y L) r1) x) = y)))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c/\ * / c= cl'y f0 f1 f2 b0 f3 c? / c= cl'y f0 f1 f2 b0
- |- ((((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F) ==> ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F)) = ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F))
T c= c==> c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((!x. (~ (A x))) = (~ (?a. (A a)))) = T)
T c= c= ! c~ * f0 b0 c~ c? / * f0 b0 cT
- ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F), (((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F) ==> ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F)) |- ((((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F) ==> ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F)) /\ ((~ ((!x. (~ (A x))) = (~ (?a. (A a))))) ==> F))
T c==> c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c==> c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c/\ c==> c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF c==> c~ c= ! c~ * f0 b0 c~ c? / * f0 b0 cF
- ((normal_list L) (((((ntrans L) N) r) x) i)) |- (((normal_list L) (((((ntrans L) N) r) x) i)) = T)
T c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c= cnormal_list f0 cntrans f0 f1 f2 f3 f4 cT
- |- (((real_lt (real_of_num m)) (real_of_num n)) = (m < n))
T c= creal_lt creal_of_num f0 creal_of_num f1 c< f0 f1
- |- (!z1. (((\z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)) z1) ==> (?z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1))))
T c==> * / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0 f6 c? / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0
- |- ((\N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) N)
T * / ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1
- ((((l'y L) r1) x) = y) |- (((((l'y L) r1) x) = y) /\ (?y. ((((l'y L) r1) x) = y)))
T c==> c= cl'y f0 f1 f2 f3 c/\ c= cl'y f0 f1 f2 f3 c? / c= cl'y f0 f1 f2 b0
- |- (((!x. (!y. (((MEM x) ((CONS y) NIL)) = (x = y)))) ==> ((\x. (!y. (((MEM x) ((CONS y) NIL)) = (x = y)))) x)) = ((\x. (!y. (((MEM x) ((CONS y) NIL)) = (x = y)))) x))
T c= c==> ! ! c= cMEM b0 cCONS b1 cNIL c= b0 b1 * / ! c= cMEM b0 cCONS b1 cNIL c= b0 b1 f0 * / ! c= cMEM b0 cCONS b1 cNIL c= b0 b1 f0
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), (~ ((final_list L) (((((rtrans L) N) r) x) (SUC i)))), (is_restricted (hypermap_of_list L)), (uniq (flatten (((((ntrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), (((next_el f) x) = w), (((next_el r1) x) = ((f_list L) x)), (((next_el r2) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((indexf w) (((POWER (next_el f)) i') w)) r2) = i'), ((((indexf w) (((POWER (next_el f)) (SUC i')) w)) r2) = (SUC i')), ((((indexf w) (((((ytrans L) N) r) x) (SUC i))) f) = (((l'm L) r2) x)), (((find_face L) x) = f), ((((((rtrans L) N) r) x) i) = r1), ((((((rtrans L) N) r) x) (SUC i)) = r2), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) (SUC i))) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) (SUC i)))), (i' <= (((indexf w) z) f)), ((SUC i') <= (((indexf w) z) f)), (i' < (((indexf w) z) f)), ((MEM x) r1), ((MEM x) r2), ((MEM (((POWER (next_el f)) i') w)) r2), ((MEM (((POWER (next_el f)) (SUC i')) w)) r2), ((MEM r1) (((((ntrans L) N) r) x) i)), ((MEM r2) (((((ntrans L) N) r) x) (SUC i))), ((all (f_last L)) (((((ntrans L) N) r) x) i)), ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) (SUC i))), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x), ((((s_flag_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x), ((((marked_list L) N) r) x), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x), ((((marked_list L) (((((ntrans L) N) r) x) (SUC i))) r2) x) |- (((all (loop_list L)) (((((ntrans L) N) r) x) i)) ==> ((!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) ==> ((uniq r1) ==> ((((POWER (next_el r2)) i') ((next_el r2) ((f_list L) x))) = ((f_list L) (((POWER (next_el r2)) i') ((f_list L) x)))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 cSUC f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c= cnext_el f5 f3 f6 c==> c= cnext_el f7 f3 cf_list f0 f3 c==> c= cnext_el f8 f3 cf_list f0 f3 c==> c= cprev_el f7 f9 f10 c==> c= cl'y f0 f7 f3 f11 c==> c= cztrans f0 f1 f2 f3 f4 f9 c==> c= cindexf f6 cPOWER * part cnext_el f5 f12 f6 f8 f12 c==> c= cindexf f6 cPOWER * part cnext_el f5 cSUC f12 f6 f8 cSUC f12 c==> c= cindexf f6 cytrans f0 f1 f2 f3 cSUC f4 f5 cl'm f0 f8 f3 c==> c= cfind_face f0 f3 f5 c==> c= crtrans f0 f1 f2 f3 f4 f7 c==> c= crtrans f0 f1 f2 f3 cSUC f4 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 cSUC f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> c<= f12 cindexf f6 f9 f5 c==> c<= cSUC f12 cindexf f6 f9 f5 c==> c< f12 cindexf f6 f9 f5 c==> cMEM f3 f7 c==> cMEM f3 f8 c==> cMEM cPOWER * part cnext_el f5 f12 f6 f8 c==> cMEM cPOWER * part cnext_el f5 cSUC f12 f6 f8 c==> cMEM f7 cntrans f0 f1 f2 f3 f4 c==> cMEM f8 cntrans f0 f1 f2 f3 cSUC f4 c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 cSUC f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f7 f3 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> cmarked_list f0 f1 f2 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cmarked_list f0 cntrans f0 f1 f2 f3 cSUC f4 f8 f3 c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cuniq f7 c= cPOWER * part cnext_el f8 f12 cnext_el f8 cf_list f0 f3 cf_list f0 cPOWER * part cnext_el f8 f12 cf_list f0 f3
- |- ((real_neg (real_of_num x)) = ((real_div (real_neg (real_of_num x))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_neg creal_of_num f0 creal_div creal_neg creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((!x. ((x IN (\y. (p y))) = (p x))) ==> ((\x. ((x IN (\y. (p y))) = (p x))) x)) = ((\x. ((x IN (\y. (p y))) = (p x))) x))
T c= c==> ! c= cIN b0 / * f0 b1 * f0 b0 * / c= cIN b0 / * f0 b1 * f0 b0 f1 * / c= cIN b0 / * f0 b1 * f0 b0 f1
- |- ((\P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) P)
T * / ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 f0
- |- (((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((\r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)) r2) |- ((((((((rtrans L) N) r) x) (SUC i)) = r2) ==> (?r2. ((((((rtrans L) N) r) x) (SUC i)) = r2))) = (?r2. ((((((rtrans L) N) r) x) (SUC i)) = r2)))
T c==> * / c= crtrans f0 f1 f2 f3 cSUC f4 b0 f5 c= c==> c= crtrans f0 f1 f2 f3 cSUC f4 f5 c? / c= crtrans f0 f1 f2 f3 cSUC f4 b0 c? / c= crtrans f0 f1 f2 f3 cSUC f4 b0
- |- ((((prev_el r1) (((((ztrans L) N) r) x) i)) = z1) = ((\z1. (((prev_el r1) (((((ztrans L) N) r) x) i)) = z1)) z1))
T c= c= cprev_el f0 cztrans f1 f2 f3 f4 f5 f6 * / c= cprev_el f0 cztrans f1 f2 f3 f4 f5 b0 f6
