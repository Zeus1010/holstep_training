N List_hypermap.list_of_darts_alt
C |- (!L. ((list_of_darts L) = (flatten (list_of_faces L))))
T c= clist_of_darts f0 cflatten clist_of_faces f0
D TRUTH
A |- T
T cT
D list_INDUCT
A |- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))))
T c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
D MAP
A |- ((!f. (((MAP f) NIL) = NIL)) /\ (!f. (!h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t)))))))
T c/\ ! c= cMAP b0 cNIL cNIL ! ! ! c= cMAP b0 cCONS b1 b2 cCONS * b0 b1 cMAP b0 b2
D Seq.foldr
A |- (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))
T c/\ c= cfoldr f0 f1 cCONS f2 f3 * * f0 f2 cfoldr f0 f1 f3 c= cfoldr f0 f1 cNIL f1
D Seq.flatten
A |- (flatten = ((foldr cat) NIL))
T c= part cflatten * * part cfoldr part ccat cNIL
D List_hypermap.list_of_darts
A |- (!L. ((list_of_darts L) = (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L)))
T c= clist_of_darts f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f0
D List_hypermap.list_of_faces
A |- (!L. ((list_of_faces L) = ((MAP list_pairs) L)))
T c= clist_of_faces f0 cMAP part clist_pairs f0
- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x)))) |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c==> c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0 c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
+ |- (((!f. (!h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t)))))) ==> ((\f. (!h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t)))))) f)) = ((\f. (!h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t)))))) f))
T c= c==> ! ! ! c= cMAP b0 cCONS b1 b2 cCONS * b0 b1 cMAP b0 b2 * / ! ! c= cMAP b0 cCONS b1 b2 cCONS * b0 b1 cMAP b0 b2 f0 * / ! ! c= cMAP b0 cCONS b1 b2 cCONS * b0 b1 cMAP b0 b2 f0
- |- ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)
T * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
+ |- ((!a0. (!a1. (((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) a1) = (((foldr cat) NIL) ((MAP list_pairs) a1))) ==> ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) ((CONS a0) a1)) = (((foldr cat) NIL) ((MAP list_pairs) ((CONS a0) a1))))))) = (((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) NIL) = (((foldr cat) NIL) ((MAP list_pairs) NIL))) /\ (!a0. (!a1. (((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) a1) = (((foldr cat) NIL) ((MAP list_pairs) a1))) ==> ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) ((CONS a0) a1)) = (((foldr cat) NIL) ((MAP list_pairs) ((CONS a0) a1)))))))))
T c= ! ! c==> c= cfoldr / / ccat clist_pairs b2 b3 cNIL b1 cfoldr part ccat cNIL cMAP part clist_pairs b1 c= cfoldr / / ccat clist_pairs b2 b3 cNIL cCONS b0 b1 cfoldr part ccat cNIL cMAP part clist_pairs cCONS b0 b1 c/\ c= cfoldr / / ccat clist_pairs b0 b1 cNIL cNIL cfoldr part ccat cNIL cMAP part clist_pairs cNIL ! ! c==> c= cfoldr / / ccat clist_pairs b2 b3 cNIL b1 cfoldr part ccat cNIL cMAP part clist_pairs b1 c= cfoldr / / ccat clist_pairs b2 b3 cNIL cCONS b0 b1 cfoldr part ccat cNIL cMAP part clist_pairs cCONS b0 b1
- |- ((\x. (!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))))) x)
T * / ! ! ! c/\ c= cfoldr b2 b3 cCONS b0 b1 * * b2 b0 cfoldr b2 b3 b1 c= cfoldr b2 b3 cNIL b3 f0
+ |- ((((\L1. (L = L1)) L1) ==> ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (((foldr cat) NIL) ((MAP list_pairs) L)))) = T)
T c= c==> * / c= f0 b0 f1 c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cfoldr part ccat cNIL cMAP part clist_pairs f0 cT
+ |- ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)
T * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
- ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t) = (((foldr cat) NIL) ((MAP list_pairs) t))) |- (T = ((((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t)) = ((cat (list_pairs h)) (((foldr cat) NIL) ((MAP list_pairs) t)))))
T c==> c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cfoldr part ccat cNIL cMAP part clist_pairs f0 c= cT c= * * / / ccat clist_pairs b0 b1 f1 cfoldr / / ccat clist_pairs b0 b1 cNIL f0 ccat clist_pairs f1 cfoldr part ccat cNIL cMAP part clist_pairs f0
+ |- ((((foldr f) z0) NIL) = z0)
T c= cfoldr f0 f1 cNIL f1
+ |- (((!L. ((list_of_faces L) = ((MAP list_pairs) L))) ==> ((\L. ((list_of_faces L) = ((MAP list_pairs) L))) L)) = ((\L. ((list_of_faces L) = ((MAP list_pairs) L))) L))
T c= c==> ! c= clist_of_faces b0 cMAP part clist_pairs b0 * / c= clist_of_faces b0 cMAP part clist_pairs b0 f0 * / c= clist_of_faces b0 cMAP part clist_pairs b0 f0
+ |- ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (((foldr cat) NIL) ((MAP list_pairs) L)))
T c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cfoldr part ccat cNIL cMAP part clist_pairs f0
+ (L = L1) |- (((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L1) = (((foldr cat) NIL) ((MAP list_pairs) L))) = ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (((foldr cat) NIL) ((MAP list_pairs) L))))
T c==> c= f0 f1 c= c= cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cfoldr part ccat cNIL cMAP part clist_pairs f0 c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cfoldr part ccat cNIL cMAP part clist_pairs f0
- |- (!L1. (((\L1. (L = L1)) L1) ==> (?L1. (L = L1))))
T c==> * / c= f0 b0 f1 c? / c= f0 b0
+ |- ((\L1. (L = L1)) L)
T * / c= f0 b0 f0
+ |- (((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) ((CONS h) t)) = (((foldr cat) NIL) ((CONS (list_pairs h)) ((MAP list_pairs) t)))) = ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) ((CONS h) t)) = (((foldr cat) NIL) ((MAP list_pairs) ((CONS h) t)))))
T c= c= cfoldr / / ccat clist_pairs b0 b1 cNIL cCONS f0 f1 cfoldr part ccat cNIL cCONS clist_pairs f0 cMAP part clist_pairs f1 c= cfoldr / / ccat clist_pairs b0 b1 cNIL cCONS f0 f1 cfoldr part ccat cNIL cMAP part clist_pairs cCONS f0 f1
+ |- (NIL = (((foldr cat) NIL) NIL))
T c= cNIL cfoldr part ccat cNIL cNIL
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c/\ ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! * f0 b0
+ |- (((!h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t))))) ==> ((\h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t))))) h)) = ((\h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t))))) h))
T c= c==> ! ! c= cMAP f0 cCONS b0 b1 cCONS * f0 b0 cMAP f0 b1 * / ! c= cMAP f0 cCONS b0 b1 cCONS * f0 b0 cMAP f0 b1 f1 * / ! c= cMAP f0 cCONS b0 b1 cCONS * f0 b0 cMAP f0 b1 f1
+ |- (((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (((foldr cat) NIL) (list_of_faces L))) = ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (flatten (list_of_faces L))))
T c= c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cfoldr part ccat cNIL clist_of_faces f0 c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cflatten clist_of_faces f0
+ |- ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) NIL) = (((foldr cat) NIL) ((MAP list_pairs) NIL)))
T c= cfoldr / / ccat clist_pairs b0 b1 cNIL cNIL cfoldr part ccat cNIL cMAP part clist_pairs cNIL
+ |- (((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)) = ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P))
T c= c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- (!x. (P x))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
+ |- (((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (((foldr cat) NIL) ((MAP list_pairs) L))) = ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (((foldr cat) NIL) (list_of_faces L))))
T c= c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cfoldr part ccat cNIL cMAP part clist_pairs f0 c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cfoldr part ccat cNIL clist_of_faces f0
+ |- ((\L. ((list_of_darts L) = (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L))) L)
T * / c= clist_of_darts b0 cfoldr / / ccat clist_pairs b1 b2 cNIL b0 f0
- |- ((\z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))) z0)
T * / c/\ c= cfoldr f0 b0 cCONS f1 f2 * * f0 f1 cfoldr f0 b0 f2 c= cfoldr f0 b0 cNIL b0 f3
- |- ((L = L1) = ((\L1. (L = L1)) L1))
T c= c= f0 f1 * / c= f0 b0 f1
+ |- ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (flatten (list_of_faces L)))
T c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cflatten clist_of_faces f0
+ |- ((L = L1) ==> ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (((foldr cat) NIL) ((MAP list_pairs) L))))
T c==> c= f0 f1 c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cfoldr part ccat cNIL cMAP part clist_pairs f0
+ |- (((!L. ((list_of_darts L) = (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L))) ==> ((\L. ((list_of_darts L) = (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L))) L)) = ((\L. ((list_of_darts L) = (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L))) L))
T c= c==> ! c= clist_of_darts b0 cfoldr / / ccat clist_pairs b1 b2 cNIL b0 * / c= clist_of_darts b0 cfoldr / / ccat clist_pairs b1 b2 cNIL b0 f0 * / c= clist_of_darts b0 cfoldr / / ccat clist_pairs b1 b2 cNIL b0 f0
- |- (((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))))) = (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c= c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
- |- ((\f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))) f)
T * / ! c/\ c= cfoldr b0 b1 cCONS f0 f1 * * b0 f0 cfoldr b0 b1 f1 c= cfoldr b0 b1 cNIL b1 f2
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c/\ c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
+ |- ((!a1. (((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) a1) = (((foldr cat) NIL) ((MAP list_pairs) a1))) ==> ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) ((CONS h) a1)) = (((foldr cat) NIL) ((MAP list_pairs) ((CONS h) a1)))))) = T)
T c= ! c==> c= cfoldr / / ccat clist_pairs b1 b2 cNIL b0 cfoldr part ccat cNIL cMAP part clist_pairs b0 c= cfoldr / / ccat clist_pairs b1 b2 cNIL cCONS f0 b0 cfoldr part ccat cNIL cMAP part clist_pairs cCONS f0 b0 cT
- ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!x. (P x)))
T c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! * f0 b0
+ (L = L1) |- ((L = L1) /\ ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (((foldr cat) NIL) ((MAP list_pairs) L))))
T c==> c= f0 f1 c/\ c= f0 f1 c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cfoldr part ccat cNIL cMAP part clist_pairs f0
+ |- ((NIL = NIL) = (NIL = (((foldr cat) NIL) NIL)))
T c= c= cNIL cNIL c= cNIL cfoldr part ccat cNIL cNIL
+ ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t) = (((foldr cat) NIL) ((MAP list_pairs) t))) |- (((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t) = (((foldr cat) NIL) ((MAP list_pairs) t))) /\ ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) ((CONS h) t)) = (((foldr cat) NIL) ((MAP list_pairs) ((CONS h) t)))))
T c==> c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cfoldr part ccat cNIL cMAP part clist_pairs f0 c/\ c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cfoldr part ccat cNIL cMAP part clist_pairs f0 c= cfoldr / / ccat clist_pairs b0 b1 cNIL cCONS f1 f0 cfoldr part ccat cNIL cMAP part clist_pairs cCONS f1 f0
+ |- ((\L. ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (((foldr cat) NIL) ((MAP list_pairs) L)))) L1)
T * / c= cfoldr / / ccat clist_pairs b1 b2 cNIL b0 cfoldr part ccat cNIL cMAP part clist_pairs b0 f0
+ |- (((list_of_darts L) = (flatten (list_of_faces L))) = T)
T c= c= clist_of_darts f0 cflatten clist_of_faces f0 cT
+ |- ((\L. ((list_of_faces L) = ((MAP list_pairs) L))) L)
T * / c= clist_of_faces b0 cMAP part clist_pairs b0 f0
+ |- ((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s)))
T c= cfoldr f0 f1 cCONS f2 f3 * * f0 f2 cfoldr f0 f1 f3
- |- ((?L1. (L = L1)) ==> (?L1. (L = L1)))
T c==> c? / c= f0 b0 c? / c= f0 b0
+ |- ((x = x) = T)
T c= c= f0 f0 cT
- |- ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)
T * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
+ |- ((\h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t))))) h)
T * / ! c= cMAP f0 cCONS b0 b1 cCONS * f0 b0 cMAP f0 b1 f1
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
- |- ((\s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))))) s)
T * / ! ! c/\ c= cfoldr b1 b2 cCONS f0 b0 * * b1 f0 cfoldr b1 b2 b0 c= cfoldr b1 b2 cNIL b2 f1
- (L = L1) |- (L1 = L)
T c==> c= f0 f1 c= f1 f0
- (L = L1) |- ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L1) = (((foldr cat) NIL) ((MAP list_pairs) L1)))
T c==> c= f0 f1 c= cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cfoldr part ccat cNIL cMAP part clist_pairs f1
- ((\L1. (L = L1)) L1) |- (((L = L1) ==> (?L1. (L = L1))) = (?L1. (L = L1)))
T c==> * / c= f0 b0 f1 c= c==> c= f0 f1 c? / c= f0 b0 c? / c= f0 b0
- |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
+ |- ((L = L) = ((\L1. (L = L1)) L))
T c= c= f0 f0 * / c= f0 b0 f0
+ |- (((?L1. (L = L1)) ==> ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (((foldr cat) NIL) ((MAP list_pairs) L)))) = ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (((foldr cat) NIL) ((MAP list_pairs) L))))
T c= c==> c? / c= f0 b0 c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cfoldr part ccat cNIL cMAP part clist_pairs f0 c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cfoldr part ccat cNIL cMAP part clist_pairs f0
+ |- (((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) NIL) = (((foldr cat) NIL) ((MAP list_pairs) NIL))) /\ (!a0. (!a1. (((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) a1) = (((foldr cat) NIL) ((MAP list_pairs) a1))) ==> ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) ((CONS a0) a1)) = (((foldr cat) NIL) ((MAP list_pairs) ((CONS a0) a1))))))))
T c/\ c= cfoldr / / ccat clist_pairs b0 b1 cNIL cNIL cfoldr part ccat cNIL cMAP part clist_pairs cNIL ! ! c==> c= cfoldr / / ccat clist_pairs b2 b3 cNIL b1 cfoldr part ccat cNIL cMAP part clist_pairs b1 c= cfoldr / / ccat clist_pairs b2 b3 cNIL cCONS b0 b1 cfoldr part ccat cNIL cMAP part clist_pairs cCONS b0 b1
+ |- (((MAP f) NIL) = NIL)
T c= cMAP f0 cNIL cNIL
+ ((\L1. (L = L1)) L1) |- (((\L1. (L = L1)) L1) /\ ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (((foldr cat) NIL) ((MAP list_pairs) L))))
T c==> * / c= f0 b0 f1 c/\ * / c= f0 b0 f1 c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cfoldr part ccat cNIL cMAP part clist_pairs f0
+ |- (((((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t)) = (((foldr cat) NIL) ((CONS (list_pairs h)) ((MAP list_pairs) t)))) = ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) ((CONS h) t)) = (((foldr cat) NIL) ((CONS (list_pairs h)) ((MAP list_pairs) t)))))
T c= c= * * / / ccat clist_pairs b0 b1 f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cfoldr part ccat cNIL cCONS clist_pairs f0 cMAP part clist_pairs f1 c= cfoldr / / ccat clist_pairs b0 b1 cNIL cCONS f0 f1 cfoldr part ccat cNIL cCONS clist_pairs f0 cMAP part clist_pairs f1
+ |- (((((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) NIL) = (((foldr cat) NIL) ((MAP list_pairs) NIL))) /\ (!a0. (!a1. (((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) a1) = (((foldr cat) NIL) ((MAP list_pairs) a1))) ==> ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) ((CONS a0) a1)) = (((foldr cat) NIL) ((MAP list_pairs) ((CONS a0) a1)))))))) ==> (!L. ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (((foldr cat) NIL) ((MAP list_pairs) L))))) = (!L. ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (((foldr cat) NIL) ((MAP list_pairs) L)))))
T c= c==> c/\ c= cfoldr / / ccat clist_pairs b0 b1 cNIL cNIL cfoldr part ccat cNIL cMAP part clist_pairs cNIL ! ! c==> c= cfoldr / / ccat clist_pairs b2 b3 cNIL b1 cfoldr part ccat cNIL cMAP part clist_pairs b1 c= cfoldr / / ccat clist_pairs b2 b3 cNIL cCONS b0 b1 cfoldr part ccat cNIL cMAP part clist_pairs cCONS b0 b1 ! c= cfoldr / / ccat clist_pairs b1 b2 cNIL b0 cfoldr part ccat cNIL cMAP part clist_pairs b0 ! c= cfoldr / / ccat clist_pairs b1 b2 cNIL b0 cfoldr part ccat cNIL cMAP part clist_pairs b0
- |- (((!P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) ==> ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)) = ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P))
T c= c==> ! ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
- (L = L1) |- (((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L1) = (((foldr cat) NIL) ((MAP list_pairs) L1))) = ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (((foldr cat) NIL) ((MAP list_pairs) L))))
T c==> c= f0 f1 c= c= cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cfoldr part ccat cNIL cMAP part clist_pairs f1 c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cfoldr part ccat cNIL cMAP part clist_pairs f0
+ |- ((((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) NIL) = (((foldr cat) NIL) ((MAP list_pairs) NIL))) /\ (!a0. (!a1. (((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) a1) = (((foldr cat) NIL) ((MAP list_pairs) a1))) ==> ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) ((CONS a0) a1)) = (((foldr cat) NIL) ((MAP list_pairs) ((CONS a0) a1)))))))) ==> (!L. ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (((foldr cat) NIL) ((MAP list_pairs) L)))))
T c==> c/\ c= cfoldr / / ccat clist_pairs b0 b1 cNIL cNIL cfoldr part ccat cNIL cMAP part clist_pairs cNIL ! ! c==> c= cfoldr / / ccat clist_pairs b2 b3 cNIL b1 cfoldr part ccat cNIL cMAP part clist_pairs b1 c= cfoldr / / ccat clist_pairs b2 b3 cNIL cCONS b0 b1 cfoldr part ccat cNIL cMAP part clist_pairs cCONS b0 b1 ! c= cfoldr / / ccat clist_pairs b1 b2 cNIL b0 cfoldr part ccat cNIL cMAP part clist_pairs b0
+ ((\L1. (L = L1)) L1) |- (L = L1)
T c==> * / c= f0 b0 f1 c= f0 f1
- (L = L1) |- ((L = L1) /\ (?L1. (L = L1)))
T c==> c= f0 f1 c/\ c= f0 f1 c? / c= f0 b0
- ((\L1. (L = L1)) L1) |- (((\L1. (L = L1)) L1) /\ (?L1. (L = L1)))
T c==> * / c= f0 b0 f1 c/\ * / c= f0 b0 f1 c? / c= f0 b0
- |- (((!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))) ==> ((\z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))) z0)) = ((\z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))) z0))
T c= c==> ! c/\ c= cfoldr f0 b0 cCONS f1 f2 * * f0 f1 cfoldr f0 b0 f2 c= cfoldr f0 b0 cNIL b0 * / c/\ c= cfoldr f0 b0 cCONS f1 f2 * * f0 f1 cfoldr f0 b0 f2 c= cfoldr f0 b0 cNIL b0 f3 * / c/\ c= cfoldr f0 b0 cCONS f1 f2 * * f0 f1 cfoldr f0 b0 f2 c= cfoldr f0 b0 cNIL b0 f3
- |- (((!x. (((\L1. (L = L1)) x) ==> (?L1. (L = L1)))) ==> ((?L1. (L = L1)) ==> (?L1. (L = L1)))) = ((?L1. (L = L1)) ==> (?L1. (L = L1))))
T c= c==> ! c==> * / c= f0 b1 b0 c? / c= f0 b1 c==> c? / c= f0 b0 c? / c= f0 b0 c==> c? / c= f0 b0 c? / c= f0 b0
- |- ((L = L1) ==> (?L1. (L = L1)))
T c==> c= f0 f1 c? / c= f0 b0
- |- (((!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))))) ==> ((\s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))))) s)) = ((\s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))))) s))
T c= c==> ! ! ! c/\ c= cfoldr b1 b2 cCONS f0 b0 * * b1 f0 cfoldr b1 b2 b0 c= cfoldr b1 b2 cNIL b2 * / ! ! c/\ c= cfoldr b1 b2 cCONS f0 b0 * * b1 f0 cfoldr b1 b2 b0 c= cfoldr b1 b2 cNIL b2 f1 * / ! ! c/\ c= cfoldr b1 b2 cCONS f0 b0 * * b1 f0 cfoldr b1 b2 b0 c= cfoldr b1 b2 cNIL b2 f1
- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))) |- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x))))
T c==> c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0 c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0
- |- (((!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))) ==> ((\f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))) f)) = ((\f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))) f))
T c= c==> ! ! c/\ c= cfoldr b0 b1 cCONS f0 f1 * * b0 f0 cfoldr b0 b1 f1 c= cfoldr b0 b1 cNIL b1 * / ! c/\ c= cfoldr b0 b1 cCONS f0 f1 * * b0 f0 cfoldr b0 b1 f1 c= cfoldr b0 b1 cNIL b1 f2 * / ! c/\ c= cfoldr b0 b1 cCONS f0 f1 * * b0 f0 cfoldr b0 b1 f1 c= cfoldr b0 b1 cNIL b1 f2
- |- (((!x. (!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))))) ==> ((\x. (!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))))) x)) = ((\x. (!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))))) x))
T c= c==> ! ! ! ! c/\ c= cfoldr b2 b3 cCONS b0 b1 * * b2 b0 cfoldr b2 b3 b1 c= cfoldr b2 b3 cNIL b3 * / ! ! ! c/\ c= cfoldr b2 b3 cCONS b0 b1 * * b2 b0 cfoldr b2 b3 b1 c= cfoldr b2 b3 cNIL b3 f0 * / ! ! ! c/\ c= cfoldr b2 b3 cCONS b0 b1 * * b2 b0 cfoldr b2 b3 b1 c= cfoldr b2 b3 cNIL b3 f0
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))) = T)
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c= c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0 cT
- (L = L1) |- ((\L1. (L = L1)) L1)
T c==> c= f0 f1 * / c= f0 b0 f1
- |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
- |- (((\a. (f a)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- |- (((!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) ==> ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)) = ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q))
T c= c==> ! c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- |- ((((\L1. (L = L1)) L1) ==> (?L1. (L = L1))) = T)
T c= c==> * / c= f0 b0 f1 c? / c= f0 b0 cT
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) /\ (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c/\ ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
