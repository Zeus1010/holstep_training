N Seq.size_flatten
C |- (!ss. ((sizel (flatten ss)) = (sumn (shape ss))))
T c= csizel cflatten f0 csumn cshape f0
D TRUTH
A |- T
T cT
D list_INDUCT
A |- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))))
T c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
D Seq.size_nil
A |- ((sizel NIL) = (NUMERAL _0))
T c= csizel cNIL cNUMERAL c_0
D Seq.size_cat
A |- (!s1. (!s2. ((sizel ((cat s1) s2)) = ((sizel s1) + (sizel s2)))))
T c= csizel ccat f0 f1 c+ csizel f0 csizel f1
D Seq.map
A |- ((((map f) ((CONS x) s)) = ((CONS (f x)) ((map f) s))) /\ (((map f) NIL) = NIL))
T c/\ c= cmap f0 cCONS f1 f2 cCONS * f0 f1 cmap f0 f2 c= cmap f0 cNIL cNIL
D Seq.foldr
A |- (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))
T c/\ c= cfoldr f0 f1 cCONS f2 f3 * * f0 f2 cfoldr f0 f1 f3 c= cfoldr f0 f1 cNIL f1
D Seq.sumn
A |- (sumn = ((foldr +) (NUMERAL _0)))
T c= part csumn * * part cfoldr part c+ cNUMERAL c_0
D Seq.sumn0
A |- ((sumn NIL) = (NUMERAL _0))
T c= csumn cNIL cNUMERAL c_0
D Seq.flatten
A |- (flatten = ((foldr cat) NIL))
T c= part cflatten * * part cfoldr part ccat cNIL
D Seq.shape
A |- (shape = (map sizel))
T c= part cshape * part cmap part csizel
+ ((map sizel) = shape) |- (shape = (map sizel))
T c==> c= * part cmap part csizel part cshape c= part cshape * part cmap part csizel
- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x)))) |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c==> c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0 c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
+ |- (T = (((sizel s) + (((foldr +) (NUMERAL _0)) (shape ss))) = ((sizel s) + (((foldr +) (NUMERAL _0)) (shape ss)))))
T c= cT c= c+ csizel f0 cfoldr part c+ cNUMERAL c_0 cshape f1 c+ csizel f0 cfoldr part c+ cNUMERAL c_0 cshape f1
- |- ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)
T * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
- (ss = ss1) |- (((sizel (flatten ss1)) = (sumn (shape ss))) = ((sizel (flatten ss)) = (sumn (shape ss))))
T c==> c= f0 f1 c= c= csizel cflatten f1 csumn cshape f0 c= csizel cflatten f0 csumn cshape f0
- (ss = ss1) |- (((sizel (flatten ss1)) = (sumn (shape ss1))) = ((sizel (flatten ss)) = (sumn (shape ss))))
T c==> c= f0 f1 c= c= csizel cflatten f1 csumn cshape f1 c= csizel cflatten f0 csumn cshape f0
+ |- (((NUMERAL _0) = (sumn NIL)) = ((sizel NIL) = (sumn NIL)))
T c= c= cNUMERAL c_0 csumn cNIL c= csizel cNIL csumn cNIL
+ |- (((sizel s) + (sumn (shape ss))) = (sumn ((CONS (sizel s)) ((map sizel) ss))))
T c= c+ csizel f0 csumn cshape f1 csumn cCONS csizel f0 cmap part csizel f1
+ |- (((!s1. (!s2. ((sizel ((cat s1) s2)) = ((sizel s1) + (sizel s2))))) ==> ((\s1. (!s2. ((sizel ((cat s1) s2)) = ((sizel s1) + (sizel s2))))) s1)) = ((\s1. (!s2. ((sizel ((cat s1) s2)) = ((sizel s1) + (sizel s2))))) s1))
T c= c==> ! ! c= csizel ccat b0 b1 c+ csizel b0 csizel b1 * / ! c= csizel ccat b0 b1 c+ csizel b0 csizel b1 f0 * / ! c= csizel ccat b0 b1 c+ csizel b0 csizel b1 f0
+ |- (((sizel ((cat s) (((foldr cat) NIL) ss))) = (sumn ((CONS (sizel s)) ((map sizel) ss)))) = ((sizel ((cat s) (((foldr cat) NIL) ss))) = (sumn ((map sizel) ((CONS s) ss)))))
T c= c= csizel ccat f0 cfoldr part ccat cNIL f1 csumn cCONS csizel f0 cmap part csizel f1 c= csizel ccat f0 cfoldr part ccat cNIL f1 csumn cmap part csizel cCONS f0 f1
+ |- (((map f) ((CONS x) s)) = ((CONS (f x)) ((map f) s)))
T c= cmap f0 cCONS f1 f2 cCONS * f0 f1 cmap f0 f2
+ |- ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)
T * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
+ |- ((((foldr f) z0) NIL) = z0)
T c= cfoldr f0 f1 cNIL f1
- |- (!ss1. (((\ss1. (ss = ss1)) ss1) ==> (?ss1. (ss = ss1))))
T c==> * / c= f0 b0 f1 c? / c= f0 b0
- |- ((\ss1. (ss = ss1)) ss)
T * / c= f0 b0 f0
+ |- ((((sizel (flatten NIL)) = (sumn (shape NIL))) /\ (!a0. (!a1. (((sizel (flatten a1)) = (sumn (shape a1))) ==> ((sizel (flatten ((CONS a0) a1))) = (sumn (shape ((CONS a0) a1)))))))) ==> (!ss. ((sizel (flatten ss)) = (sumn (shape ss)))))
T c==> c/\ c= csizel cflatten cNIL csumn cshape cNIL ! ! c==> c= csizel cflatten b1 csumn cshape b1 c= csizel cflatten cCONS b0 b1 csumn cshape cCONS b0 b1 ! c= csizel cflatten b0 csumn cshape b0
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c/\ ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! * f0 b0
+ |- (((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)) = ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P))
T c= c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- (!x. (P x))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
+ |- (((sizel NIL) = (sumn ((map sizel) NIL))) = ((sizel NIL) = (sumn (shape NIL))))
T c= c= csizel cNIL csumn cmap part csizel cNIL c= csizel cNIL csumn cshape cNIL
+ |- (((!s2. ((sizel ((cat s1) s2)) = ((sizel s1) + (sizel s2)))) ==> ((\s2. ((sizel ((cat s1) s2)) = ((sizel s1) + (sizel s2)))) s2)) = ((\s2. ((sizel ((cat s1) s2)) = ((sizel s1) + (sizel s2)))) s2))
T c= c==> ! c= csizel ccat f0 b0 c+ csizel f0 csizel b0 * / c= csizel ccat f0 b0 c+ csizel f0 csizel b0 f1 * / c= csizel ccat f0 b0 c+ csizel f0 csizel b0 f1
+ (flatten = ((foldr cat) NIL)) |- (((foldr cat) NIL) = flatten)
T c==> c= part cflatten * * part cfoldr part ccat cNIL c= * * part cfoldr part ccat cNIL part cflatten
- |- ((ss = ss1) = ((\ss1. (ss = ss1)) ss1))
T c= c= f0 f1 * / c= f0 b0 f1
+ ((sizel (flatten ss)) = (sumn (shape ss))) |- ((((sizel s) + (sumn (shape ss))) = (sumn ((CONS (sizel s)) ((map sizel) ss)))) = (((sizel s) + (sizel (flatten ss))) = (sumn ((CONS (sizel s)) ((map sizel) ss)))))
T c==> c= csizel cflatten f0 csumn cshape f0 c= c= c+ csizel f1 csumn cshape f0 csumn cCONS csizel f1 cmap part csizel f0 c= c+ csizel f1 csizel cflatten f0 csumn cCONS csizel f1 cmap part csizel f0
- (ss = ss1) |- (((sizel (flatten ss1)) = (sumn (shape ss1))) = ((sizel (flatten ss1)) = (sumn (shape ss))))
T c==> c= f0 f1 c= c= csizel cflatten f1 csumn cshape f1 c= csizel cflatten f1 csumn cshape f0
+ |- ((((sizel s) + (sumn (shape ss))) = (sumn ((CONS (sizel s)) (shape ss)))) = (((sizel s) + (sumn (shape ss))) = (sumn ((CONS (sizel s)) ((map sizel) ss)))))
T c= c= c+ csizel f0 csumn cshape f1 csumn cCONS csizel f0 cshape f1 c= c+ csizel f0 csumn cshape f1 csumn cCONS csizel f0 cmap part csizel f1
- |- (((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))))) = (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c= c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
+ |- (((sizel s) + (((foldr +) (NUMERAL _0)) (shape ss))) = (((foldr +) (NUMERAL _0)) ((CONS (sizel s)) (shape ss))))
T c= c+ csizel f0 cfoldr part c+ cNUMERAL c_0 cshape f1 cfoldr part c+ cNUMERAL c_0 cCONS csizel f0 cshape f1
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c/\ c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
+ |- ((NUMERAL _0) = (NUMERAL _0))
T c= cNUMERAL c_0 cNUMERAL c_0
- ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!x. (P x)))
T c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! * f0 b0
+ |- ((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s)))
T c= cfoldr f0 f1 cCONS f2 f3 * * f0 f2 cfoldr f0 f1 f3
- |- ((?ss1. (ss = ss1)) ==> (?ss1. (ss = ss1)))
T c==> c? / c= f0 b0 c? / c= f0 b0
+ |- ((x = x) = T)
T c= c= f0 f0 cT
- |- ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)
T * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
- (ss = ss1) |- (ss1 = ss)
T c==> c= f0 f1 c= f1 f0
+ |- (((sizel (flatten NIL)) = (sumn (shape NIL))) /\ (!a0. (!a1. (((sizel (flatten a1)) = (sumn (shape a1))) ==> ((sizel (flatten ((CONS a0) a1))) = (sumn (shape ((CONS a0) a1))))))))
T c/\ c= csizel cflatten cNIL csumn cshape cNIL ! ! c==> c= csizel cflatten b1 csumn cshape b1 c= csizel cflatten cCONS b0 b1 csumn cshape cCONS b0 b1
+ |- ((!a1. (((sizel (flatten a1)) = (sumn (shape a1))) ==> ((sizel (flatten ((CONS s) a1))) = (sumn (shape ((CONS s) a1)))))) = T)
T c= ! c==> c= csizel cflatten b0 csumn cshape b0 c= csizel cflatten cCONS f0 b0 csumn cshape cCONS f0 b0 cT
+ |- ((sizel (((foldr cat) NIL) NIL)) = (sumn (shape NIL)))
T c= csizel cfoldr part ccat cNIL cNIL csumn cshape cNIL
+ |- ((sizel NIL) = (sumn NIL))
T c= csizel cNIL csumn cNIL
- ((\ss1. (ss = ss1)) ss1) |- (((ss = ss1) ==> (?ss1. (ss = ss1))) = (?ss1. (ss = ss1)))
T c==> * / c= f0 b0 f1 c= c==> c= f0 f1 c? / c= f0 b0 c? / c= f0 b0
+ ((sizel (flatten ss)) = (sumn (shape ss))) |- ((sizel ((cat s) (((foldr cat) NIL) ss))) = (sumn (shape ((CONS s) ss))))
T c==> c= csizel cflatten f0 csumn cshape f0 c= csizel ccat f1 cfoldr part ccat cNIL f0 csumn cshape cCONS f1 f0
- |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
- |- ((ss = ss) = ((\ss1. (ss = ss1)) ss))
T c= c= f0 f0 * / c= f0 b0 f0
+ |- (((sizel s) + (((foldr +) (NUMERAL _0)) (shape ss))) = ((sizel s) + (((foldr +) (NUMERAL _0)) (shape ss))))
T c= c+ csizel f0 cfoldr part c+ cNUMERAL c_0 cshape f1 c+ csizel f0 cfoldr part c+ cNUMERAL c_0 cshape f1
- |- (((!P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) ==> ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)) = ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P))
T c= c==> ! ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
+ |- ((((sizel s) + (((foldr +) (NUMERAL _0)) (shape ss))) = ((sizel s) + (((foldr +) (NUMERAL _0)) (shape ss)))) = (((sizel s) + (((foldr +) (NUMERAL _0)) (shape ss))) = (((foldr +) (NUMERAL _0)) ((CONS (sizel s)) (shape ss)))))
T c= c= c+ csizel f0 cfoldr part c+ cNUMERAL c_0 cshape f1 c+ csizel f0 cfoldr part c+ cNUMERAL c_0 cshape f1 c= c+ csizel f0 cfoldr part c+ cNUMERAL c_0 cshape f1 cfoldr part c+ cNUMERAL c_0 cCONS csizel f0 cshape f1
- ((\ss1. (ss = ss1)) ss1) |- (ss = ss1)
T c==> * / c= f0 b0 f1 c= f0 f1
- (ss = ss1) |- ((ss = ss1) /\ (?ss1. (ss = ss1)))
T c==> c= f0 f1 c/\ c= f0 f1 c? / c= f0 b0
- ((\ss1. (ss = ss1)) ss1) |- (((\ss1. (ss = ss1)) ss1) /\ (?ss1. (ss = ss1)))
T c==> * / c= f0 b0 f1 c/\ * / c= f0 b0 f1 c? / c= f0 b0
+ (shape = (map sizel)) |- ((map sizel) = shape)
T c==> c= part cshape * part cmap part csizel c= * part cmap part csizel part cshape
+ |- (((((sizel (flatten NIL)) = (sumn (shape NIL))) /\ (!a0. (!a1. (((sizel (flatten a1)) = (sumn (shape a1))) ==> ((sizel (flatten ((CONS a0) a1))) = (sumn (shape ((CONS a0) a1)))))))) ==> (!ss. ((sizel (flatten ss)) = (sumn (shape ss))))) = (!ss. ((sizel (flatten ss)) = (sumn (shape ss)))))
T c= c==> c/\ c= csizel cflatten cNIL csumn cshape cNIL ! ! c==> c= csizel cflatten b1 csumn cshape b1 c= csizel cflatten cCONS b0 b1 csumn cshape cCONS b0 b1 ! c= csizel cflatten b0 csumn cshape b0 ! c= csizel cflatten b0 csumn cshape b0
+ |- ((!a0. (!a1. (((sizel (flatten a1)) = (sumn (shape a1))) ==> ((sizel (flatten ((CONS a0) a1))) = (sumn (shape ((CONS a0) a1))))))) = (((sizel (flatten NIL)) = (sumn (shape NIL))) /\ (!a0. (!a1. (((sizel (flatten a1)) = (sumn (shape a1))) ==> ((sizel (flatten ((CONS a0) a1))) = (sumn (shape ((CONS a0) a1)))))))))
T c= ! ! c==> c= csizel cflatten b1 csumn cshape b1 c= csizel cflatten cCONS b0 b1 csumn cshape cCONS b0 b1 c/\ c= csizel cflatten cNIL csumn cshape cNIL ! ! c==> c= csizel cflatten b1 csumn cshape b1 c= csizel cflatten cCONS b0 b1 csumn cshape cCONS b0 b1
+ |- ((map sizel) = shape)
T c= * part cmap part csizel part cshape
+ |- ((\s1. (!s2. ((sizel ((cat s1) s2)) = ((sizel s1) + (sizel s2))))) s1)
T * / ! c= csizel ccat b0 b1 c+ csizel b0 csizel b1 f0
- |- (((!x. (((\ss1. (ss = ss1)) x) ==> (?ss1. (ss = ss1)))) ==> ((?ss1. (ss = ss1)) ==> (?ss1. (ss = ss1)))) = ((?ss1. (ss = ss1)) ==> (?ss1. (ss = ss1))))
T c= c==> ! c==> * / c= f0 b1 b0 c? / c= f0 b1 c==> c? / c= f0 b0 c? / c= f0 b0 c==> c? / c= f0 b0 c? / c= f0 b0
+ (((foldr cat) NIL) = flatten) |- (flatten = ((foldr cat) NIL))
T c==> c= * * part cfoldr part ccat cNIL part cflatten c= part cflatten * * part cfoldr part ccat cNIL
+ ((sizel (flatten ss)) = (sumn (shape ss))) |- ((sizel ((cat s) (flatten ss))) = (sumn ((CONS (sizel s)) ((map sizel) ss))))
T c==> c= csizel cflatten f0 csumn cshape f0 c= csizel ccat f1 cflatten f0 csumn cCONS csizel f1 cmap part csizel f0
- |- ((ss = ss1) ==> (?ss1. (ss = ss1)))
T c==> c= f0 f1 c? / c= f0 b0
- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))) |- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x))))
T c==> c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0 c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))) = T)
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c= c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0 cT
- (ss = ss1) |- ((\ss1. (ss = ss1)) ss1)
T c==> c= f0 f1 * / c= f0 b0 f1
- |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
- |- (?ss1. (ss = ss1))
T c? / c= f0 b0
- |- (((!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) ==> ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)) = ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q))
T c= c==> ! c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- |- ((((\ss1. (ss = ss1)) ss1) ==> (?ss1. (ss = ss1))) = T)
T c= c==> * / c= f0 b0 f1 c? / c= f0 b0 cT
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) /\ (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c/\ ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
