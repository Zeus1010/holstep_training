N Tame_list.indexf
C |- (!y. (!x. (!s. ((((indexf x) y) s) = (((COND (((MEM x) s) /\ ((MEM y) s))) ((((indexl y) s) + ((sizel s) - ((indexl x) s))) MOD (sizel s))) (sizel s))))))
T c= cindexf f0 f1 f2 cCOND c/\ cMEM f0 f2 cMEM f1 f2 cMOD c+ cindexl f1 f2 c- csizel f2 cindexl f0 f2 csizel f2 csizel f2
D Tame_defs2.indexf
A |- (!s. (!x. (!y. ((((indexf x) y) s) = (((COND (((MEM x) s) /\ ((MEM y) s))) ((((indexl y) s) + ((sizel s) - ((indexl x) s))) MOD (sizel s))) (sizel s))))))
T c= cindexf f0 f1 f2 cCOND c/\ cMEM f0 f2 cMEM f1 f2 cMOD c+ cindexl f1 f2 c- csizel f2 cindexl f0 f2 csizel f2 csizel f2
- |- (((((containsDuplicateEdge g) f) v) is) = ((containsUnacceptableEdge (\i. (\j. ((((duplicateEdge g) f) (((nextVertices f) i) v)) (((nextVertices f) j) v))))) is))
T c= ccontainsDuplicateEdge f0 f1 f2 f3 ccontainsUnacceptableEdge / / cduplicateEdge f0 f1 cnextVertices f1 b0 f2 cnextVertices f1 b1 f2 f3
- |- (((!L. (!N. ((((match_quotient_list g) L) N) = (((set_of_list ((MAP (list_pairs o FST)) ((filter SND) (faces g)))) SUBSET (set_of_list ((filter (final_list L)) N))) /\ ((fgraph g) = ((quotient_list L) N)))))) ==> ((\L. (!N. ((((match_quotient_list g) L) N) = (((set_of_list ((MAP (list_pairs o FST)) ((filter SND) (faces g)))) SUBSET (set_of_list ((filter (final_list L)) N))) /\ ((fgraph g) = ((quotient_list L) N)))))) L)) = ((\L. (!N. ((((match_quotient_list g) L) N) = (((set_of_list ((MAP (list_pairs o FST)) ((filter SND) (faces g)))) SUBSET (set_of_list ((filter (final_list L)) N))) /\ ((fgraph g) = ((quotient_list L) N)))))) L))
T c= c==> ! ! c= cmatch_quotient_list f0 b0 b1 c/\ cSUBSET * part cset_of_list cMAP * * part co part clist_pairs part cFST cfilter part cSND cfaces f0 * part cset_of_list cfilter * part cfinal_list b0 b1 c= cfgraph f0 cquotient_list b0 b1 * / ! c= cmatch_quotient_list f0 b0 b1 c/\ cSUBSET * part cset_of_list cMAP * * part co part clist_pairs part cFST cfilter part cSND cfaces f0 * part cset_of_list cfilter * part cfinal_list b0 b1 c= cfgraph f0 cquotient_list b0 b1 f1 * / ! c= cmatch_quotient_list f0 b0 b1 c/\ cSUBSET * part cset_of_list cMAP * * part co part clist_pairs part cFST cfilter part cSND cfaces f0 * part cset_of_list cfilter * part cfinal_list b0 b1 c= cfgraph f0 cquotient_list b0 b1 f1
- |- (((!f. (!z. (!xs. ((((foldr2 f) xs) z) = (((foldr f) z) xs))))) ==> ((\f. (!z. (!xs. ((((foldr2 f) xs) z) = (((foldr f) z) xs))))) f)) = ((\f. (!z. (!xs. ((((foldr2 f) xs) z) = (((foldr f) z) xs))))) f))
T c= c==> ! ! ! c= cfoldr2 b0 b2 b1 cfoldr b0 b1 b2 * / ! ! c= cfoldr2 b0 b2 b1 cfoldr b0 b1 b2 f0 * / ! ! c= cfoldr2 b0 b2 b1 cfoldr b0 b1 b2 f0
- |- (((!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))) ==> ((\i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))) i)) = ((\i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))) i))
T c= c==> ! c= cntrans f0 f1 f2 f3 b0 cFST cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 * / c= cntrans f0 f1 f2 f3 b0 cFST cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4 * / c= cntrans f0 f1 f2 f3 b0 cFST cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4
- |- (((!b. (!a. (((list_prod a) b) = (flatten ((MAP (\x. ((list_prod1 x) b))) a))))) ==> ((\b. (!a. (((list_prod a) b) = (flatten ((MAP (\x. ((list_prod1 x) b))) a))))) b)) = ((\b. (!a. (((list_prod a) b) = (flatten ((MAP (\x. ((list_prod1 x) b))) a))))) b))
T c= c==> ! ! c= clist_prod b1 b0 cflatten cMAP / clist_prod1 b2 b0 b1 * / ! c= clist_prod b1 b0 cflatten cMAP / clist_prod1 b2 b0 b1 f0 * / ! c= clist_prod b1 b0 cflatten cMAP / clist_prod1 b2 b0 b1 f0
- |- (((!g. (!f. (!v. (!is. (((((containsDuplicateEdge g) f) v) is) = ((containsUnacceptableEdge (\i. (\j. ((((duplicateEdge g) f) (((nextVertices f) i) v)) (((nextVertices f) j) v))))) is)))))) ==> ((\g. (!f. (!v. (!is. (((((containsDuplicateEdge g) f) v) is) = ((containsUnacceptableEdge (\i. (\j. ((((duplicateEdge g) f) (((nextVertices f) i) v)) (((nextVertices f) j) v))))) is)))))) g)) = ((\g. (!f. (!v. (!is. (((((containsDuplicateEdge g) f) v) is) = ((containsUnacceptableEdge (\i. (\j. ((((duplicateEdge g) f) (((nextVertices f) i) v)) (((nextVertices f) j) v))))) is)))))) g))
T c= c==> ! ! ! ! c= ccontainsDuplicateEdge b0 b1 b2 b3 ccontainsUnacceptableEdge / / cduplicateEdge b0 b1 cnextVertices b1 b4 b2 cnextVertices b1 b5 b2 b3 * / ! ! ! c= ccontainsDuplicateEdge b0 b1 b2 b3 ccontainsUnacceptableEdge / / cduplicateEdge b0 b1 cnextVertices b1 b4 b2 cnextVertices b1 b5 b2 b3 f0 * / ! ! ! c= ccontainsDuplicateEdge b0 b1 b2 b3 ccontainsUnacceptableEdge / / cduplicateEdge b0 b1 cnextVertices b1 b4 b2 cnextVertices b1 b5 b2 b3 f0
- |- (((!N. (!r. (!x. (((((l'z L) N) r) x) = (((POWER (f_list L)) (SUC ((((l'p L) N) r) x))) (((l'y L) r) x)))))) ==> ((\N. (!r. (!x. (((((l'z L) N) r) x) = (((POWER (f_list L)) (SUC ((((l'p L) N) r) x))) (((l'y L) r) x)))))) N)) = ((\N. (!r. (!x. (((((l'z L) N) r) x) = (((POWER (f_list L)) (SUC ((((l'p L) N) r) x))) (((l'y L) r) x)))))) N))
T c= c==> ! ! ! c= cl'z f0 b0 b1 b2 cPOWER * part cf_list f0 cSUC cl'p f0 b0 b1 b2 cl'y f0 b1 b2 * / ! ! c= cl'z f0 b0 b1 b2 cPOWER * part cf_list f0 cSUC cl'p f0 b0 b1 b2 cl'y f0 b1 b2 f1 * / ! ! c= cl'z f0 b0 b1 b2 cPOWER * part cf_list f0 cSUC cl'p f0 b0 b1 b2 cl'y f0 b1 b2 f1
- |- ((\v. (!g. (((height g) v) = ((EL v) (heights g))))) v)
T * / ! c= cheight b1 b0 cEL b0 cheights b1 f0
- |- (((!b. (((list_prod1 a) b) = ((MAP (\x. (a , x))) b))) ==> ((\b. (((list_prod1 a) b) = ((MAP (\x. (a , x))) b))) b)) = ((\b. (((list_prod1 a) b) = ((MAP (\x. (a , x))) b))) b))
T c= c==> ! c= clist_prod1 f0 b0 cMAP / c, f0 b1 b0 * / c= clist_prod1 f0 b0 cMAP / c, f0 b1 b0 f1 * / c= clist_prod1 f0 b0 cMAP / c, f0 b1 b0 f1
+ |- ((\x. (!y. ((((indexf x) y) s) = (((COND (((MEM x) s) /\ ((MEM y) s))) ((((indexl y) s) + ((sizel s) - ((indexl x) s))) MOD (sizel s))) (sizel s))))) x)
T * / ! c= cindexf b0 b1 f0 cCOND c/\ cMEM b0 f0 cMEM b1 f0 cMOD c+ cindexl b1 f0 c- csizel f0 cindexl b0 f0 csizel f0 csizel f0 f1
+ |- (((!s. (!x. (!y. ((((indexf x) y) s) = (((COND (((MEM x) s) /\ ((MEM y) s))) ((((indexl y) s) + ((sizel s) - ((indexl x) s))) MOD (sizel s))) (sizel s)))))) ==> ((\s. (!x. (!y. ((((indexf x) y) s) = (((COND (((MEM x) s) /\ ((MEM y) s))) ((((indexl y) s) + ((sizel s) - ((indexl x) s))) MOD (sizel s))) (sizel s)))))) s)) = ((\s. (!x. (!y. ((((indexf x) y) s) = (((COND (((MEM x) s) /\ ((MEM y) s))) ((((indexl y) s) + ((sizel s) - ((indexl x) s))) MOD (sizel s))) (sizel s)))))) s))
T c= c==> ! ! ! c= cindexf b1 b2 b0 cCOND c/\ cMEM b1 b0 cMEM b2 b0 cMOD c+ cindexl b2 b0 c- csizel b0 cindexl b1 b0 csizel b0 csizel b0 * / ! ! c= cindexf b1 b2 b0 cCOND c/\ cMEM b1 b0 cMEM b2 b0 cMOD c+ cindexl b2 b0 c- csizel b0 cindexl b1 b0 csizel b0 csizel b0 f0 * / ! ! c= cindexf b1 b2 b0 cCOND c/\ cMEM b1 b0 cMEM b2 b0 cMOD c+ cindexl b2 b0 c- csizel b0 cindexl b1 b0 csizel b0 csizel b0 f0
+ |- ((!x. (!s. ((((indexf x) y) s) = (((COND (((MEM x) s) /\ ((MEM y) s))) ((((indexl y) s) + ((sizel s) - ((indexl x) s))) MOD (sizel s))) (sizel s))))) = T)
T c= ! ! c= cindexf b0 f0 b1 cCOND c/\ cMEM b0 b1 cMEM f0 b1 cMOD c+ cindexl f0 b1 c- csizel b1 cindexl b0 b1 csizel b1 csizel b1 cT
+ |- (((((indexf x) y) s) = (((COND (((MEM x) s) /\ ((MEM y) s))) ((((indexl y) s) + ((sizel s) - ((indexl x) s))) MOD (sizel s))) (sizel s))) = T)
T c= c= cindexf f0 f1 f2 cCOND c/\ cMEM f0 f2 cMEM f1 f2 cMOD c+ cindexl f1 f2 c- csizel f2 cindexl f0 f2 csizel f2 csizel f2 cT
+ |- ((\y. ((((indexf x) y) s) = (((COND (((MEM x) s) /\ ((MEM y) s))) ((((indexl y) s) + ((sizel s) - ((indexl x) s))) MOD (sizel s))) (sizel s)))) y)
T * / c= cindexf f0 b0 f1 cCOND c/\ cMEM f0 f1 cMEM b0 f1 cMOD c+ cindexl b0 f1 c- csizel f1 cindexl f0 f1 csizel f1 csizel f1 f2
+ |- (((!x. (!y. ((((indexf x) y) s) = (((COND (((MEM x) s) /\ ((MEM y) s))) ((((indexl y) s) + ((sizel s) - ((indexl x) s))) MOD (sizel s))) (sizel s))))) ==> ((\x. (!y. ((((indexf x) y) s) = (((COND (((MEM x) s) /\ ((MEM y) s))) ((((indexl y) s) + ((sizel s) - ((indexl x) s))) MOD (sizel s))) (sizel s))))) x)) = ((\x. (!y. ((((indexf x) y) s) = (((COND (((MEM x) s) /\ ((MEM y) s))) ((((indexl y) s) + ((sizel s) - ((indexl x) s))) MOD (sizel s))) (sizel s))))) x))
T c= c==> ! ! c= cindexf b0 b1 f0 cCOND c/\ cMEM b0 f0 cMEM b1 f0 cMOD c+ cindexl b1 f0 c- csizel f0 cindexl b0 f0 csizel f0 csizel f0 * / ! c= cindexf b0 b1 f0 cCOND c/\ cMEM b0 f0 cMEM b1 f0 cMOD c+ cindexl b1 f0 c- csizel f0 cindexl b0 f0 csizel f0 csizel f0 f1 * / ! c= cindexf b0 b1 f0 cCOND c/\ cMEM b0 f0 cMEM b1 f0 cMOD c+ cindexl b1 f0 c- csizel f0 cindexl b0 f0 csizel f0 csizel f0 f1
+ |- (((!y. ((((indexf x) y) s) = (((COND (((MEM x) s) /\ ((MEM y) s))) ((((indexl y) s) + ((sizel s) - ((indexl x) s))) MOD (sizel s))) (sizel s)))) ==> ((\y. ((((indexf x) y) s) = (((COND (((MEM x) s) /\ ((MEM y) s))) ((((indexl y) s) + ((sizel s) - ((indexl x) s))) MOD (sizel s))) (sizel s)))) y)) = ((\y. ((((indexf x) y) s) = (((COND (((MEM x) s) /\ ((MEM y) s))) ((((indexl y) s) + ((sizel s) - ((indexl x) s))) MOD (sizel s))) (sizel s)))) y))
T c= c==> ! c= cindexf f0 b0 f1 cCOND c/\ cMEM f0 f1 cMEM b0 f1 cMOD c+ cindexl b0 f1 c- csizel f1 cindexl f0 f1 csizel f1 csizel f1 * / c= cindexf f0 b0 f1 cCOND c/\ cMEM f0 f1 cMEM b0 f1 cMOD c+ cindexl b0 f1 c- csizel f1 cindexl f0 f1 csizel f1 csizel f1 f2 * / c= cindexf f0 b0 f1 cCOND c/\ cMEM f0 f1 cMEM b0 f1 cMOD c+ cindexl b0 f1 c- csizel f1 cindexl f0 f1 csizel f1 csizel f1 f2
+ |- ((\s. (!x. (!y. ((((indexf x) y) s) = (((COND (((MEM x) s) /\ ((MEM y) s))) ((((indexl y) s) + ((sizel s) - ((indexl x) s))) MOD (sizel s))) (sizel s)))))) s)
T * / ! ! c= cindexf b1 b2 b0 cCOND c/\ cMEM b1 b0 cMEM b2 b0 cMOD c+ cindexl b2 b0 c- csizel b0 cindexl b1 b0 csizel b0 csizel b0 f0
+ |- ((!s. ((((indexf x) y) s) = (((COND (((MEM x) s) /\ ((MEM y) s))) ((((indexl y) s) + ((sizel s) - ((indexl x) s))) MOD (sizel s))) (sizel s)))) = T)
T c= ! c= cindexf f0 f1 b0 cCOND c/\ cMEM f0 b0 cMEM f1 b0 cMOD c+ cindexl f1 b0 c- csizel b0 cindexl f0 b0 csizel b0 csizel b0 cT
