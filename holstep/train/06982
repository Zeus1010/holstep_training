N NADD_INV
C |- (!x. ((dest_nadd (nadd_inv x)) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (\n. (NUMERAL _0))) (nadd_rinv x))))
T c= * part cdest_nadd cnadd_inv f0 * * * part cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 / cNUMERAL c_0 * part cnadd_rinv f0
D TRUTH
A |- T
T cT
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D Ssrnat.mul0n
A |- (!n. (((NUMERAL _0) * n) = (NUMERAL _0)))
T c= c* cNUMERAL c_0 f0 cNUMERAL c_0
D is_nadd
A |- (!x. ((is_nadd x) = (?B. (!m. (!n. ((dist ((m * (x n)) , (n * (x m)))) <= (B * (m + n))))))))
T c= cis_nadd f0 c? / ! ! c<= cdist c, c* b1 * f0 b2 c* b2 * f0 b1 c* b0 c+ b1 b2
D nadd_rep
A |- ((is_nadd r) = ((dest_nadd (mk_nadd r)) = r))
T c= cis_nadd f0 c= * part cdest_nadd cmk_nadd f0 f0
D NADD_OF_NUM
A |- (!k. ((dest_nadd (nadd_of_num k)) = (\n. (k * n))))
T c= * part cdest_nadd cnadd_of_num f0 / c* f0 b0
D NADD_MUL_LINV_LEMMA8
A |- (!x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n))))))))
T c==> c~ cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b1 cnadd_rinv f0 b2 c* b2 cnadd_rinv f0 b1 c* b0 c+ b1 b2
D nadd_inv
A |- (!x. ((nadd_inv x) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (nadd_of_num (NUMERAL _0))) (mk_nadd (nadd_rinv x)))))
T c= cnadd_inv f0 cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 cnadd_of_num cNUMERAL c_0 cmk_nadd * part cnadd_rinv f0
+ |- (((nadd_eq x) (nadd_of_num (NUMERAL _0))) \/ (~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))))
T c\/ cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c~ cnadd_eq f0 cnadd_of_num cNUMERAL c_0
+ |- (((!k. ((dest_nadd (nadd_of_num k)) = (\n. (k * n)))) ==> ((\k. ((dest_nadd (nadd_of_num k)) = (\n. (k * n)))) k)) = ((\k. ((dest_nadd (nadd_of_num k)) = (\n. (k * n)))) k))
T c= c==> ! c= * part cdest_nadd cnadd_of_num b0 / c* b0 b1 * / c= * part cdest_nadd cnadd_of_num b0 / c* b0 b1 f0 * / c= * part cdest_nadd cnadd_of_num b0 / c* b0 b1 f0
- |- ((!x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))) ==> (!x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))))
T c==> ! c==> c~ cnadd_eq b0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b2 cnadd_rinv b0 b3 c* b3 cnadd_rinv b0 b2 c* b1 c+ b2 b3 ! c==> c~ cnadd_eq b0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b2 cnadd_rinv b0 b3 c* b3 cnadd_rinv b0 b2 c* b1 c+ b2 b3
- |- ((\m. (!n. ((m * (SUC n)) = (m + (m * n))))) m)
T * / ! c= c* b0 cSUC b1 c+ b0 c* b0 b1 f0
- |- ((\n. (((NUMERAL (BIT1 _0)) * n) = n)) n)
T * / c= c* cNUMERAL cBIT1 c_0 b0 b0 f0
- |- ((\m. ((m * (NUMERAL _0)) = (NUMERAL _0))) m)
T * / c= c* b0 cNUMERAL c_0 cNUMERAL c_0 f0
+ |- (((nadd_eq x) (nadd_of_num (NUMERAL _0))) ==> ((dest_nadd (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (nadd_of_num (NUMERAL _0))) (mk_nadd (nadd_rinv x)))) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (\n. (NUMERAL _0))) (nadd_rinv x))))
T c==> cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c= * part cdest_nadd cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 cnadd_of_num cNUMERAL c_0 cmk_nadd * part cnadd_rinv f0 * * * part cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 / cNUMERAL c_0 * part cnadd_rinv f0
- |- ((!n. t) = t)
T c= ! f0 f0
+ ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> ((dest_nadd (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (nadd_of_num (NUMERAL _0))) (mk_nadd (nadd_rinv x)))) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (\n. (NUMERAL _0))) (nadd_rinv x)))), (((nadd_eq x) (nadd_of_num (NUMERAL _0))) ==> ((dest_nadd (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (nadd_of_num (NUMERAL _0))) (mk_nadd (nadd_rinv x)))) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (\n. (NUMERAL _0))) (nadd_rinv x)))) |- ((dest_nadd (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (nadd_of_num (NUMERAL _0))) (mk_nadd (nadd_rinv x)))) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (\n. (NUMERAL _0))) (nadd_rinv x)))
T c==> c==> c~ cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c= * part cdest_nadd cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 cnadd_of_num cNUMERAL c_0 cmk_nadd * part cnadd_rinv f0 * * * part cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 / cNUMERAL c_0 * part cnadd_rinv f0 c==> c==> cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c= * part cdest_nadd cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 cnadd_of_num cNUMERAL c_0 cmk_nadd * part cnadd_rinv f0 * * * part cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 / cNUMERAL c_0 * part cnadd_rinv f0 c= * part cdest_nadd cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 cnadd_of_num cNUMERAL c_0 cmk_nadd * part cnadd_rinv f0 * * * part cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 / cNUMERAL c_0 * part cnadd_rinv f0
- |- ((?B. t) = t)
T c= c? / f0 f0
+ |- (((!t. (t \/ (~ t))) ==> ((\t. (t \/ (~ t))) ((nadd_eq x) (nadd_of_num (NUMERAL _0))))) = ((\t. (t \/ (~ t))) ((nadd_eq x) (nadd_of_num (NUMERAL _0)))))
T c= c==> ! c\/ b0 c~ b0 * / c\/ b0 c~ b0 cnadd_eq f0 cnadd_of_num cNUMERAL c_0 * / c\/ b0 c~ b0 cnadd_eq f0 cnadd_of_num cNUMERAL c_0
- |- (((!n. (((SUC m) * n) = ((m * n) + n))) ==> ((\n. (((SUC m) * n) = ((m * n) + n))) n)) = ((\n. (((SUC m) * n) = ((m * n) + n))) n))
T c= c==> ! c= c* cSUC f0 b0 c+ c* f0 b0 b0 * / c= c* cSUC f0 b0 c+ c* f0 b0 b0 f1 * / c= c* cSUC f0 b0 c+ c* f0 b0 b0 f1
- |- ((\m. (!n. (((SUC m) * n) = ((m * n) + n)))) m)
T * / ! c= c* cSUC b0 b1 c+ c* b0 b1 b1 f0
+ (~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) |- (((dest_nadd (mk_nadd (nadd_rinv x))) = (nadd_rinv x)) = ((dest_nadd (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (nadd_of_num (NUMERAL _0))) (mk_nadd (nadd_rinv x)))) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (\n. (NUMERAL _0))) (nadd_rinv x))))
T c==> c~ cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c= c= * part cdest_nadd cmk_nadd * part cnadd_rinv f0 * part cnadd_rinv f0 c= * part cdest_nadd cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 cnadd_of_num cNUMERAL c_0 cmk_nadd * part cnadd_rinv f0 * * * part cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 / cNUMERAL c_0 * part cnadd_rinv f0
+ (((dest_nadd (mk_nadd r)) = r) = (is_nadd r)) |- ((is_nadd r) = ((dest_nadd (mk_nadd r)) = r))
T c==> c= c= * part cdest_nadd cmk_nadd f0 f0 cis_nadd f0 c= cis_nadd f0 c= * part cdest_nadd cmk_nadd f0 f0
- |- ((m * (NUMERAL (BIT1 _0))) = m)
T c= c* f0 cNUMERAL cBIT1 c_0 f0
- |- (((!m. (!n. ((m * (SUC n)) = (m + (m * n))))) ==> ((\m. (!n. ((m * (SUC n)) = (m + (m * n))))) m)) = ((\m. (!n. ((m * (SUC n)) = (m + (m * n))))) m))
T c= c==> ! ! c= c* b0 cSUC b1 c+ b0 c* b0 b1 * / ! c= c* b0 cSUC b1 c+ b0 c* b0 b1 f0 * / ! c= c* b0 cSUC b1 c+ b0 c* b0 b1 f0
- |- ((!m. ((m * (NUMERAL _0)) = (NUMERAL _0))) /\ ((!n. (((NUMERAL (BIT1 _0)) * n) = n)) /\ ((!m. ((m * (NUMERAL (BIT1 _0))) = m)) /\ ((!m. (!n. (((SUC m) * n) = ((m * n) + n)))) /\ (!m. (!n. ((m * (SUC n)) = (m + (m * n)))))))))
T c/\ ! c= c* b0 cNUMERAL c_0 cNUMERAL c_0 c/\ ! c= c* cNUMERAL cBIT1 c_0 b0 b0 c/\ ! c= c* b0 cNUMERAL cBIT1 c_0 b0 c/\ ! ! c= c* cSUC b0 b1 c+ c* b0 b1 b1 ! ! c= c* b0 cSUC b1 c+ b0 c* b0 b1
+ |- ((?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))) = ((dest_nadd (mk_nadd (nadd_rinv x))) = (nadd_rinv x)))
T c= c? / ! ! c<= cdist c, c* b1 cnadd_rinv f0 b2 c* b2 cnadd_rinv f0 b1 c* b0 c+ b1 b2 c= * part cdest_nadd cmk_nadd * part cnadd_rinv f0 * part cnadd_rinv f0
+ |- ((x = x) = T)
T c= c= f0 f0 cT
- |- ((!n. (((NUMERAL (BIT1 _0)) * n) = n)) /\ ((!m. ((m * (NUMERAL (BIT1 _0))) = m)) /\ ((!m. (!n. (((SUC m) * n) = ((m * n) + n)))) /\ (!m. (!n. ((m * (SUC n)) = (m + (m * n))))))))
T c/\ ! c= c* cNUMERAL cBIT1 c_0 b0 b0 c/\ ! c= c* b0 cNUMERAL cBIT1 c_0 b0 c/\ ! ! c= c* cSUC b0 b1 c+ c* b0 b1 b1 ! ! c= c* b0 cSUC b1 c+ b0 c* b0 b1
+ |- (((dest_nadd (mk_nadd r)) = r) = (is_nadd r))
T c= c= * part cdest_nadd cmk_nadd f0 f0 cis_nadd f0
+ ((is_nadd r) = ((dest_nadd (mk_nadd r)) = r)) |- (((dest_nadd (mk_nadd r)) = r) = (is_nadd r))
T c==> c= cis_nadd f0 c= * part cdest_nadd cmk_nadd f0 f0 c= c= * part cdest_nadd cmk_nadd f0 f0 cis_nadd f0
- |- (((!x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))) ==> (!x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n))))))))) = (!x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))))
T c= c==> ! c==> c~ cnadd_eq b0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b2 cnadd_rinv b0 b3 c* b3 cnadd_rinv b0 b2 c* b1 c+ b2 b3 ! c==> c~ cnadd_eq b0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b2 cnadd_rinv b0 b3 c* b3 cnadd_rinv b0 b2 c* b1 c+ b2 b3 ! c==> c~ cnadd_eq b0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b2 cnadd_rinv b0 b3 c* b3 cnadd_rinv b0 b2 c* b1 c+ b2 b3
+ |- ((\x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))) x)
T * / c==> c~ cnadd_eq b0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b2 cnadd_rinv b0 b3 c* b3 cnadd_rinv b0 b2 c* b1 c+ b2 b3 f0
- |- (((!n. (((NUMERAL (BIT1 _0)) * n) = n)) ==> ((\n. (((NUMERAL (BIT1 _0)) * n) = n)) n)) = ((\n. (((NUMERAL (BIT1 _0)) * n) = n)) n))
T c= c==> ! c= c* cNUMERAL cBIT1 c_0 b0 b0 * / c= c* cNUMERAL cBIT1 c_0 b0 b0 f0 * / c= c* cNUMERAL cBIT1 c_0 b0 b0 f0
- (!x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))), (~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) |- ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) /\ (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))
T c==> ! c==> c~ cnadd_eq b0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b2 cnadd_rinv b0 b3 c* b3 cnadd_rinv b0 b2 c* b1 c+ b2 b3 c==> c~ cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c/\ c~ cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b1 cnadd_rinv f0 b2 c* b2 cnadd_rinv f0 b1 c* b0 c+ b1 b2
+ |- ((((COND F) t1) t2) = t2)
T c= cCOND cF f0 f1 f1
- |- ((\n. ((m * (SUC n)) = (m + (m * n)))) n)
T * / c= c* f0 cSUC b0 c+ f0 c* f0 b0 f1
- |- ((!m. ((m * (NUMERAL (BIT1 _0))) = m)) /\ ((!m. (!n. (((SUC m) * n) = ((m * n) + n)))) /\ (!m. (!n. ((m * (SUC n)) = (m + (m * n)))))))
T c/\ ! c= c* b0 cNUMERAL cBIT1 c_0 b0 c/\ ! ! c= c* cSUC b0 b1 c+ c* b0 b1 b1 ! ! c= c* b0 cSUC b1 c+ b0 c* b0 b1
+ |- (((!x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))) ==> ((\x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))) x)) = ((\x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))) x))
T c= c==> ! c==> c~ cnadd_eq b0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b2 cnadd_rinv b0 b3 c* b3 cnadd_rinv b0 b2 c* b1 c+ b2 b3 * / c==> c~ cnadd_eq b0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b2 cnadd_rinv b0 b3 c* b3 cnadd_rinv b0 b2 c* b1 c+ b2 b3 f0 * / c==> c~ cnadd_eq b0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b2 cnadd_rinv b0 b3 c* b3 cnadd_rinv b0 b2 c* b1 c+ b2 b3 f0
- |- ((\m. ((m * (NUMERAL (BIT1 _0))) = m)) m)
T * / c= c* b0 cNUMERAL cBIT1 c_0 b0 f0
+ |- (((!x. ((nadd_inv x) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (nadd_of_num (NUMERAL _0))) (mk_nadd (nadd_rinv x))))) ==> ((\x. ((nadd_inv x) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (nadd_of_num (NUMERAL _0))) (mk_nadd (nadd_rinv x))))) x)) = ((\x. ((nadd_inv x) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (nadd_of_num (NUMERAL _0))) (mk_nadd (nadd_rinv x))))) x))
T c= c==> ! c= cnadd_inv b0 cCOND cnadd_eq b0 cnadd_of_num cNUMERAL c_0 cnadd_of_num cNUMERAL c_0 cmk_nadd * part cnadd_rinv b0 * / c= cnadd_inv b0 cCOND cnadd_eq b0 cnadd_of_num cNUMERAL c_0 cnadd_of_num cNUMERAL c_0 cmk_nadd * part cnadd_rinv b0 f0 * / c= cnadd_inv b0 cCOND cnadd_eq b0 cnadd_of_num cNUMERAL c_0 cnadd_of_num cNUMERAL c_0 cmk_nadd * part cnadd_rinv b0 f0
- |- (((!m. (!n. (((SUC m) * n) = ((m * n) + n)))) ==> ((\m. (!n. (((SUC m) * n) = ((m * n) + n)))) m)) = ((\m. (!n. (((SUC m) * n) = ((m * n) + n)))) m))
T c= c==> ! ! c= c* cSUC b0 b1 c+ c* b0 b1 b1 * / ! c= c* cSUC b0 b1 c+ c* b0 b1 b1 f0 * / ! c= c* cSUC b0 b1 c+ c* b0 b1 b1 f0
- |- (((!m. ((m * (NUMERAL _0)) = (NUMERAL _0))) ==> ((\m. ((m * (NUMERAL _0)) = (NUMERAL _0))) m)) = ((\m. ((m * (NUMERAL _0)) = (NUMERAL _0))) m))
T c= c==> ! c= c* b0 cNUMERAL c_0 cNUMERAL c_0 * / c= c* b0 cNUMERAL c_0 cNUMERAL c_0 f0 * / c= c* b0 cNUMERAL c_0 cNUMERAL c_0 f0
+ |- (((!n. (((NUMERAL _0) * n) = (NUMERAL _0))) ==> ((\n. (((NUMERAL _0) * n) = (NUMERAL _0))) n)) = ((\n. (((NUMERAL _0) * n) = (NUMERAL _0))) n))
T c= c==> ! c= c* cNUMERAL c_0 b0 cNUMERAL c_0 * / c= c* cNUMERAL c_0 b0 cNUMERAL c_0 f0 * / c= c* cNUMERAL c_0 b0 cNUMERAL c_0 f0
+ ((nadd_eq x) (nadd_of_num (NUMERAL _0))) |- (((nadd_eq x) (nadd_of_num (NUMERAL _0))) /\ ((dest_nadd (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (nadd_of_num (NUMERAL _0))) (mk_nadd (nadd_rinv x)))) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (\n. (NUMERAL _0))) (nadd_rinv x))))
T c==> cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c/\ cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c= * part cdest_nadd cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 cnadd_of_num cNUMERAL c_0 cmk_nadd * part cnadd_rinv f0 * * * part cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 / cNUMERAL c_0 * part cnadd_rinv f0
+ (~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) |- (((nadd_eq x) (nadd_of_num (NUMERAL _0))) = F)
T c==> c~ cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c= cnadd_eq f0 cnadd_of_num cNUMERAL c_0 cF
- (~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) |- ((!x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))
T c==> c~ cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c==> ! c==> c~ cnadd_eq b0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b2 cnadd_rinv b0 b3 c* b3 cnadd_rinv b0 b2 c* b1 c+ b2 b3 c? / ! ! c<= cdist c, c* b1 cnadd_rinv f0 b2 c* b2 cnadd_rinv f0 b1 c* b0 c+ b1 b2
- (!x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))) |- ((!x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))) /\ (!x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))))
T c==> ! c==> c~ cnadd_eq b0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b2 cnadd_rinv b0 b3 c* b3 cnadd_rinv b0 b2 c* b1 c+ b2 b3 c/\ ! c==> c~ cnadd_eq b0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b2 cnadd_rinv b0 b3 c* b3 cnadd_rinv b0 b2 c* b1 c+ b2 b3 ! c==> c~ cnadd_eq b0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b2 cnadd_rinv b0 b3 c* b3 cnadd_rinv b0 b2 c* b1 c+ b2 b3
+ ((nadd_eq x) (nadd_of_num (NUMERAL _0))) |- (T = ((dest_nadd (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (nadd_of_num (NUMERAL _0))) (mk_nadd (nadd_rinv x)))) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (\n. (NUMERAL _0))) (nadd_rinv x))))
T c==> cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c= cT c= * part cdest_nadd cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 cnadd_of_num cNUMERAL c_0 cmk_nadd * part cnadd_rinv f0 * * * part cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 / cNUMERAL c_0 * part cnadd_rinv f0
- (!x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))) |- ((\x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))) x)
T c==> ! c==> c~ cnadd_eq b0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b2 cnadd_rinv b0 b3 c* b3 cnadd_rinv b0 b2 c* b1 c+ b2 b3 * / c==> c~ cnadd_eq b0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b2 cnadd_rinv b0 b3 c* b3 cnadd_rinv b0 b2 c* b1 c+ b2 b3 f0
- |- (((SUC m) * n) = ((m * n) + n))
T c= c* cSUC f0 f1 c+ c* f0 f1 f1
- |- ((!m. (!n. (((SUC m) * n) = ((m * n) + n)))) /\ (!m. (!n. ((m * (SUC n)) = (m + (m * n))))))
T c/\ ! ! c= c* cSUC b0 b1 c+ c* b0 b1 b1 ! ! c= c* b0 cSUC b1 c+ b0 c* b0 b1
- |- ((m * (NUMERAL _0)) = (NUMERAL _0))
T c= c* f0 cNUMERAL c_0 cNUMERAL c_0
- (!x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))), (~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) |- (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n))))))
T c==> ! c==> c~ cnadd_eq b0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b2 cnadd_rinv b0 b3 c* b3 cnadd_rinv b0 b2 c* b1 c+ b2 b3 c==> c~ cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b1 cnadd_rinv f0 b2 c* b2 cnadd_rinv f0 b1 c* b0 c+ b1 b2
- |- ((m * (SUC n)) = (m + (m * n)))
T c= c* f0 cSUC f1 c+ f0 c* f0 f1
+ |- ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> ((dest_nadd (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (nadd_of_num (NUMERAL _0))) (mk_nadd (nadd_rinv x)))) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (\n. (NUMERAL _0))) (nadd_rinv x))))
T c==> c~ cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c= * part cdest_nadd cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 cnadd_of_num cNUMERAL c_0 cmk_nadd * part cnadd_rinv f0 * * * part cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 / cNUMERAL c_0 * part cnadd_rinv f0
+ |- ((\x. ((is_nadd x) = (?B. (!m. (!n. ((dist ((m * (x n)) , (n * (x m)))) <= (B * (m + n)))))))) x)
T * / c= cis_nadd b0 c? / ! ! c<= cdist c, c* b2 * b0 b3 c* b3 * b0 b2 c* b1 c+ b2 b3 f0
- (!x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))) |- (((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n))))))) = T)
T c==> ! c==> c~ cnadd_eq b0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b2 cnadd_rinv b0 b3 c* b3 cnadd_rinv b0 b2 c* b1 c+ b2 b3 c= c==> c~ cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b1 cnadd_rinv f0 b2 c* b2 cnadd_rinv f0 b1 c* b0 c+ b1 b2 cT
- |- (((NUMERAL (BIT1 _0)) * n) = n)
T c= c* cNUMERAL cBIT1 c_0 f0 f0
+ |- ((\n. (((NUMERAL _0) * n) = (NUMERAL _0))) n)
T * / c= c* cNUMERAL c_0 b0 cNUMERAL c_0 f0
- |- ((\n. (((SUC m) * n) = ((m * n) + n))) n)
T * / c= c* cSUC f0 b0 c+ c* f0 b0 b0 f1
+ ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> ((dest_nadd (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (nadd_of_num (NUMERAL _0))) (mk_nadd (nadd_rinv x)))) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (\n. (NUMERAL _0))) (nadd_rinv x)))) |- ((dest_nadd (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (nadd_of_num (NUMERAL _0))) (mk_nadd (nadd_rinv x)))) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (\n. (NUMERAL _0))) (nadd_rinv x)))
T c==> c==> c~ cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c= * part cdest_nadd cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 cnadd_of_num cNUMERAL c_0 cmk_nadd * part cnadd_rinv f0 * * * part cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 / cNUMERAL c_0 * part cnadd_rinv f0 c= * part cdest_nadd cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 cnadd_of_num cNUMERAL c_0 cmk_nadd * part cnadd_rinv f0 * * * part cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 / cNUMERAL c_0 * part cnadd_rinv f0
- (!x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))), (~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) |- ((!x. ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) ==> (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))) /\ (?B. (!m. (!n. ((dist ((m * ((nadd_rinv x) n)) , (n * ((nadd_rinv x) m)))) <= (B * (m + n)))))))
T c==> ! c==> c~ cnadd_eq b0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b2 cnadd_rinv b0 b3 c* b3 cnadd_rinv b0 b2 c* b1 c+ b2 b3 c==> c~ cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c/\ ! c==> c~ cnadd_eq b0 cnadd_of_num cNUMERAL c_0 c? / ! ! c<= cdist c, c* b2 cnadd_rinv b0 b3 c* b3 cnadd_rinv b0 b2 c* b1 c+ b2 b3 c? / ! ! c<= cdist c, c* b1 cnadd_rinv f0 b2 c* b2 cnadd_rinv f0 b1 c* b0 c+ b1 b2
+ (~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) |- ((dest_nadd (mk_nadd (nadd_rinv x))) = (nadd_rinv x))
T c==> c~ cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c= * part cdest_nadd cmk_nadd * part cnadd_rinv f0 * part cnadd_rinv f0
- |- (((!n. ((m * (SUC n)) = (m + (m * n)))) ==> ((\n. ((m * (SUC n)) = (m + (m * n)))) n)) = ((\n. ((m * (SUC n)) = (m + (m * n)))) n))
T c= c==> ! c= c* f0 cSUC b0 c+ f0 c* f0 b0 * / c= c* f0 cSUC b0 c+ f0 c* f0 b0 f1 * / c= c* f0 cSUC b0 c+ f0 c* f0 b0 f1
+ ((nadd_eq x) (nadd_of_num (NUMERAL _0))) |- (((nadd_eq x) (nadd_of_num (NUMERAL _0))) = T)
T c==> cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c= cnadd_eq f0 cnadd_of_num cNUMERAL c_0 cT
+ |- ((\k. ((dest_nadd (nadd_of_num k)) = (\n. (k * n)))) k)
T * / c= * part cdest_nadd cnadd_of_num b0 / c* b0 b1 f0
+ |- ((\t. (t \/ (~ t))) ((nadd_eq x) (nadd_of_num (NUMERAL _0))))
T * / c\/ b0 c~ b0 cnadd_eq f0 cnadd_of_num cNUMERAL c_0
+ (~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) |- ((~ ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) /\ ((dest_nadd (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (nadd_of_num (NUMERAL _0))) (mk_nadd (nadd_rinv x)))) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (\n. (NUMERAL _0))) (nadd_rinv x))))
T c==> c~ cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c/\ c~ cnadd_eq f0 cnadd_of_num cNUMERAL c_0 c= * part cdest_nadd cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 cnadd_of_num cNUMERAL c_0 cmk_nadd * part cnadd_rinv f0 * * * part cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 / cNUMERAL c_0 * part cnadd_rinv f0
+ |- ((\x. ((nadd_inv x) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (nadd_of_num (NUMERAL _0))) (mk_nadd (nadd_rinv x))))) x)
T * / c= cnadd_inv b0 cCOND cnadd_eq b0 cnadd_of_num cNUMERAL c_0 cnadd_of_num cNUMERAL c_0 cmk_nadd * part cnadd_rinv b0 f0
+ |- (((dest_nadd (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (nadd_of_num (NUMERAL _0))) (mk_nadd (nadd_rinv x)))) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (\n. (NUMERAL _0))) (nadd_rinv x))) = ((dest_nadd (nadd_inv x)) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (\n. (NUMERAL _0))) (nadd_rinv x))))
T c= c= * part cdest_nadd cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 cnadd_of_num cNUMERAL c_0 cmk_nadd * part cnadd_rinv f0 * * * part cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 / cNUMERAL c_0 * part cnadd_rinv f0 c= * part cdest_nadd cnadd_inv f0 * * * part cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 / cNUMERAL c_0 * part cnadd_rinv f0
+ |- (((!x. ((is_nadd x) = (?B. (!m. (!n. ((dist ((m * (x n)) , (n * (x m)))) <= (B * (m + n)))))))) ==> ((\x. ((is_nadd x) = (?B. (!m. (!n. ((dist ((m * (x n)) , (n * (x m)))) <= (B * (m + n)))))))) x)) = ((\x. ((is_nadd x) = (?B. (!m. (!n. ((dist ((m * (x n)) , (n * (x m)))) <= (B * (m + n)))))))) x))
T c= c==> ! c= cis_nadd b0 c? / ! ! c<= cdist c, c* b2 * b0 b3 c* b3 * b0 b2 c* b1 c+ b2 b3 * / c= cis_nadd b0 c? / ! ! c<= cdist c, c* b2 * b0 b3 c* b3 * b0 b2 c* b1 c+ b2 b3 f0 * / c= cis_nadd b0 c? / ! ! c<= cdist c, c* b2 * b0 b3 c* b3 * b0 b2 c* b1 c+ b2 b3 f0
+ |- ((((COND T) t1) t2) = t1)
T c= cCOND cT f0 f1 f0
+ |- ((dest_nadd (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (nadd_of_num (NUMERAL _0))) (mk_nadd (nadd_rinv x)))) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (\n. (NUMERAL _0))) (nadd_rinv x)))
T c= * part cdest_nadd cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 cnadd_of_num cNUMERAL c_0 cmk_nadd * part cnadd_rinv f0 * * * part cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 / cNUMERAL c_0 * part cnadd_rinv f0
+ |- (((dest_nadd (nadd_inv x)) = (((COND ((nadd_eq x) (nadd_of_num (NUMERAL _0)))) (\n. (NUMERAL _0))) (nadd_rinv x))) = T)
T c= c= * part cdest_nadd cnadd_inv f0 * * * part cCOND cnadd_eq f0 cnadd_of_num cNUMERAL c_0 / cNUMERAL c_0 * part cnadd_rinv f0 cT
- |- (((!m. ((m * (NUMERAL (BIT1 _0))) = m)) ==> ((\m. ((m * (NUMERAL (BIT1 _0))) = m)) m)) = ((\m. ((m * (NUMERAL (BIT1 _0))) = m)) m))
T c= c==> ! c= c* b0 cNUMERAL cBIT1 c_0 b0 * / c= c* b0 cNUMERAL cBIT1 c_0 b0 f0 * / c= c* b0 cNUMERAL cBIT1 c_0 b0 f0
