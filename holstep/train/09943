N Hypermap.lemma_second_inverse_evaluation
C |- (!L. (!x. (!m. (((((POWER (loop_map L)) m) (((POWER (inv_loop_map L)) m) x)) = x) /\ ((((POWER (inv_loop_map L)) m) (((POWER (loop_map L)) m) x)) = x)))))
T c/\ c= cPOWER * part cloop_map f0 f1 cPOWER * part cinv_loop_map f0 f1 f2 f2 c= cPOWER * part cinv_loop_map f0 f1 cPOWER * part cloop_map f0 f1 f2 f2
D TRUTH
A |- T
T cT
D PERMUTES_INVERSES
A |- (!p. (!s. (((permutes p) s) ==> ((!x. ((p ((inverse p) x)) = x)) /\ (!x. (((inverse p) (p x)) = x))))))
T c==> cpermutes f0 f1 c/\ ! c= * f0 cinverse f0 b0 b0 ! c= cinverse f0 * f0 b0 b0
D Hypermap.power_permutation
A |- (!s. (!p. (((permutes p) s) ==> (!n. ((permutes ((POWER p) n)) s)))))
T c==> cpermutes f0 f1 ! cpermutes * * part cPOWER f0 b0 f1
D Hypermap.lemma_permute_loop
A |- (!L. (((permutes (loop_map L)) (dart_of_loop L)) /\ ((permutes (inv_loop_map L)) (dart_of_loop L))))
T c/\ cpermutes * part cloop_map f0 * part cdart_of_loop f0 cpermutes * part cinv_loop_map f0 * part cdart_of_loop f0
D Hypermap.lemma_second_inverse_on_loop
A |- (!L. (!m. ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))))))
T c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1
+ ((permutes ((POWER (loop_map L)) m)) (dart_of_loop L)) |- (((!x. (((inverse ((POWER (loop_map L)) m)) (((POWER (loop_map L)) m) x)) = x)) ==> ((\x. (((inverse ((POWER (loop_map L)) m)) (((POWER (loop_map L)) m) x)) = x)) x)) = ((\x. (((inverse ((POWER (loop_map L)) m)) (((POWER (loop_map L)) m) x)) = x)) x))
T c==> cpermutes * * part cPOWER * part cloop_map f0 f1 * part cdart_of_loop f0 c= c==> ! c= cinverse * * part cPOWER * part cloop_map f0 f1 cPOWER * part cloop_map f0 f1 b0 b0 * / c= cinverse * * part cPOWER * part cloop_map f0 f1 cPOWER * part cloop_map f0 f1 b0 b0 f2 * / c= cinverse * * part cPOWER * part cloop_map f0 f1 cPOWER * part cloop_map f0 f1 b0 b0 f2
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
