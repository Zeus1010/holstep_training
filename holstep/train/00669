N CONTENT_UNIT
C |- ((content (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) = (real_of_num (NUMERAL (BIT1 _0))))
T c= ccontent * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL creal_of_num cNUMERAL cBIT1 c_0
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D DE_MORGAN_THM
A |- (!t1. (!t2. (((~ (t1 /\ t2)) = ((~ t1) \/ (~ t2))) /\ ((~ (t1 \/ t2)) = ((~ t1) /\ (~ t2))))))
T c/\ c= c~ c/\ f0 f1 c\/ c~ f0 c~ f1 c= c~ c\/ f0 f1 c/\ c~ f0 c~ f1
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D NOT_EXISTS_THM
A |- (!P. ((~ (?x. (P x))) = (!x. (~ (P x)))))
T c= c~ c? / * f0 b0 ! c~ * f0 b0
D COND_ELIM_THM
A |- ((P (((COND c) x) y)) = ((c ==> (P x)) /\ ((~ c) ==> (P y))))
T c= * f0 cCOND f1 f2 f3 c/\ c==> f1 * f0 f2 c==> c~ f1 * f0 f3
D NUMERAL
A |- (!n. ((NUMERAL n) = n))
T c= cNUMERAL f0 f0
D Ssrnat.addSn
A |- (!m. (!n. (((SUC m) + n) = (SUC (m + n)))))
T c= c+ cSUC f0 f1 cSUC c+ f0 f1
D Ssrnat.addnS
A |- (!m. (!n. ((m + (SUC n)) = (SUC (m + n)))))
T c= c+ f0 cSUC f1 cSUC c+ f0 f1
D Ssrnat.addnC
A |- (!m. (!n. ((m + n) = (n + m))))
T c= c+ f0 f1 c+ f1 f0
D Ssrnat.addn_eq0
A |- (!m. (!n. (((m + n) = (NUMERAL _0)) = ((m = (NUMERAL _0)) /\ (n = (NUMERAL _0))))))
T c= c= c+ f0 f1 cNUMERAL c_0 c/\ c= f0 cNUMERAL c_0 c= f1 cNUMERAL c_0
D LE
A |- ((!m. ((m <= (NUMERAL _0)) = (m = (NUMERAL _0)))) /\ (!m. (!n. ((m <= (SUC n)) = ((m = (SUC n)) \/ (m <= n))))))
T c/\ ! c= c<= b0 cNUMERAL c_0 c= b0 cNUMERAL c_0 ! ! c= c<= b0 cSUC b1 c\/ c= b0 cSUC b1 c<= b0 b1
D LE_0
A |- (!n. ((NUMERAL _0) <= n))
T c<= cNUMERAL c_0 f0
D NOT_LE
A |- (!m. (!n. ((~ (m <= n)) = (n < m))))
T c= c~ c<= f0 f1 c< f1 f0
D LT_EXISTS
A |- (!m. (!n. ((m < n) = (?d. (n = (m + (SUC d)))))))
T c= c< f0 f1 c? / c= f1 c+ f0 cSUC b0
D Ssrnat.eqn_leq
A |- (!m. (!n. ((m = n) = ((m <= n) /\ (n <= m)))))
T c= c= f0 f1 c/\ c<= f0 f1 c<= f1 f0
D ARITH_SUC
A |- ((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) /\ (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))))
T c/\ ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
D ARITH_ADD
A |- ((!m. (!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n))))) /\ (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))))))))))
T c/\ ! ! c= c+ cNUMERAL b0 cNUMERAL b1 cNUMERAL c+ b0 b1 c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
D REAL_LE_ANTISYM
A |- (!x. (!y. ((((real_le x) y) /\ ((real_le y) x)) = (x = y))))
T c= c/\ creal_le f0 f1 creal_le f1 f0 c= f0 f1
D Real_ext.REAL_LE
A |- (!m. (!n. (((real_le (real_of_num m)) (real_of_num n)) = (m <= n))))
T c= creal_le creal_of_num f0 creal_of_num f1 c<= f0 f1
D Misc_defs_and_lemmas.REAL_ADD
A |- (!m. (!n. (((real_add (real_of_num m)) (real_of_num n)) = (real_of_num (m + n)))))
T c= creal_add creal_of_num f0 creal_of_num f1 creal_of_num c+ f0 f1
D REAL_LE_LNEG
A |- (!x. (!y. (((real_le (real_neg x)) y) = ((real_le (real_of_num (NUMERAL _0))) ((real_add x) y)))))
T c= creal_le creal_neg f0 f1 creal_le creal_of_num cNUMERAL c_0 creal_add f0 f1
D REAL_LE_NEG
A |- (!x. (!y. (((real_le (real_neg x)) (real_neg y)) = ((real_le y) x))))
T c= creal_le creal_neg f0 creal_neg f1 creal_le f1 f0
D REAL_LE_RNEG
A |- (!x. (!y. (((real_le x) (real_neg y)) = ((real_le ((real_add x) y)) (real_of_num (NUMERAL _0))))))
T c= creal_le f0 creal_neg f1 creal_le creal_add f0 f1 creal_of_num cNUMERAL c_0
D REAL_POS
A |- (!n. ((real_le (real_of_num (NUMERAL _0))) (real_of_num n)))
T creal_le creal_of_num cNUMERAL c_0 creal_of_num f0
D REAL_SUB_RZERO
A |- (!x. (((real_sub x) (real_of_num (NUMERAL _0))) = x))
T c= creal_sub f0 creal_of_num cNUMERAL c_0 f0
D IN_NUMSEG
A |- (!m. (!n. (!p. ((p IN (m .. n)) = ((m <= p) /\ (p <= n))))))
T c= cIN f0 * * part c.. f1 f2 c/\ c<= f1 f0 c<= f0 f2
D VEC_COMPONENT
A |- (!k. (!i. (((vec k) $ i) = (real_of_num k))))
T c= c$ cvec f0 f1 creal_of_num f0
D PRODUCT_EQ_1
A |- (!f. (!s. ((!x. ((x IN s) ==> ((f x) = (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((product s) f) = (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> ! c==> cIN b0 f0 c= * f1 b0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct f0 f1 creal_of_num cNUMERAL cBIT1 c_0
D INTERVAL_NE_EMPTY
A |- (((~ ((closed_interval ((CONS (a , b)) NIL)) = EMPTY)) = (!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_le (a $ i)) (b $ i))))) /\ ((~ ((open_interval (a , b)) = EMPTY)) = (!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_lt (a $ i)) (b $ i))))))
T c/\ c= c~ c= * part cclosed_interval cCONS c, f0 f1 cNIL part cEMPTY ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV creal_le c$ f0 b0 c$ f1 b0 c= c~ c= * part copen_interval c, f0 f1 part cEMPTY ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV creal_lt c$ f0 b0 c$ f1 b0
D INTERVAL_UPPERBOUND
A |- (!a. (!b. ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_le (a $ i)) (b $ i)))) ==> ((interval_upperbound (closed_interval ((CONS (a , b)) NIL))) = b))))
T c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV creal_le c$ f0 b0 c$ f1 b0 c= cinterval_upperbound * part cclosed_interval cCONS c, f0 f1 cNIL f1
D INTERVAL_LOWERBOUND
A |- (!a. (!b. ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_le (a $ i)) (b $ i)))) ==> ((interval_lowerbound (closed_interval ((CONS (a , b)) NIL))) = a))))
T c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV creal_le c$ f0 b0 c$ f1 b0 c= cinterval_lowerbound * part cclosed_interval cCONS c, f0 f1 cNIL f0
D content
A |- (!s. ((content s) = (((COND (s = EMPTY)) (real_of_num (NUMERAL _0))) ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound s) $ i)) ((interval_lowerbound s) $ i)))))))
T c= ccontent f0 cCOND c= f0 part cEMPTY creal_of_num cNUMERAL c_0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound f0 b0 c$ cinterval_lowerbound f0 b0
+ |- ((\a. (!b. ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_le (a $ i)) (b $ i)))) ==> ((interval_lowerbound (closed_interval ((CONS (a , b)) NIL))) = a)))) a)
T * / ! c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b2 c<= b2 cdimindex part cUNIV creal_le c$ b0 b2 c$ b1 b2 c= cinterval_lowerbound * part cclosed_interval cCONS c, b0 b1 cNIL b0 f0
- (!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_le (a $ i)) (b $ i)))) |- ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_le (a $ i)) (b $ i)))) /\ ((interval_lowerbound (closed_interval ((CONS (a , b)) NIL))) = a))
T c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV creal_le c$ f0 b0 c$ f1 b0 c/\ ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV creal_le c$ f0 b0 c$ f1 b0 c= cinterval_lowerbound * part cclosed_interval cCONS c, f0 f1 cNIL f0
+ (((NUMERAL (BIT1 _0)) <= x) /\ (x <= (dimindex UNIV))) |- ((((NUMERAL (BIT1 _0)) <= x) /\ (x <= (dimindex UNIV))) /\ ((((\i. ((real_sub ((interval_upperbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) $ i))) x) = (real_of_num (NUMERAL (BIT1 _0)))) = T))
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c/\ c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c= * / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 f0 creal_of_num cNUMERAL cBIT1 c_0 cT
+ |- (((!p. ((p IN (m .. n)) = ((m <= p) /\ (p <= n)))) ==> ((\p. ((p IN (m .. n)) = ((m <= p) /\ (p <= n)))) p)) = ((\p. ((p IN (m .. n)) = ((m <= p) /\ (p <= n)))) p))
T c= c==> ! c= cIN b0 * * part c.. f0 f1 c/\ c<= f0 b0 c<= b0 f1 * / c= cIN b0 * * part c.. f0 f1 c/\ c<= f0 b0 c<= b0 f1 f2 * / c= cIN b0 * * part c.. f0 f1 c/\ c<= f0 b0 c<= b0 f1 f2
+ |- ((interval_lowerbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) = (vec (NUMERAL _0)))
T c= cinterval_lowerbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL cvec cNUMERAL c_0
+ |- ((\p'. (!q'. (((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) = p') ==> ((p' ==> (((real_le ((vec (NUMERAL _0)) $ i)) ((vec (NUMERAL (BIT1 _0))) $ i)) = q')) ==> (((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_le ((vec (NUMERAL _0)) $ i)) ((vec (NUMERAL (BIT1 _0))) $ i))) = (p' ==> q')))))) p')
T * / ! c==> c= c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV b0 c==> c==> b0 c= creal_le c$ cvec cNUMERAL c_0 f0 c$ cvec cNUMERAL cBIT1 c_0 f0 b1 c= c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV creal_le c$ cvec cNUMERAL c_0 f0 c$ cvec cNUMERAL cBIT1 c_0 f0 c==> b0 b1 f1
- (!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_le (a $ i)) (b $ i)))) |- ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_le (a $ i)) (b $ i)))) /\ ((interval_upperbound (closed_interval ((CONS (a , b)) NIL))) = b))
T c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV creal_le c$ f0 b0 c$ f1 b0 c/\ ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV creal_le c$ f0 b0 c$ f1 b0 c= cinterval_upperbound * part cclosed_interval cCONS c, f0 f1 cNIL f1
+ (((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) |- ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) /\ (((real_le ((vec (NUMERAL _0)) $ i)) ((vec (NUMERAL (BIT1 _0))) $ i)) = T))
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c/\ c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= creal_le c$ cvec cNUMERAL c_0 f0 c$ cvec cNUMERAL cBIT1 c_0 f0 cT
+ (~ ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) = EMPTY)) |- ((~ ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) = EMPTY)) /\ (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))))
T c==> c~ c= * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL part cEMPTY c/\ c~ c= * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((t ==> T) = T)
T c= c==> f0 cT cT
+ |- (((!p'. (!q'. (((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) = p') ==> ((p' ==> (((real_le ((vec (NUMERAL _0)) $ i)) ((vec (NUMERAL (BIT1 _0))) $ i)) = q')) ==> (((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_le ((vec (NUMERAL _0)) $ i)) ((vec (NUMERAL (BIT1 _0))) $ i))) = (p' ==> q')))))) ==> ((\p'. (!q'. (((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) = p') ==> ((p' ==> (((real_le ((vec (NUMERAL _0)) $ i)) ((vec (NUMERAL (BIT1 _0))) $ i)) = q')) ==> (((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_le ((vec (NUMERAL _0)) $ i)) ((vec (NUMERAL (BIT1 _0))) $ i))) = (p' ==> q')))))) p')) = ((\p'. (!q'. (((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) = p') ==> ((p' ==> (((real_le ((vec (NUMERAL _0)) $ i)) ((vec (NUMERAL (BIT1 _0))) $ i)) = q')) ==> (((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_le ((vec (NUMERAL _0)) $ i)) ((vec (NUMERAL (BIT1 _0))) $ i))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV b0 c==> c==> b0 c= creal_le c$ cvec cNUMERAL c_0 f0 c$ cvec cNUMERAL cBIT1 c_0 f0 b1 c= c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV creal_le c$ cvec cNUMERAL c_0 f0 c$ cvec cNUMERAL cBIT1 c_0 f0 c==> b0 b1 * / ! c==> c= c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV b0 c==> c==> b0 c= creal_le c$ cvec cNUMERAL c_0 f0 c$ cvec cNUMERAL cBIT1 c_0 f0 b1 c= c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV creal_le c$ cvec cNUMERAL c_0 f0 c$ cvec cNUMERAL cBIT1 c_0 f0 c==> b0 b1 f1 * / ! c==> c= c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV b0 c==> c==> b0 c= creal_le c$ cvec cNUMERAL c_0 f0 c$ cvec cNUMERAL cBIT1 c_0 f0 b1 c= c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV creal_le c$ cvec cNUMERAL c_0 f0 c$ cvec cNUMERAL cBIT1 c_0 f0 c==> b0 b1 f1
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ |- (~ ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) = EMPTY))
T c~ c= * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL part cEMPTY
- |- (((real_mul (real_of_num m)) (real_of_num n)) = (real_of_num (m * n)))
T c= creal_mul creal_of_num f0 creal_of_num f1 creal_of_num c* f0 f1
+ |- (!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_le ((vec (NUMERAL _0)) $ i)) ((vec (NUMERAL (BIT1 _0))) $ i))))
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV creal_le c$ cvec cNUMERAL c_0 f0 c$ cvec cNUMERAL cBIT1 c_0 f0
+ |- ((((COND ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) = EMPTY)) (real_of_num (NUMERAL _0))) ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) $ i))))) = (real_of_num (NUMERAL (BIT1 _0))))
T c= cCOND c= * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL part cEMPTY creal_of_num cNUMERAL c_0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_le ((vec (NUMERAL _0)) $ i)) ((vec (NUMERAL (BIT1 _0))) $ i)))) ==> ((interval_upperbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) = (vec (NUMERAL (BIT1 _0))))) = ((interval_upperbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) = (vec (NUMERAL (BIT1 _0)))))
T c= c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV creal_le c$ cvec cNUMERAL c_0 b0 c$ cvec cNUMERAL cBIT1 c_0 b0 c= cinterval_upperbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL cvec cNUMERAL cBIT1 c_0 c= cinterval_upperbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL cvec cNUMERAL cBIT1 c_0
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
+ |- ((!x. t) = t)
T c= ! f0 f0
+ |- ((((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) = (((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV)))) ==> (((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((real_le ((vec (NUMERAL _0)) $ i)) ((vec (NUMERAL (BIT1 _0))) $ i)) = q')) ==> (((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_le ((vec (NUMERAL _0)) $ i)) ((vec (NUMERAL (BIT1 _0))) $ i))) = ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> q')))) = (((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((real_le ((vec (NUMERAL _0)) $ i)) ((vec (NUMERAL (BIT1 _0))) $ i)) = q')) ==> (((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_le ((vec (NUMERAL _0)) $ i)) ((vec (NUMERAL (BIT1 _0))) $ i))) = ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> q'))))
T c= c==> c= c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c==> c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= creal_le c$ cvec cNUMERAL c_0 f0 c$ cvec cNUMERAL cBIT1 c_0 f0 f1 c= c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV creal_le c$ cvec cNUMERAL c_0 f0 c$ cvec cNUMERAL cBIT1 c_0 f0 c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV f1 c==> c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= creal_le c$ cvec cNUMERAL c_0 f0 c$ cvec cNUMERAL cBIT1 c_0 f0 f1 c= c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV creal_le c$ cvec cNUMERAL c_0 f0 c$ cvec cNUMERAL cBIT1 c_0 f0 c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV f1
+ |- (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))
T c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((\x. (((real_sub x) (real_of_num (NUMERAL _0))) = x)) x)
T * / c= creal_sub b0 creal_of_num cNUMERAL c_0 b0 f0
+ |- (((((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) = EMPTY) ==> ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) /\ ((~ ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) = EMPTY)) ==> (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))))) = ((((COND ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) = EMPTY)) (real_of_num (NUMERAL _0))) ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) $ i))))) = (real_of_num (NUMERAL (BIT1 _0)))))
T c= c/\ c==> c= * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c~ c= * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 c= cCOND c= * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL part cEMPTY creal_of_num cNUMERAL c_0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((~ ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) = EMPTY)) = (((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) = EMPTY) ==> ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))))
T c= c~ c= * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL part cEMPTY c==> c= * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((\i. (((vec k) $ i) = (real_of_num k))) i)
T * / c= c$ cvec f0 b0 creal_of_num f0 f1
- (((NUMERAL (BIT1 _0)) <= x) /\ (x <= (dimindex UNIV))) |- (((NUMERAL (BIT1 _0)) <= x) = T)
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c<= cNUMERAL cBIT1 c_0 f0 cT
+ (!f. (!s. ((!x. ((x IN s) ==> ((f x) = (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((product s) f) = (real_of_num (NUMERAL (BIT1 _0))))))) |- (!f. ((!x. ((x IN s) ==> ((f x) = (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((product s) f) = (real_of_num (NUMERAL (BIT1 _0))))))
T c==> ! ! c==> ! c==> cIN b2 b1 c= * b0 b2 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct b1 b0 creal_of_num cNUMERAL cBIT1 c_0 ! c==> ! c==> cIN b1 f0 c= * b0 b1 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct f0 b0 creal_of_num cNUMERAL cBIT1 c_0
+ (!f. (!s. ((!x. ((x IN s) ==> ((f x) = (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((product s) f) = (real_of_num (NUMERAL (BIT1 _0))))))) |- (((!x. ((x IN s) ==> ((f x) = (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((product s) f) = (real_of_num (NUMERAL (BIT1 _0))))) = T)
T c==> ! ! c==> ! c==> cIN b2 b1 c= * b0 b2 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct b1 b0 creal_of_num cNUMERAL cBIT1 c_0 c= c==> ! c==> cIN b0 f0 c= * f1 b0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct f0 f1 creal_of_num cNUMERAL cBIT1 c_0 cT
+ |- (((!b. ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_le (a $ i)) (b $ i)))) ==> ((interval_upperbound (closed_interval ((CONS (a , b)) NIL))) = b))) ==> ((\b. ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_le (a $ i)) (b $ i)))) ==> ((interval_upperbound (closed_interval ((CONS (a , b)) NIL))) = b))) b)) = ((\b. ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_le (a $ i)) (b $ i)))) ==> ((interval_upperbound (closed_interval ((CONS (a , b)) NIL))) = b))) b))
T c= c==> ! c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c<= b1 cdimindex part cUNIV creal_le c$ f0 b1 c$ b0 b1 c= cinterval_upperbound * part cclosed_interval cCONS c, f0 b0 cNIL b0 * / c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c<= b1 cdimindex part cUNIV creal_le c$ f0 b1 c$ b0 b1 c= cinterval_upperbound * part cclosed_interval cCONS c, f0 b0 cNIL b0 f1 * / c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c<= b1 cdimindex part cUNIV creal_le c$ f0 b1 c$ b0 b1 c= cinterval_upperbound * part cclosed_interval cCONS c, f0 b0 cNIL b0 f1
+ |- ((t ==> F) = (~ t))
T c= c==> f0 cF c~ f0
+ |- ((\n. (!p. ((p IN (m .. n)) = ((m <= p) /\ (p <= n))))) n)
T * / ! c= cIN b1 * * part c.. f0 b0 c/\ c<= f0 b1 c<= b1 b0 f1
+ |- ((\s. (!f. ((!x. ((x IN s) ==> ((f x) = (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((product s) f) = (real_of_num (NUMERAL (BIT1 _0))))))) s)
T * / ! c==> ! c==> cIN b2 b0 c= * b1 b2 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct b0 b1 creal_of_num cNUMERAL cBIT1 c_0 f0
+ |- ((\p. ((p IN (m .. n)) = ((m <= p) /\ (p <= n)))) p)
T * / c= cIN b0 * * part c.. f0 f1 c/\ c<= f0 b0 c<= b0 f1 f2
+ |- (((((COND ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) = EMPTY)) (real_of_num (NUMERAL _0))) ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) $ i))))) = (real_of_num (NUMERAL (BIT1 _0)))) = ((content (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) = (real_of_num (NUMERAL (BIT1 _0)))))
T c= c= cCOND c= * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL part cEMPTY creal_of_num cNUMERAL c_0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 c= ccontent * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL creal_of_num cNUMERAL cBIT1 c_0
+ |- (((!f. ((!x. ((x IN s) ==> ((f x) = (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((product s) f) = (real_of_num (NUMERAL (BIT1 _0)))))) ==> ((\f. ((!x. ((x IN s) ==> ((f x) = (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((product s) f) = (real_of_num (NUMERAL (BIT1 _0)))))) f)) = ((\f. ((!x. ((x IN s) ==> ((f x) = (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((product s) f) = (real_of_num (NUMERAL (BIT1 _0)))))) f))
T c= c==> ! c==> ! c==> cIN b1 f0 c= * b0 b1 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct f0 b0 creal_of_num cNUMERAL cBIT1 c_0 * / c==> ! c==> cIN b1 f0 c= * b0 b1 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct f0 b0 creal_of_num cNUMERAL cBIT1 c_0 f1 * / c==> ! c==> cIN b1 f0 c= * b0 b1 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct f0 b0 creal_of_num cNUMERAL cBIT1 c_0 f1
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = (((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= c= creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (~ ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) = EMPTY)) |- ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))))
T c==> c~ c= * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0
- (~ ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) = EMPTY)) |- (((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) = EMPTY) = F)
T c==> c~ c= * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL part cEMPTY cF
- |- ((((COND (x = x)) y) z) = y)
T c= cCOND c= f0 f0 f1 f2 f1
- ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) = EMPTY) |- (((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))) = ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))))
T c==> c= * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = (((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c= creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((NUMERAL (BIT1 _0)) * (NUMERAL (BIT1 _0))) = (NUMERAL (BIT1 _0)))
T c= c* cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0
- (((NUMERAL (BIT1 _0)) <= x) /\ (x <= (dimindex UNIV))) |- ((x <= (dimindex UNIV)) = T)
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c<= f0 cdimindex part cUNIV cT
- |- ((~ ((open_interval (a , b)) = EMPTY)) = (!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((real_lt (a $ i)) (b $ i)))))
T c= c~ c= * part copen_interval c, f0 f1 part cEMPTY ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV creal_lt c$ f0 b0 c$ f1 b0
- (!x. ((x IN s) ==> ((f x) = (real_of_num (NUMERAL (BIT1 _0)))))) |- ((!f. (!s. ((!x. ((x IN s) ==> ((f x) = (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((product s) f) = (real_of_num (NUMERAL (BIT1 _0))))))) ==> (((product s) f) = (real_of_num (NUMERAL (BIT1 _0)))))
T c==> ! c==> cIN b0 f0 c= * f1 b0 creal_of_num cNUMERAL cBIT1 c_0 c==> ! ! c==> ! c==> cIN b2 b1 c= * b0 b2 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct b1 b0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct f0 f1 creal_of_num cNUMERAL cBIT1 c_0
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- (!x. ((x IN s) ==> ((f x) = (real_of_num (NUMERAL (BIT1 _0)))))), (!f. (!s. ((!x. ((x IN s) ==> ((f x) = (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((product s) f) = (real_of_num (NUMERAL (BIT1 _0))))))) |- ((!f. (!s. ((!x. ((x IN s) ==> ((f x) = (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((product s) f) = (real_of_num (NUMERAL (BIT1 _0))))))) /\ (((product s) f) = (real_of_num (NUMERAL (BIT1 _0)))))
T c==> ! c==> cIN b0 f0 c= * f1 b0 creal_of_num cNUMERAL cBIT1 c_0 c==> ! ! c==> ! c==> cIN b2 b1 c= * b0 b2 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct b1 b0 creal_of_num cNUMERAL cBIT1 c_0 c/\ ! ! c==> ! c==> cIN b2 b1 c= * b0 b2 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct b1 b0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct f0 f1 creal_of_num cNUMERAL cBIT1 c_0
- (!x. ((x IN s) ==> ((f x) = (real_of_num (NUMERAL (BIT1 _0)))))), (!f. (!s. ((!x. ((x IN s) ==> ((f x) = (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((product s) f) = (real_of_num (NUMERAL (BIT1 _0))))))) |- ((!x. ((x IN s) ==> ((f x) = (real_of_num (NUMERAL (BIT1 _0)))))) /\ (((product s) f) = (real_of_num (NUMERAL (BIT1 _0)))))
T c==> ! c==> cIN b0 f0 c= * f1 b0 creal_of_num cNUMERAL cBIT1 c_0 c==> ! ! c==> ! c==> cIN b2 b1 c= * b0 b2 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct b1 b0 creal_of_num cNUMERAL cBIT1 c_0 c/\ ! c==> cIN b0 f0 c= * f1 b0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct f0 f1 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = (((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = (((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= c= creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= c= creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) = EMPTY) |- (((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) = EMPTY) /\ ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))))
T c==> c= * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL part cEMPTY c/\ c= * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) = EMPTY) |- (((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) = EMPTY) = T)
T c==> c= * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL part cEMPTY cT
- |- (T = ((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= cT creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((NUMERAL _0) < (NUMERAL (BIT1 _0))) = T)
T c= c< cNUMERAL c_0 cNUMERAL cBIT1 c_0 cT
- |- (((\i. (f i)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- |- (((real_mul (real_of_num (NUMERAL _0))) (real_of_num x)) = (real_of_num (NUMERAL _0)))
T c= creal_mul creal_of_num cNUMERAL c_0 creal_of_num f0 creal_of_num cNUMERAL c_0
- |- ((real_of_num x) = ((real_div (real_of_num x)) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_of_num f0 creal_div creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_lt (real_of_num m)) (real_of_num n)) = (m < n))
T c= creal_lt creal_of_num f0 creal_of_num f1 c< f0 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = (((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = (((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= c= creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= c= creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
