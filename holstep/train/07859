N Pplhulj.mem_next_mark_inface
C |- (!L. (!N. (!r. (!x. (((good_list L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))) ==> ((MEM w) ((find_face L) x)))))))
T c==> c/\ cgood_list f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= f4 cfind_face f0 f3 c= f5 cnext_el f4 f3 cMEM f5 cfind_face f0 f3
D o_DEF
A |- (!f. (!g. ((f o g) = (\x. (f (g x))))))
T c= * * part co f0 f1 / * f0 * f1 b0
D I_DEF
A |- (I = (\x. x))
T c= part cI / b0
D Fan.POWER
A |- ((!f. (((POWER f) (NUMERAL _0)) = I)) /\ (!f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))))
T c/\ ! c= * * part cPOWER b0 cNUMERAL c_0 part cI ! ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0
D Fan.POWER_0
A |- (!f. (((POWER f) (NUMERAL _0)) = I))
T c= * * part cPOWER f0 cNUMERAL c_0 part cI
D List_hypermap.mem_f_list
A |- (!d. (!L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d)))))
T c==> cMEM f0 clist_of_darts f1 cMEM cf_list f1 f0 cfind_face f1 f0
D Tame_defs2.good_list
A |- (!L. ((good_list L) = ((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L))))))))
T c= cgood_list f0 c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0
D Pwssrat.f_list_power_next_el
A |- (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y))))
T c==> c/\ cuniq clist_of_darts f0 cMEM f1 clist_of_darts f0 c= cPOWER * part cf_list f0 f2 f1 cPOWER * part cnext_el cfind_face f0 f1 f2 f1
D Pplhulj.marked_list_of_dart
A |- (!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))))
T c==> cmarked_list f0 f1 f2 f3 cMEM f3 clist_of_darts f0
+ |- ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f)
T * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0
+ (!d. (!L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))) |- ((((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))) = T)
T c==> ! ! c==> cMEM b0 clist_of_darts b1 cMEM cf_list b1 b0 cfind_face b1 b0 c= c==> cMEM f0 clist_of_darts f1 cMEM cf_list f1 f0 cfind_face f1 f0 cT
+ |- (((((uniq (list_of_darts L)) /\ ((MEM x) (list_of_darts L))) ==> ((((POWER (f_list L)) (SUC (NUMERAL _0))) x) = (((POWER (next_el ((find_face L) x))) (SUC (NUMERAL _0))) x))) ==> ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x))) = ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x)))
T c= c==> c==> c/\ cuniq clist_of_darts f0 cMEM f1 clist_of_darts f0 c= cPOWER * part cf_list f0 cSUC cNUMERAL c_0 f1 cPOWER * part cnext_el cfind_face f0 f1 cSUC cNUMERAL c_0 f1 cMEM cnext_el cfind_face f0 f1 f1 cfind_face f0 f1 cMEM cnext_el cfind_face f0 f1 f1 cfind_face f0 f1
- (!d. (!L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))), ((MEM d) (list_of_darts L)) |- ((!d. (!L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))) /\ ((MEM ((f_list L) d)) ((find_face L) d)))
T c==> ! ! c==> cMEM b0 clist_of_darts b1 cMEM cf_list b1 b0 cfind_face b1 b0 c==> cMEM f0 clist_of_darts f1 c/\ ! ! c==> cMEM b0 clist_of_darts b1 cMEM cf_list b1 b0 cfind_face b1 b0 cMEM cf_list f1 f0 cfind_face f1 f0
- |- (((!L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) ==> ((\L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) L)) = ((\L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) L))
T c= c==> ! ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 * / ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 f0 * / ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 f0
- |- ((\x. (((LET f) x) = (f x))) x)
T * / c= cLET f0 b0 * f0 b0 f1
+ (good_list L), (f = ((find_face L) x)), ((f = ((find_face L) x)) /\ (w = ((next_el f) x))), ((((marked_list L) N) r) x) |- ((MEM w) ((find_face L) x))
T c==> cgood_list f0 c==> c= f1 cfind_face f0 f2 c==> c/\ c= f1 cfind_face f0 f2 c= f3 cnext_el f1 f2 c==> cmarked_list f0 f4 f5 f2 cMEM f3 cfind_face f0 f2
+ |- ((\r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) r)
T * / ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 f2
+ (good_list L), (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x)))), ((((marked_list L) N) r) x) |- ((MEM w) ((find_face L) x))
T c==> cgood_list f0 c==> c/\ cmarked_list f0 f1 f2 f3 c/\ c= f4 cfind_face f0 f3 c= f5 cnext_el f4 f3 c==> cmarked_list f0 f1 f2 f3 cMEM f5 cfind_face f0 f3
+ ((((marked_list L) N) r) x) |- (((((marked_list L) N) r) x) = T)
T c==> cmarked_list f0 f1 f2 f3 c= cmarked_list f0 f1 f2 f3 cT
- |- ((\f. (((POWER f) (SUC n)) = (f o ((POWER f) n)))) f)
T * / c= * * part cPOWER b0 cSUC f0 * * part co b0 * * part cPOWER b0 f0 f1
- |- (((!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) ==> ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x)) = ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x))
T c= c==> ! c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3 * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3
- |- (((!x. (((LET f) x) = (f x))) ==> ((\x. (((LET f) x) = (f x))) x)) = ((\x. (((LET f) x) = (f x))) x))
T c= c==> ! c= cLET f0 b0 * f0 b0 * / c= cLET f0 b0 * f0 b0 f1 * / c= cLET f0 b0 * f0 b0 f1
- ((MEM d) (list_of_darts L)) |- ((!d. (!L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))) ==> ((MEM ((f_list L) d)) ((find_face L) d)))
T c==> cMEM f0 clist_of_darts f1 c==> ! ! c==> cMEM b0 clist_of_darts b1 cMEM cf_list b1 b0 cfind_face b1 b0 cMEM cf_list f1 f0 cfind_face f1 f0
+ |- (((!y. (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y))))) ==> ((\y. (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y))))) x)) = ((\y. (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y))))) x))
T c= c==> ! ! c==> c/\ cuniq clist_of_darts f0 cMEM b0 clist_of_darts f0 c= cPOWER * part cf_list f0 b1 b0 cPOWER * part cnext_el cfind_face f0 b0 b1 b0 * / ! c==> c/\ cuniq clist_of_darts f0 cMEM b0 clist_of_darts f0 c= cPOWER * part cf_list f0 b1 b0 cPOWER * part cnext_el cfind_face f0 b0 b1 b0 f1 * / ! c==> c/\ cuniq clist_of_darts f0 cMEM b0 clist_of_darts f0 c= cPOWER * part cf_list f0 b1 b0 cPOWER * part cnext_el cfind_face f0 b0 b1 b0 f1
+ ((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))))), ((((marked_list L) N) r) x) |- ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x))
T c==> c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cmarked_list f0 f1 f2 f3 cMEM cnext_el cfind_face f0 f3 f3 cfind_face f0 f3
- |- (((!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) ==> ((\r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) r)) = ((\r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) r))
T c= c==> ! ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 * / ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2 * / ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2
+ |- ((((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))))) ==> ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x))) = ((good_list L) ==> ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x))))
T c= c==> c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 cMEM cnext_el cfind_face f0 f1 f1 cfind_face f0 f1 c==> cgood_list f0 cMEM cnext_el cfind_face f0 f1 f1 cfind_face f0 f1
- |- ((\x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) x)
T * / ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 f3
+ |- (((!L. (!y. (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y)))))) ==> ((\L. (!y. (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y)))))) L)) = ((\L. (!y. (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y)))))) L))
T c= c==> ! ! ! c==> c/\ cuniq clist_of_darts b0 cMEM b1 clist_of_darts b0 c= cPOWER * part cf_list b0 b2 b1 cPOWER * part cnext_el cfind_face b0 b1 b2 b1 * / ! ! c==> c/\ cuniq clist_of_darts b0 cMEM b1 clist_of_darts b0 c= cPOWER * part cf_list b0 b2 b1 cPOWER * part cnext_el cfind_face b0 b1 b2 b1 f0 * / ! ! c==> c/\ cuniq clist_of_darts b0 cMEM b1 clist_of_darts b0 c= cPOWER * part cf_list b0 b2 b1 cPOWER * part cnext_el cfind_face b0 b1 b2 b1 f0
+ |- (((!d. (!L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))) ==> (!L. (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d)))))) = (!L. (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))))
T c= c==> ! ! c==> cMEM b0 clist_of_darts b1 cMEM cf_list b1 b0 cfind_face b1 b0 ! ! c==> cMEM b1 clist_of_darts b0 cMEM cf_list b0 b1 cfind_face b0 b1 ! ! c==> cMEM b1 clist_of_darts b0 cMEM cf_list b0 b1 cfind_face b0 b1
+ |- ((!x. (((good_list L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))) ==> ((MEM w) ((find_face L) x)))) = T)
T c= ! c==> c/\ cgood_list f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c= f3 cfind_face f0 b0 c= f4 cnext_el f3 b0 cMEM f4 cfind_face f0 b0 cT
+ (uniq (list_of_darts L)), ((MEM x) (list_of_darts L)) |- ((((uniq (list_of_darts L)) /\ ((MEM x) (list_of_darts L))) ==> ((((POWER (f_list L)) (SUC (NUMERAL _0))) x) = (((POWER (next_el ((find_face L) x))) (SUC (NUMERAL _0))) x))) ==> ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x)))
T c==> cuniq clist_of_darts f0 c==> cMEM f1 clist_of_darts f0 c==> c==> c/\ cuniq clist_of_darts f0 cMEM f1 clist_of_darts f0 c= cPOWER * part cf_list f0 cSUC cNUMERAL c_0 f1 cPOWER * part cnext_el cfind_face f0 f1 cSUC cNUMERAL c_0 f1 cMEM cnext_el cfind_face f0 f1 f1 cfind_face f0 f1
- |- ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))
T c= crtrans f0 f1 f2 f3 f4 cSND cPOWER * * part ctransform_list f0 f3 f4 c, f1 f2
- |- (((!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) ==> ((\i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) i)) = ((\i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) i))
T c= c==> ! c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 * / c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 f4 * / c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 f4
+ (!d. (!L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))) |- ((\d. (!L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))) d)
T c==> ! ! c==> cMEM b0 clist_of_darts b1 cMEM cf_list b1 b0 cfind_face b1 b0 * / ! c==> cMEM b0 clist_of_darts b1 cMEM cf_list b1 b0 cfind_face b1 b0 f0
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ |- (((!f. (!g. ((f o g) = (\x. (f (g x)))))) ==> ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f)) = ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f))
T c= c==> ! ! c= * * part co b0 b1 / * b0 * b1 b2 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0
+ |- (((!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))) ==> ((\N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))) N)) = ((\N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))) N))
T c= c==> ! ! ! c==> cmarked_list f0 b0 b1 b2 cMEM b2 clist_of_darts f0 * / ! ! c==> cmarked_list f0 b0 b1 b2 cMEM b2 clist_of_darts f0 f1 * / ! ! c==> cmarked_list f0 b0 b1 b2 cMEM b2 clist_of_darts f0 f1
+ ((((marked_list L) N) r) x) |- (((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))))) ==> ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x)))
T c==> cmarked_list f0 f1 f2 f3 c==> c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 cMEM cnext_el cfind_face f0 f3 f3 cfind_face f0 f3
- (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)) |- ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x))
T c==> c= cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cztrans f0 f1 f2 f3 f4 c= cztrans f0 f1 f2 f3 f4 cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3
+ |- (((!f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) ==> ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f)) = ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f))
T c= c==> ! ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0 * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0
- |- (((!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ==> ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1)) = ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1))
T c= c==> ! ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3 * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3
+ |- (((!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) ==> ((\r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) r)) = ((\r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) r))
T c= c==> ! ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 * / ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 f2 * / ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 f2
- |- (((LET f) x) = (f x))
T c= cLET f0 f1 * f0 f1
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
- |- ((!d. t) = t)
T c= ! f0 f0
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) |- ((((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L))) = T)
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c= c==> cMEM f1 clist_of_darts f0 cMEM c, cSND f1 cFST f1 clist_of_darts f0 cT
- |- ((\x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))) x)
T * / ! c= crtrans f0 f1 f2 b0 b1 cSND cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3
- |- ((\f. (!x. (((LET f) x) = (f x)))) f)
T * / ! c= cLET b0 b1 * b0 b1 f0
+ ((((marked_list L) N) r) x) |- ((((MEM x) (list_of_darts L)) ==> ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x))) = ((((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))) ==> ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x))))
T c==> cmarked_list f0 f1 f2 f3 c= c==> cMEM f3 clist_of_darts f0 cMEM cnext_el cfind_face f0 f3 f3 cfind_face f0 f3 c==> c==> cmarked_list f0 f1 f2 f3 cMEM f3 clist_of_darts f0 cMEM cnext_el cfind_face f0 f3 f3 cfind_face f0 f3
- |- (((!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) ==> ((\N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) N)) = ((\N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) N))
T c= c==> ! ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 * / ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 f1 * / ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 f1
- |- (((!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) ==> ((\N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) N)) = ((\N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) N))
T c= c==> ! ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 * / ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1 * / ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1
- |- ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x)
T * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3
+ |- ((\m. (((uniq (list_of_darts L)) /\ ((MEM x) (list_of_darts L))) ==> ((((POWER (f_list L)) m) x) = (((POWER (next_el ((find_face L) x))) m) x)))) (SUC (NUMERAL _0)))
T * / c==> c/\ cuniq clist_of_darts f0 cMEM f1 clist_of_darts f0 c= cPOWER * part cf_list f0 b0 f1 cPOWER * part cnext_el cfind_face f0 f1 b0 f1 cSUC cNUMERAL c_0
+ (!d. (!L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))) |- ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d)))) = T)
T c==> ! ! c==> cMEM b0 clist_of_darts b1 cMEM cf_list b1 b0 cfind_face b1 b0 c= ! c==> cMEM b0 clist_of_darts f0 cMEM cf_list f0 b0 cfind_face f0 b0 cT
- |- (((!t. ((LET_END t) = t)) ==> ((\t. ((LET_END t) = t)) t)) = ((\t. ((LET_END t) = t)) t))
T c= c==> ! c= cLET_END b0 b0 * / c= cLET_END b0 b0 f0 * / c= cLET_END b0 b0 f0
+ |- ((\y. (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y))))) x)
T * / ! c==> c/\ cuniq clist_of_darts f0 cMEM b0 clist_of_darts f0 c= cPOWER * part cf_list f0 b1 b0 cPOWER * part cnext_el cfind_face f0 b0 b1 b0 f1
+ (uniq (list_of_darts L)), ((((marked_list L) N) r) x) |- ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x))
T c==> cuniq clist_of_darts f0 c==> cmarked_list f0 f1 f2 f3 cMEM cnext_el cfind_face f0 f3 f3 cfind_face f0 f3
- |- ((\i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) i)
T * / c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 f4
- |- ((\r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))) r)
T * / ! c= ctransform_list f0 b1 c, f1 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b0 c, f1 b0 c, b7 cSND b6 cAPPEND creplace b0 cCONS cSND b6 cNIL f1 cCONS cFST b6 cNIL csplit_normal_list f0 b0 b5 b2 b4 cfind_face f0 b2 cprev_el b0 b3 cl'z f0 f1 b0 b1 cl'y f0 b0 b1 f2
- ((all (\l. (~ (l = NIL)))) L) |- (((all (\l. (~ (l = NIL)))) L) = T)
T c==> call / c~ c= b0 cNIL f0 c= call / c~ c= b0 cNIL f0 cT
+ |- (((!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))))) ==> ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))))) L)) = ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))))) L))
T c= c==> ! ! ! ! c==> cmarked_list b0 b1 b2 b3 cMEM b3 clist_of_darts b0 * / ! ! ! c==> cmarked_list b0 b1 b2 b3 cMEM b3 clist_of_darts b0 f0 * / ! ! ! c==> cmarked_list b0 b1 b2 b3 cMEM b3 clist_of_darts b0 f0
+ (good_list L), (f = ((find_face L) x)), ((((marked_list L) N) r) x) |- ((f = ((find_face L) x)) /\ ((w = ((next_el f) x)) ==> ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x))))
T c==> cgood_list f0 c==> c= f1 cfind_face f0 f2 c==> cmarked_list f0 f3 f4 f2 c/\ c= f1 cfind_face f0 f2 c==> c= f5 cnext_el f1 f2 cMEM cnext_el cfind_face f0 f2 f2 cfind_face f0 f2
- |- ((\r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) r)
T * / ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 f1
+ ((MEM x) (list_of_darts L)) |- (((MEM x) (list_of_darts L)) = T)
T c==> cMEM f0 clist_of_darts f1 c= cMEM f0 clist_of_darts f1 cT
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
+ (good_list L), ((((marked_list L) N) r) x) |- ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x))
T c==> cgood_list f0 c==> cmarked_list f0 f1 f2 f3 cMEM cnext_el cfind_face f0 f3 f3 cfind_face f0 f3
+ (uniq (list_of_darts L)), ((MEM x) (list_of_darts L)) |- (((((f_list L) x) = ((next_el ((find_face L) x)) x)) ==> ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x))) = ((((uniq (list_of_darts L)) /\ ((MEM x) (list_of_darts L))) ==> ((((POWER (f_list L)) (SUC (NUMERAL _0))) x) = (((POWER (next_el ((find_face L) x))) (SUC (NUMERAL _0))) x))) ==> ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x))))
T c==> cuniq clist_of_darts f0 c==> cMEM f1 clist_of_darts f0 c= c==> c= cf_list f0 f1 cnext_el cfind_face f0 f1 f1 cMEM cnext_el cfind_face f0 f1 f1 cfind_face f0 f1 c==> c==> c/\ cuniq clist_of_darts f0 cMEM f1 clist_of_darts f0 c= cPOWER * part cf_list f0 cSUC cNUMERAL c_0 f1 cPOWER * part cnext_el cfind_face f0 f1 cSUC cNUMERAL c_0 f1 cMEM cnext_el cfind_face f0 f1 f1 cfind_face f0 f1
+ (!d. (!L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))) |- (!L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))
T c==> ! ! c==> cMEM b0 clist_of_darts b1 cMEM cf_list b1 b0 cfind_face b1 b0 ! c==> cMEM f0 clist_of_darts b0 cMEM cf_list b0 f0 cfind_face b0 f0
+ |- ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f)
T * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0
- |- ((\r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) r)
T * / ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 f2
- |- ((\L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) L)
T * / ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 f0
- |- ((LET_END t) = t)
T c= cLET_END f0 f0
- |- (((!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) ==> ((\x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) x)) = ((\x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) x))
T c= c==> ! ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 * / ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 f3 * / ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 f3
- |- ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1)
T * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3
+ |- (((!f. (((POWER f) (NUMERAL _0)) = I)) ==> ((\f. (((POWER f) (NUMERAL _0)) = I)) f)) = ((\f. (((POWER f) (NUMERAL _0)) = I)) f))
T c= c==> ! c= * * part cPOWER b0 cNUMERAL c_0 part cI * / c= * * part cPOWER b0 cNUMERAL c_0 part cI f0 * / c= * * part cPOWER b0 cNUMERAL c_0 part cI f0
- |- ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))
T c= csplit_normal_list f0 f1 f2 f3 f4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b5 b6 cAPPEND b7 b4 cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 f3 cCONS f3 cNIL cAPPEND cCONS b0 cNIL cAPPEND cbetwn f1 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f2 f3 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f4 cnext_el f1 f3
- |- ((\i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))) i)
T * / c= crtrans f0 f1 f2 f3 b0 cSND cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4
+ (good_list L), (f = ((find_face L) x)), ((((marked_list L) N) r) x) |- ((w = ((next_el f) x)) ==> ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x)))
T c==> cgood_list f0 c==> c= f1 cfind_face f0 f2 c==> cmarked_list f0 f3 f4 f2 c==> c= f5 cnext_el f1 f2 cMEM cnext_el cfind_face f0 f2 f2 cfind_face f0 f2
+ (!d. (!L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))) |- ((\L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d)))) L)
T c==> ! ! c==> cMEM b0 clist_of_darts b1 cMEM cf_list b1 b0 cfind_face b1 b0 * / c==> cMEM f0 clist_of_darts b0 cMEM cf_list b0 f0 cfind_face b0 f0 f1
+ ((good_list L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))) |- (((good_list L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))) /\ ((MEM w) ((find_face L) x)))
T c==> c/\ cgood_list f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= f4 cfind_face f0 f3 c= f5 cnext_el f4 f3 c/\ c/\ cgood_list f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= f4 cfind_face f0 f3 c= f5 cnext_el f4 f3 cMEM f5 cfind_face f0 f3
+ (!d. (!L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))) |- (((!L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d)))) ==> ((\L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d)))) L)) = ((\L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d)))) L))
T c==> ! ! c==> cMEM b0 clist_of_darts b1 cMEM cf_list b1 b0 cfind_face b1 b0 c= c==> ! c==> cMEM f0 clist_of_darts b0 cMEM cf_list b0 f0 cfind_face b0 f0 * / c==> cMEM f0 clist_of_darts b0 cMEM cf_list b0 f0 cfind_face b0 f0 f1 * / c==> cMEM f0 clist_of_darts b0 cMEM cf_list b0 f0 cfind_face b0 f0 f1
+ |- (((uniq (list_of_darts L)) /\ ((MEM x) (list_of_darts L))) ==> ((((POWER (f_list L)) (SUC (NUMERAL _0))) x) = (((POWER (next_el ((find_face L) x))) (SUC (NUMERAL _0))) x)))
T c==> c/\ cuniq clist_of_darts f0 cMEM f1 clist_of_darts f0 c= cPOWER * part cf_list f0 cSUC cNUMERAL c_0 f1 cPOWER * part cnext_el cfind_face f0 f1 cSUC cNUMERAL c_0 f1
+ ((((marked_list L) N) r) x) |- ((good_list L) ==> ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x)))
T c==> cmarked_list f0 f1 f2 f3 c==> cgood_list f0 cMEM cnext_el cfind_face f0 f3 f3 cfind_face f0 f3
- |- (((!L. (!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))))) ==> ((\L. (!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))))) L)) = ((\L. (!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))))) L))
T c= c==> ! ! ! ! ! c= crtrans b0 b1 b2 b3 b4 cSND cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 * / ! ! ! ! c= crtrans b0 b1 b2 b3 b4 cSND cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0 * / ! ! ! ! c= crtrans b0 b1 b2 b3 b4 cSND cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0
- |- (((!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) ==> ((\r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) r)) = ((\r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) r))
T c= c==> ! ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 * / ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 f1 * / ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 f1
- |- ((\n. (!f. (((POWER f) (SUC n)) = (f o ((POWER f) n))))) n)
T * / ! c= * * part cPOWER b1 cSUC b0 * * part co b1 * * part cPOWER b1 b0 f0
- |- (((!f. (!x. (((LET f) x) = (f x)))) ==> ((\f. (!x. (((LET f) x) = (f x)))) f)) = ((\f. (!x. (((LET f) x) = (f x)))) f))
T c= c==> ! ! c= cLET b0 b1 * b0 b1 * / ! c= cLET b0 b1 * b0 b1 f0 * / ! c= cLET b0 b1 * b0 b1 f0
+ |- ((\d. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d)))) d)
T * / c==> cMEM b0 clist_of_darts f0 cMEM cf_list f0 b0 cfind_face f0 b0 f1
- |- ((\L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) L)
T * / ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 f0
- |- (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))
T c= cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cztrans f0 f1 f2 f3 f4
- |- ((x = x) = T)
T c= c= f0 f0 cT
- (!d. (!L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))), ((MEM d) (list_of_darts L)) |- (((MEM d) (list_of_darts L)) /\ ((MEM ((f_list L) d)) ((find_face L) d)))
T c==> ! ! c==> cMEM b0 clist_of_darts b1 cMEM cf_list b1 b0 cfind_face b1 b0 c==> cMEM f0 clist_of_darts f1 c/\ cMEM f0 clist_of_darts f1 cMEM cf_list f1 f0 cfind_face f1 f0
+ (good_list L), (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x)))) |- ((MEM w) ((find_face L) x))
T c==> cgood_list f0 c==> c/\ cmarked_list f0 f1 f2 f3 c/\ c= f4 cfind_face f0 f3 c= f5 cnext_el f4 f3 cMEM f5 cfind_face f0 f3
- |- (((!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))) ==> ((\ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))) ram2)) = ((\ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))) ram2))
T c= c==> ! c= csplit_normal_list f0 f1 f2 f3 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b6 b7 cAPPEND b8 b5 cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 f3 cCONS f3 cNIL cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 b0 cCONS b0 cNIL cflatten cmap b4 b5 cbetwn f2 f3 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 b0 cnext_el f1 f3 * / c= csplit_normal_list f0 f1 f2 f3 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b6 b7 cAPPEND b8 b5 cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 f3 cCONS f3 cNIL cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 b0 cCONS b0 cNIL cflatten cmap b4 b5 cbetwn f2 f3 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 b0 cnext_el f1 f3 f4 * / c= csplit_normal_list f0 f1 f2 f3 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b6 b7 cAPPEND b8 b5 cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 f3 cCONS f3 cNIL cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 b0 cCONS b0 cNIL cflatten cmap b4 b5 cbetwn f2 f3 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 b0 cnext_el f1 f3 f4
- (good_list L), ((((marked_list L) N) r) x) |- (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) ==> ((w = ((next_el f) x)) ==> ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x)))))
T c==> cgood_list f0 c==> cmarked_list f0 f1 f2 f3 c/\ cmarked_list f0 f1 f2 f3 c==> c= f4 cfind_face f0 f3 c==> c= f5 cnext_el f4 f3 cMEM cnext_el cfind_face f0 f3 f3 cfind_face f0 f3
+ |- (((POWER f) (SUC n)) = (((POWER f) n) o f))
T c= * * part cPOWER f0 cSUC f1 * * part co * * part cPOWER f0 f1 f0
+ (good_list L), (w = ((next_el f) x)), (f = ((find_face L) x)), ((((marked_list L) N) r) x) |- ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x))
T c==> cgood_list f0 c==> c= f1 cnext_el f2 f3 c==> c= f2 cfind_face f0 f3 c==> cmarked_list f0 f4 f5 f3 cMEM cnext_el cfind_face f0 f3 f3 cfind_face f0 f3
+ |- (((!n. (((POWER f) (SUC n)) = (((POWER f) n) o f))) ==> ((\n. (((POWER f) (SUC n)) = (((POWER f) n) o f))) n)) = ((\n. (((POWER f) (SUC n)) = (((POWER f) n) o f))) n))
T c= c==> ! c= * * part cPOWER f0 cSUC b0 * * part co * * part cPOWER f0 b0 f0 * / c= * * part cPOWER f0 cSUC b0 * * part co * * part cPOWER f0 b0 f0 f1 * / c= * * part cPOWER f0 cSUC b0 * * part co * * part cPOWER f0 b0 f0 f1
+ (!d. (!L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))) |- ((!d. (!L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))) /\ (!L. (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))))
T c==> ! ! c==> cMEM b0 clist_of_darts b1 cMEM cf_list b1 b0 cfind_face b1 b0 c/\ ! ! c==> cMEM b0 clist_of_darts b1 cMEM cf_list b1 b0 cfind_face b1 b0 ! ! c==> cMEM b1 clist_of_darts b0 cMEM cf_list b0 b1 cfind_face b0 b1
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) |- (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cMEM f1 clist_of_darts f0 cMEM c, cSND f1 cFST f1 clist_of_darts f0
+ (good_list L), ((((marked_list L) N) r) x) |- ((w = ((next_el f) x)) ==> ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x)))
T c==> cgood_list f0 c==> cmarked_list f0 f1 f2 f3 c==> c= f4 cnext_el f5 f3 cMEM cnext_el cfind_face f0 f3 f3 cfind_face f0 f3
- |- (((!f. (((POWER f) (SUC n)) = (f o ((POWER f) n)))) ==> ((\f. (((POWER f) (SUC n)) = (f o ((POWER f) n)))) f)) = ((\f. (((POWER f) (SUC n)) = (f o ((POWER f) n)))) f))
T c= c==> ! c= * * part cPOWER b0 cSUC f0 * * part co b0 * * part cPOWER b0 f0 * / c= * * part cPOWER b0 cSUC f0 * * part co b0 * * part cPOWER b0 f0 f1 * / c= * * part cPOWER b0 cSUC f0 * * part co b0 * * part cPOWER b0 f0 f1
- |- ((\f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))) f)
T * / ! ! c= csplit_normal_list f0 f1 b0 b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b8 b9 cAPPEND b10 b7 cAPPEND cCONS b4 cNIL cAPPEND cbetwn f1 b4 b1 cCONS b1 cNIL cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b2 cCONS b2 cNIL cflatten cmap b6 b7 cbetwn b0 b1 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f1 b2 cnext_el f1 b1 f2
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) |- ((\d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) d)
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 * / c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 f1
- |- (((!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))) ==> ((\f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))) f)) = ((\f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))) f))
T c= c==> ! ! ! c= csplit_normal_list f0 f1 b0 b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b8 b9 cAPPEND b10 b7 cAPPEND cCONS b4 cNIL cAPPEND cbetwn f1 b4 b1 cCONS b1 cNIL cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b2 cCONS b2 cNIL cflatten cmap b6 b7 cbetwn b0 b1 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f1 b2 cnext_el f1 b1 * / ! ! c= csplit_normal_list f0 f1 b0 b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b8 b9 cAPPEND b10 b7 cAPPEND cCONS b4 cNIL cAPPEND cbetwn f1 b4 b1 cCONS b1 cNIL cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b2 cCONS b2 cNIL cflatten cmap b6 b7 cbetwn b0 b1 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f1 b2 cnext_el f1 b1 f2 * / ! ! c= csplit_normal_list f0 f1 b0 b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b8 b9 cAPPEND b10 b7 cAPPEND cCONS b4 cNIL cAPPEND cbetwn f1 b4 b1 cCONS b1 cNIL cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b2 cCONS b2 cNIL cflatten cmap b6 b7 cbetwn b0 b1 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f1 b2 cnext_el f1 b1 f2
- |- (((!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))))) ==> ((\N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))))) N)) = ((\N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))))) N))
T c= c==> ! ! ! c= ctransform_list f0 b2 c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b1 c, b0 b1 c, b8 cSND b7 cAPPEND creplace b1 cCONS cSND b7 cNIL b0 cCONS cFST b7 cNIL csplit_normal_list f0 b1 b6 b3 b5 cfind_face f0 b3 cprev_el b1 b4 cl'z f0 b0 b1 b2 cl'y f0 b1 b2 * / ! ! c= ctransform_list f0 b2 c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b1 c, b0 b1 c, b8 cSND b7 cAPPEND creplace b1 cCONS cSND b7 cNIL b0 cCONS cFST b7 cNIL csplit_normal_list f0 b1 b6 b3 b5 cfind_face f0 b3 cprev_el b1 b4 cl'z f0 b0 b1 b2 cl'y f0 b1 b2 f1 * / ! ! c= ctransform_list f0 b2 c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b1 c, b0 b1 c, b8 cSND b7 cAPPEND creplace b1 cCONS cSND b7 cNIL b0 cCONS cFST b7 cNIL csplit_normal_list f0 b1 b6 b3 b5 cfind_face f0 b3 cprev_el b1 b4 cl'z f0 b0 b1 b2 cl'y f0 b1 b2 f1
+ |- ((!r. (!x. (((good_list L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))) ==> ((MEM w) ((find_face L) x))))) = T)
T c= ! ! c==> c/\ cgood_list f0 c/\ cmarked_list f0 f1 b0 b1 c/\ c= f2 cfind_face f0 b1 c= f3 cnext_el f2 b1 cMEM f3 cfind_face f0 b1 cT
+ (good_list L), (w = ((next_el f) x)), (f = ((find_face L) x)), ((((marked_list L) N) r) x) |- ((MEM w) ((find_face L) x))
T c==> cgood_list f0 c==> c= f1 cnext_el f2 f3 c==> c= f2 cfind_face f0 f3 c==> cmarked_list f0 f4 f5 f3 cMEM f1 cfind_face f0 f3
+ (((f_list L) x) = ((next_el ((find_face L) x)) x)) |- (((next_el ((find_face L) x)) x) = ((f_list L) x))
T c==> c= cf_list f0 f1 cnext_el cfind_face f0 f1 f1 c= cnext_el cfind_face f0 f1 f1 cf_list f0 f1
- |- (((!L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) ==> ((\L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) L)) = ((\L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) L))
T c= c==> ! ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 * / ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 f0 * / ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 f0
- |- (((!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))) ==> ((\r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))) r)) = ((\r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))) r))
T c= c==> ! ! c= ctransform_list f0 b1 c, f1 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b0 c, f1 b0 c, b7 cSND b6 cAPPEND creplace b0 cCONS cSND b6 cNIL f1 cCONS cFST b6 cNIL csplit_normal_list f0 b0 b5 b2 b4 cfind_face f0 b2 cprev_el b0 b3 cl'z f0 f1 b0 b1 cl'y f0 b0 b1 * / ! c= ctransform_list f0 b1 c, f1 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b0 c, f1 b0 c, b7 cSND b6 cAPPEND creplace b0 cCONS cSND b6 cNIL f1 cCONS cFST b6 cNIL csplit_normal_list f0 b0 b5 b2 b4 cfind_face f0 b2 cprev_el b0 b3 cl'z f0 f1 b0 b1 cl'y f0 b0 b1 f2 * / ! c= ctransform_list f0 b1 c, f1 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b0 c, f1 b0 c, b7 cSND b6 cAPPEND creplace b0 cCONS cSND b6 cNIL f1 cCONS cFST b6 cNIL csplit_normal_list f0 b0 b5 b2 b4 cfind_face f0 b2 cprev_el b0 b3 cl'z f0 f1 b0 b1 cl'y f0 b0 b1 f2
+ |- ((((good_list L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))) ==> ((MEM w) ((find_face L) x))) = T)
T c= c==> c/\ cgood_list f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= f4 cfind_face f0 f3 c= f5 cnext_el f4 f3 cMEM f5 cfind_face f0 f3 cT
+ (uniq (list_of_darts L)) |- ((uniq (list_of_darts L)) = T)
T c==> cuniq clist_of_darts f0 c= cuniq clist_of_darts f0 cT
+ |- ((\L. ((good_list L) = ((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))))))) L)
T * / c= cgood_list b0 c/\ cuniq clist_of_darts b0 c/\ call / c~ c= b1 cNIL b0 ! c==> cMEM b1 clist_of_darts b0 cMEM c, cSND b1 cFST b1 clist_of_darts b0 f0
+ (w = ((next_el f) x)), (f = ((find_face L) x)) |- (((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x)) = ((MEM w) ((find_face L) x)))
T c==> c= f0 cnext_el f1 f2 c==> c= f1 cfind_face f3 f2 c= cMEM cnext_el cfind_face f3 f2 f2 cfind_face f3 f2 cMEM f0 cfind_face f3 f2
- |- (((!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))) ==> ((\x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))) x)) = ((\x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))) x))
T c= c==> ! ! c= crtrans f0 f1 f2 b0 b1 cSND cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 * / ! c= crtrans f0 f1 f2 b0 b1 cSND cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3 * / ! c= crtrans f0 f1 f2 b0 b1 cSND cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3
+ (good_list L), ((f = ((find_face L) x)) /\ (w = ((next_el f) x))), ((((marked_list L) N) r) x) |- ((MEM w) ((find_face L) x))
T c==> cgood_list f0 c==> c/\ c= f1 cfind_face f0 f2 c= f3 cnext_el f1 f2 c==> cmarked_list f0 f4 f5 f2 cMEM f3 cfind_face f0 f2
- |- ((\L. (!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))))) L)
T * / ! ! ! ! c= csplit_normal_list b0 b1 b2 b3 b4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b10 b11 cAPPEND b12 b9 cAPPEND cCONS b6 cNIL cAPPEND cbetwn b1 b6 b3 cCONS b3 cNIL cAPPEND cCONS b5 cNIL cAPPEND cbetwn b1 b5 b4 cCONS b4 cNIL cflatten cmap b8 b9 cbetwn b2 b3 b6 / cmap / cPOWER * part cn_list b0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten b0 cnext_el b1 b4 cnext_el b1 b3 f0
+ |- ((!d. (!L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))) ==> (!L. (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))))
T c==> ! ! c==> cMEM b0 clist_of_darts b1 cMEM cf_list b1 b0 cfind_face b1 b0 ! ! c==> cMEM b1 clist_of_darts b0 cMEM cf_list b0 b1 cfind_face b0 b1
+ |- (((!m. (((uniq (list_of_darts L)) /\ ((MEM x) (list_of_darts L))) ==> ((((POWER (f_list L)) m) x) = (((POWER (next_el ((find_face L) x))) m) x)))) ==> ((\m. (((uniq (list_of_darts L)) /\ ((MEM x) (list_of_darts L))) ==> ((((POWER (f_list L)) m) x) = (((POWER (next_el ((find_face L) x))) m) x)))) (SUC (NUMERAL _0)))) = ((\m. (((uniq (list_of_darts L)) /\ ((MEM x) (list_of_darts L))) ==> ((((POWER (f_list L)) m) x) = (((POWER (next_el ((find_face L) x))) m) x)))) (SUC (NUMERAL _0))))
T c= c==> ! c==> c/\ cuniq clist_of_darts f0 cMEM f1 clist_of_darts f0 c= cPOWER * part cf_list f0 b0 f1 cPOWER * part cnext_el cfind_face f0 f1 b0 f1 * / c==> c/\ cuniq clist_of_darts f0 cMEM f1 clist_of_darts f0 c= cPOWER * part cf_list f0 b0 f1 cPOWER * part cnext_el cfind_face f0 f1 b0 f1 cSUC cNUMERAL c_0 * / c==> c/\ cuniq clist_of_darts f0 cMEM f1 clist_of_darts f0 c= cPOWER * part cf_list f0 b0 f1 cPOWER * part cnext_el cfind_face f0 f1 b0 f1 cSUC cNUMERAL c_0
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- ((\N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))))) N)
T * / ! ! c= ctransform_list f0 b2 c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b1 c, b0 b1 c, b8 cSND b7 cAPPEND creplace b1 cCONS cSND b7 cNIL b0 cCONS cFST b7 cNIL csplit_normal_list f0 b1 b6 b3 b5 cfind_face f0 b3 cprev_el b1 b4 cl'z f0 b0 b1 b2 cl'y f0 b1 b2 f1
- ((MEM x) (list_of_darts L)) |- (T = ((MEM x) (list_of_darts L)))
T c==> cMEM f0 clist_of_darts f1 c= cT cMEM f0 clist_of_darts f1
- |- (((!L. (!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))))) ==> ((\L. (!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))))) L)) = ((\L. (!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))))) L))
T c= c==> ! ! ! ! ! c= csplit_normal_list b0 b1 b2 b3 b4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b10 b11 cAPPEND b12 b9 cAPPEND cCONS b6 cNIL cAPPEND cbetwn b1 b6 b3 cCONS b3 cNIL cAPPEND cCONS b5 cNIL cAPPEND cbetwn b1 b5 b4 cCONS b4 cNIL cflatten cmap b8 b9 cbetwn b2 b3 b6 / cmap / cPOWER * part cn_list b0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten b0 cnext_el b1 b4 cnext_el b1 b3 * / ! ! ! ! c= csplit_normal_list b0 b1 b2 b3 b4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b10 b11 cAPPEND b12 b9 cAPPEND cCONS b6 cNIL cAPPEND cbetwn b1 b6 b3 cCONS b3 cNIL cAPPEND cCONS b5 cNIL cAPPEND cbetwn b1 b5 b4 cCONS b4 cNIL cflatten cmap b8 b9 cbetwn b2 b3 b6 / cmap / cPOWER * part cn_list b0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten b0 cnext_el b1 b4 cnext_el b1 b3 f0 * / ! ! ! ! c= csplit_normal_list b0 b1 b2 b3 b4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b10 b11 cAPPEND b12 b9 cAPPEND cCONS b6 cNIL cAPPEND cbetwn b1 b6 b3 cCONS b3 cNIL cAPPEND cCONS b5 cNIL cAPPEND cbetwn b1 b5 b4 cCONS b4 cNIL cflatten cmap b8 b9 cbetwn b2 b3 b6 / cmap / cPOWER * part cn_list b0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten b0 cnext_el b1 b4 cnext_el b1 b3 f0
- |- ((\N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) N)
T * / ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 f1
- (good_list L) |- ((good_list L) = T)
T c==> cgood_list f0 c= cgood_list f0 cT
+ (uniq (list_of_darts L)), ((((marked_list L) N) r) x) |- ((((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))) ==> ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x)))
T c==> cuniq clist_of_darts f0 c==> cmarked_list f0 f1 f2 f3 c==> c==> cmarked_list f0 f1 f2 f3 cMEM f3 clist_of_darts f0 cMEM cnext_el cfind_face f0 f3 f3 cfind_face f0 f3
- |- ((\r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) r)
T * / ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2
+ (good_list L), (w = ((next_el f) x)), ((((marked_list L) N) r) x) |- ((w = ((next_el f) x)) /\ ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x)))
T c==> cgood_list f0 c==> c= f1 cnext_el f2 f3 c==> cmarked_list f0 f4 f5 f3 c/\ c= f1 cnext_el f2 f3 cMEM cnext_el cfind_face f0 f3 f3 cfind_face f0 f3
+ |- (((!L. (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))) ==> ((\L. (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))) L)) = ((\L. (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))) L))
T c= c==> ! ! c==> cMEM b1 clist_of_darts b0 cMEM cf_list b0 b1 cfind_face b0 b1 * / ! c==> cMEM b1 clist_of_darts b0 cMEM cf_list b0 b1 cfind_face b0 b1 f0 * / ! c==> cMEM b1 clist_of_darts b0 cMEM cf_list b0 b1 cfind_face b0 b1 f0
+ (((f_list L) x) = ((next_el ((find_face L) x)) x)), ((MEM x) (list_of_darts L)) |- ((((f_list L) x) = ((next_el ((find_face L) x)) x)) /\ ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x)))
T c==> c= cf_list f0 f1 cnext_el cfind_face f0 f1 f1 c==> cMEM f1 clist_of_darts f0 c/\ c= cf_list f0 f1 cnext_el cfind_face f0 f1 f1 cMEM cnext_el cfind_face f0 f1 f1 cfind_face f0 f1
+ (!d. (!L. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))) |- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d))))
T c==> ! ! c==> cMEM b0 clist_of_darts b1 cMEM cf_list b1 b0 cfind_face b1 b0 ! c==> cMEM b0 clist_of_darts f0 cMEM cf_list f0 b0 cfind_face f0 b0
+ |- ((\x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))) x)
T * / c==> cmarked_list f0 f1 f2 b0 cMEM b0 clist_of_darts f0 f3
+ |- (((((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))) ==> ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x))) = ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x)))
T c= c==> c==> cmarked_list f0 f1 f2 f3 cMEM f3 clist_of_darts f0 cMEM cnext_el cfind_face f0 f3 f3 cfind_face f0 f3 cMEM cnext_el cfind_face f0 f3 f3 cfind_face f0 f3
+ |- ((\g. ((f o g) = (\x. (f (g x))))) g)
T * / c= * * part co f0 b0 / * f0 * b0 b1 f1
- |- (((POWER f) (SUC n)) = (f o ((POWER f) n)))
T c= * * part cPOWER f0 cSUC f1 * * part co f0 * * part cPOWER f0 f1
+ |- ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))))) L)
T * / ! ! ! c==> cmarked_list b0 b1 b2 b3 cMEM b3 clist_of_darts b0 f0
+ |- ((!N. (!r. (!x. (((good_list L) /\ (((((marked_list L) N) r) x) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))) ==> ((MEM w) ((find_face L) x)))))) = T)
T c= ! ! ! c==> c/\ cgood_list f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c= f1 cfind_face f0 b2 c= f2 cnext_el f1 b2 cMEM f2 cfind_face f0 b2 cT
+ |- (((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d)))) ==> ((\d. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d)))) d)) = ((\d. (((MEM d) (list_of_darts L)) ==> ((MEM ((f_list L) d)) ((find_face L) d)))) d))
T c= c==> ! c==> cMEM b0 clist_of_darts f0 cMEM cf_list f0 b0 cfind_face f0 b0 * / c==> cMEM b0 clist_of_darts f0 cMEM cf_list f0 b0 cfind_face f0 b0 f1 * / c==> cMEM b0 clist_of_darts f0 cMEM cf_list f0 b0 cfind_face f0 b0 f1
- |- (((!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))) ==> ((\i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))) i)) = ((\i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))) i))
T c= c==> ! c= crtrans f0 f1 f2 f3 b0 cSND cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 * / c= crtrans f0 f1 f2 f3 b0 cSND cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4 * / c= crtrans f0 f1 f2 f3 b0 cSND cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4
- ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)) |- (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))
T c==> c= cztrans f0 f1 f2 f3 f4 cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cztrans f0 f1 f2 f3 f4
+ ((MEM x) (list_of_darts L)) |- ((((f_list L) x) = ((next_el ((find_face L) x)) x)) ==> ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x)))
T c==> cMEM f0 clist_of_darts f1 c==> c= cf_list f1 f0 cnext_el cfind_face f1 f0 f0 cMEM cnext_el cfind_face f1 f0 f0 cfind_face f1 f0
+ ((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))))), ((((marked_list L) N) r) x) |- (((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))))) /\ ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x)))
T c==> c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cmarked_list f0 f1 f2 f3 c/\ c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 cMEM cnext_el cfind_face f0 f3 f3 cfind_face f0 f3
+ |- (((!g. ((f o g) = (\x. (f (g x))))) ==> ((\g. ((f o g) = (\x. (f (g x))))) g)) = ((\g. ((f o g) = (\x. (f (g x))))) g))
T c= c==> ! c= * * part co f0 b0 / * f0 * b0 b1 * / c= * * part co f0 b0 / * f0 * b0 b1 f1 * / c= * * part co f0 b0 / * f0 * b0 b1 f1
- |- ((\L. (!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))))) L)
T * / ! ! ! ! c= crtrans b0 b1 b2 b3 b4 cSND cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0
- |- (((\x'. (f x')) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- |- (((!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) ==> ((\r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) r)) = ((\r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) r))
T c= c==> ! ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 * / ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 f2 * / ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 f2
+ (((f_list L) x) = ((next_el ((find_face L) x)) x)) |- (((MEM ((f_list L) x)) ((find_face L) x)) = ((MEM ((next_el ((find_face L) x)) x)) ((find_face L) x)))
T c==> c= cf_list f0 f1 cnext_el cfind_face f0 f1 f1 c= cMEM cf_list f0 f1 cfind_face f0 f1 cMEM cnext_el cfind_face f0 f1 f1 cfind_face f0 f1
+ |- ((!y. (!m. (((uniq (list_of_darts L)) /\ ((MEM y) (list_of_darts L))) ==> ((((POWER (f_list L)) m) y) = (((POWER (next_el ((find_face L) y))) m) y))))) = T)
T c= ! ! c==> c/\ cuniq clist_of_darts f0 cMEM b0 clist_of_darts f0 c= cPOWER * part cf_list f0 b1 b0 cPOWER * part cnext_el cfind_face f0 b0 b1 b0 cT
- |- ((\ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))) ram2)
T * / c= csplit_normal_list f0 f1 f2 f3 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b6 b7 cAPPEND b8 b5 cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 f3 cCONS f3 cNIL cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 b0 cCONS b0 cNIL cflatten cmap b4 b5 cbetwn f2 f3 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 b0 cnext_el f1 f3 f4
- |- ((\t. ((LET_END t) = t)) t)
T * / c= cLET_END b0 b0 f0
- |- ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))
T c= ctransform_list f0 f1 c, f2 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f3 c, f2 f3 c, b5 cSND b4 cAPPEND creplace f3 cCONS cSND b4 cNIL f2 cCONS cFST b4 cNIL csplit_normal_list f0 f3 b3 b0 b2 cfind_face f0 b0 cprev_el f3 b1 cl'z f0 f2 f3 f1 cl'y f0 f3 f1
- |- (((!n. (!f. (((POWER f) (SUC n)) = (f o ((POWER f) n))))) ==> ((\n. (!f. (((POWER f) (SUC n)) = (f o ((POWER f) n))))) n)) = ((\n. (!f. (((POWER f) (SUC n)) = (f o ((POWER f) n))))) n))
T c= c==> ! ! c= * * part cPOWER b1 cSUC b0 * * part co b1 * * part cPOWER b1 b0 * / ! c= * * part cPOWER b1 cSUC b0 * * part co b1 * * part cPOWER b1 b0 f0 * / ! c= * * part cPOWER b1 cSUC b0 * * part co b1 * * part cPOWER b1 b0 f0
- |- ((\N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) N)
T * / ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1
