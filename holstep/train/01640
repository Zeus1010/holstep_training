N Hypermap.lemma_splitting_case_count_edges
C |- (!H. (!x. (((x IN (dart H)) /\ ((is_edge_split H) x)) ==> (((number_of_edges H) + (NUMERAL (BIT1 _0))) = (number_of_edges ((edge_walkup H) x))))))
T c==> c/\ cIN f0 * part cdart f1 cis_edge_split f1 f0 c= c+ cnumber_of_edges f1 cNUMERAL cBIT1 c_0 cnumber_of_edges cedge_walkup f1 f0
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D NOT_FORALL_THM
A |- (!P. ((~ (!x. (P x))) = (?x. (~ (P x)))))
T c= c~ ! * f0 b0 c? / c~ * f0 b0
D NUMERAL
A |- (!n. ((NUMERAL n) = n))
T c= cNUMERAL f0 f0
D num_INDUCTION
A |- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n))))
T c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 ! * f0 b0
D Ssrnat.add0n
A |- (!n. (((NUMERAL _0) + n) = n))
T c= c+ cNUMERAL c_0 f0 f0
D ADD_0
A |- (!m. ((m + (NUMERAL _0)) = m))
T c= c+ f0 cNUMERAL c_0 f0
D Ssrnat.addnS
A |- (!m. (!n. ((m + (SUC n)) = (SUC (m + n)))))
T c= c+ f0 cSUC f1 cSUC c+ f0 f1
D ADD_ASSOC
A |- (!m. (!n. (!p. ((m + (n + p)) = ((m + n) + p)))))
T c= c+ f0 c+ f1 f2 c+ c+ f0 f1 f2
D ADD_AC
A |- (((m + n) = (n + m)) /\ ((((m + n) + p) = (m + (n + p))) /\ ((m + (n + p)) = (n + (m + p)))))
T c/\ c= c+ f0 f1 c+ f1 f0 c/\ c= c+ c+ f0 f1 f2 c+ f0 c+ f1 f2 c= c+ f0 c+ f1 f2 c+ f1 c+ f0 f2
D ONE
A |- ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0)))
T c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
D TWO
A |- ((NUMERAL (BIT0 (BIT1 _0))) = (SUC (NUMERAL (BIT1 _0))))
T c= cNUMERAL cBIT0 cBIT1 c_0 cSUC cNUMERAL cBIT1 c_0
D Ssrnat.mul0n
A |- (!n. (((NUMERAL _0) * n) = (NUMERAL _0)))
T c= c* cNUMERAL c_0 f0 cNUMERAL c_0
D MULT_0
A |- (!m. ((m * (NUMERAL _0)) = (NUMERAL _0)))
T c= c* f0 cNUMERAL c_0 cNUMERAL c_0
D MULT_SUC
A |- (!m. (!n. ((m * (SUC n)) = (m + (m * n)))))
T c= c* f0 cSUC f1 c+ f0 c* f0 f1
D Ssrnat.mul1n
A |- (!n. (((NUMERAL (BIT1 _0)) * n) = n))
T c= c* cNUMERAL cBIT1 c_0 f0 f0
D LEFT_ADD_DISTRIB
A |- (!m. (!n. (!p. ((m * (n + p)) = ((m * n) + (m * p))))))
T c= c* f0 c+ f1 f2 c+ c* f0 f1 c* f0 f2
D MULT_AC
A |- (((m * n) = (n * m)) /\ ((((m * n) * p) = (m * (n * p))) /\ ((m * (n * p)) = (n * (m * p)))))
T c/\ c= c* f0 f1 c* f1 f0 c/\ c= c* c* f0 f1 f2 c* f0 c* f1 f2 c= c* f0 c* f1 f2 c* f1 c* f0 f2
D Ssrnat.expnS
A |- (!m. (!n. ((m EXP (SUC n)) = (m * (m EXP n)))))
T c= cEXP f0 cSUC f1 c* f0 cEXP f0 f1
D Ssrnat.expn0
A |- (!m. ((m EXP (NUMERAL _0)) = (NUMERAL (BIT1 _0))))
T c= cEXP f0 cNUMERAL c_0 cNUMERAL cBIT1 c_0
D ARITH_SUC
A |- ((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) /\ (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))))
T c/\ ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
D ARITH_ADD
A |- ((!m. (!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n))))) /\ (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))))))))))
T c/\ ! ! c= c+ cNUMERAL b0 cNUMERAL b1 cNUMERAL c+ b0 b1 c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
D IN
A |- (!P. (!x. ((x IN P) = (P x))))
T c= cIN f0 f1 * f1 f0
D EXTENSION
A |- (!s. (!t. ((s = t) = (!x. ((x IN s) = (x IN t))))))
T c= c= f0 f1 ! c= cIN b0 f0 cIN b0 f1
D NOT_IN_EMPTY
A |- (!x. (~ (x IN EMPTY)))
T c~ cIN f0 part cEMPTY
D IN_DIFF
A |- (!s. (!t. (!x. ((x IN (s DIFF t)) = ((x IN s) /\ (~ (x IN t)))))))
T c= cIN f0 * * part cDIFF f1 f2 c/\ cIN f0 f1 c~ cIN f0 f2
D IN_INSERT
A |- (!x. (!y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s))))))
T c= cIN f0 * * part cINSERT f1 f2 c\/ c= f0 f1 cIN f0 f2
D IN_DELETE
A |- (!s. (!x. (!y. ((x IN (s DELETE y)) = ((x IN s) /\ (~ (x = y)))))))
T c= cIN f0 * * part cDELETE f1 f2 c/\ cIN f0 f1 c~ c= f0 f2
D Fan.POWER_1
A |- (!f. (((POWER f) (NUMERAL (BIT1 _0))) = f))
T c= * * part cPOWER f0 cNUMERAL cBIT1 c_0 f0
D Hypermap.edge
A |- (!H. (!x. (((edge H) x) = ((orbit_map (edge_map H)) x))))
T c= * * part cedge f0 f1 * * part corbit_map * part cedge_map f0 f1
D Hypermap.number_of_edges
A |- (!H. ((number_of_edges H) = (CARD (edge_set H))))
T c= cnumber_of_edges f0 cCARD * part cedge_set f0
D Hypermap.dart_nondegenerate
A |- (!H. (!x. (((dart_nondegenerate H) x) = ((~ (((edge_map H) x) = x)) /\ ((~ (((node_map H) x) = x)) /\ (~ (((face_map H) x) = x)))))))
T c= cdart_nondegenerate f0 f1 c/\ c~ c= cedge_map f0 f1 f1 c/\ c~ c= cnode_map f0 f1 f1 c~ c= cface_map f0 f1 f1
D Hypermap.in_orbit_lemma
A |- (!f. (!n. (!x. (!y. ((y = (((POWER f) n) x)) ==> (y IN ((orbit_map f) x)))))))
T c==> c= f0 cPOWER f1 f2 f3 cIN f0 * * part corbit_map f1 f3
D Hypermap.CARD_TWO_ELEMENTS
A |- (!x. (!y. ((~ (x = y)) ==> ((CARD (x INSERT (y INSERT EMPTY))) = (NUMERAL (BIT0 (BIT1 _0)))))))
T c==> c~ c= f0 f1 c= cCARD * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
D Hypermap.lemma_inverse_maps_at_nondegenerate_dart
A |- (!H. (!x. (((dart_nondegenerate H) x) ==> ((~ (((inverse (edge_map H)) x) = x)) /\ ((~ (((inverse (node_map H)) x) = x)) /\ (~ (((inverse (face_map H)) x) = x)))))))
T c==> cdart_nondegenerate f0 f1 c/\ c~ c= cinverse * part cedge_map f0 f1 f1 c/\ c~ c= cinverse * part cnode_map f0 f1 f1 c~ c= cinverse * part cface_map f0 f1 f1
D Hypermap.edge_map_walkup
A |- (!H. (!x. (!y. ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y)))))))))
T c/\ c= cedge_map cedge_walkup f0 f1 f1 f1 c/\ c==> c/\ c~ c= cnode_map f0 f1 f1 c~ c= cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1 c/\ c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c==> c/\ c~ c= f2 f1 c/\ c~ c= f2 cinverse * part cedge_map f0 f1 c~ c= f2 cnode_map f0 f1 c= cedge_map cedge_walkup f0 f1 f2 cedge_map f0 f2
D Hypermap.is_edge_split
A |- (!H. (!x. (((is_edge_split H) x) = (((dart_nondegenerate H) x) /\ (((node_map H) x) IN ((edge H) x))))))
T c= cis_edge_split f0 f1 c/\ cdart_nondegenerate f0 f1 cIN cnode_map f0 f1 * * part cedge f0 f1
D Hypermap.lemma_edge_identity
A |- (!H. (!x. (!y. ((y IN ((edge H) x)) ==> (((edge H) x) = ((edge H) y))))))
T c==> cIN f0 * * part cedge f1 f2 c= * * part cedge f1 f2 * * part cedge f1 f0
D Hypermap.lemma_walkup_edges
A |- (!H. (!x. ((x IN (dart H)) ==> (((edge_set H) DIFF (((edge H) x) INSERT (((edge H) ((node_map H) x)) INSERT EMPTY))) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))))))
T c==> cIN f0 * part cdart f1 c= * * part cDIFF * part cedge_set f1 * * part cINSERT * * part cedge f1 f0 * * part cINSERT * * part cedge f1 cnode_map f1 f0 part cEMPTY * * part cDIFF * part cedge_set cedge_walkup f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cinverse * part cedge_map f1 f0 part cEMPTY
D Hypermap.lemma_in_edge_set
A |- (!H. (!x. ((x IN (dart H)) = (((edge H) x) IN (edge_set H)))))
T c= cIN f0 * part cdart f1 cIN * * part cedge f1 f0 * part cedge_set f1
D Hypermap.lemma_node_map_walkup_in_dart
A |- (!H. (!x. (((x IN (dart H)) /\ (~ (((node_map H) x) = x))) ==> ((((node_map H) x) IN (dart ((edge_walkup H) x))) /\ (((inverse (node_map H)) x) IN (dart ((edge_walkup H) x)))))))
T c==> c/\ cIN f0 * part cdart f1 c~ c= cnode_map f1 f0 f0 c/\ cIN cnode_map f1 f0 * part cdart cedge_walkup f1 f0 cIN cinverse * part cnode_map f1 f0 * part cdart cedge_walkup f1 f0
D Hypermap.lemma_face_map_walkup_in_dart
A |- (!H. (!x. (((x IN (dart H)) /\ (~ (((face_map H) x) = x))) ==> ((((face_map H) x) IN (dart ((edge_walkup H) x))) /\ (((inverse (face_map H)) x) IN (dart ((edge_walkup H) x)))))))
T c==> c/\ cIN f0 * part cdart f1 c~ c= cface_map f1 f0 f0 c/\ cIN cface_map f1 f0 * part cdart cedge_walkup f1 f0 cIN cinverse * part cface_map f1 f0 * part cdart cedge_walkup f1 f0
D Hypermap.lemma_edge_split
A |- (!H. (!x. (((x IN (dart H)) /\ ((is_edge_split H) x)) ==> ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) /\ (((edge H) x) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)))))))))
T c==> c/\ cIN f0 * part cdart f1 cis_edge_split f1 f0 c/\ c~ cIN cinverse * part cface_map f1 f0 * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 c= * * part cedge f1 f0 * * part cUNION * * part cINSERT f0 part cEMPTY * * part cUNION * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cedge cedge_walkup f1 f0 cinverse * part cface_map f1 f0
D Hypermap.CARD_MINUS_ONE
A |- (!s. (!x. (((FINITE s) /\ (x IN s)) ==> ((CARD s) = ((CARD (s DELETE x)) + (NUMERAL (BIT1 _0)))))))
T c==> c/\ cFINITE f0 cIN f1 f0 c= cCARD f0 c+ cCARD * * part cDELETE f0 f1 cNUMERAL cBIT1 c_0
D Hypermap.CARD_MINUS_DIFF_TWO_SET
A |- (!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY)))))))))
T c==> c/\ cFINITE f0 c/\ cIN f1 f0 cIN f2 f0 c= cCARD f0 c+ cCARD * * part cDIFF f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
D Hypermap.FINITE_HYPERMAP_ORBITS
A |- (!H. ((FINITE (edge_set H)) /\ ((FINITE (node_set H)) /\ (FINITE (face_set H)))))
T c/\ cFINITE * part cedge_set f0 c/\ cFINITE * part cnode_set f0 cFINITE * part cface_set f0
D Hypermap.lemma_different_edges
A |- (!H. (!x. (!y. ((~ (x IN ((edge H) y))) ==> (~ (((edge H) x) = ((edge H) y)))))))
T c==> c~ cIN f0 * * part cedge f1 f2 c~ c= * * part cedge f1 f0 * * part cedge f1 f2
- ((NUMERAL (BIT0 (BIT1 _0))) = (CARD (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) INSERT EMPTY)))) |- ((CARD (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) INSERT EMPTY))) = (NUMERAL (BIT0 (BIT1 _0))))
T c==> c= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 part cEMPTY c= cCARD * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
+ |- (((!H. (!x. ((x IN (dart H)) = (((edge H) x) IN (edge_set H))))) ==> ((\H. (!x. ((x IN (dart H)) = (((edge H) x) IN (edge_set H))))) H)) = ((\H. (!x. ((x IN (dart H)) = (((edge H) x) IN (edge_set H))))) H))
T c= c==> ! ! c= cIN b1 * part cdart b0 cIN * * part cedge b0 b1 * part cedge_set b0 * / ! c= cIN b1 * part cdart b0 cIN * * part cedge b0 b1 * part cedge_set b0 f0 * / ! c= cIN b1 * part cdart b0 cIN * * part cedge b0 b1 * part cedge_set b0 f0
+ |- ((\H. (!x. (!y. ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y))))))))) H)
T * / ! ! c/\ c= cedge_map cedge_walkup b0 b1 b1 b1 c/\ c==> c/\ c~ c= cnode_map b0 b1 b1 c~ c= cedge_map b0 b1 b1 c= cedge_map cedge_walkup b0 b1 cnode_map b0 b1 cedge_map b0 b1 c/\ c==> c/\ c~ c= cinverse * part cface_map b0 b1 b1 c~ c= cinverse * part cedge_map b0 b1 b1 c= cedge_map cedge_walkup b0 b1 cinverse * part cedge_map b0 b1 cinverse * part cface_map b0 b1 c==> c/\ c~ c= b2 b1 c/\ c~ c= b2 cinverse * part cedge_map b0 b1 c~ c= b2 cnode_map b0 b1 c= cedge_map cedge_walkup b0 b1 b2 cedge_map b0 b2 f0
+ |- (((((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) ==> ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))))) = ((((inverse (face_map H)) x) IN (dart ((edge_walkup H) x))) ==> ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))))))
T c= c==> cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> cIN cinverse * part cface_map f0 f1 * part cdart cedge_walkup f0 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1
- |- ((FINITE (node_set H)) /\ (FINITE (face_set H)))
T c/\ cFINITE * part cnode_set f0 cFINITE * part cface_set f0
- |- ((m = n) = ((int_of_num m) = (int_of_num n)))
T c= c= f0 f1 c= cint_of_num f0 cint_of_num f1
+ (~ (((node_map H) x) = x)), ((~ (((node_map H) x) = x)) /\ (~ (((face_map H) x) = x))), (x IN (dart H)) |- ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> ((((edge ((edge_walkup H) x)) ((node_map H) x)) IN (edge_set ((edge_walkup H) x))) /\ (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))))
T c==> c~ c= cnode_map f0 f1 f1 c==> c/\ c~ c= cnode_map f0 f1 f1 c~ c= cface_map f0 f1 f1 c==> cIN f1 * part cdart f0 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 c/\ cIN * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * part cedge_set cedge_walkup f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1
+ |- (((!x. (((dart_nondegenerate H) x) = ((~ (((edge_map H) x) = x)) /\ ((~ (((node_map H) x) = x)) /\ (~ (((face_map H) x) = x)))))) ==> ((\x. (((dart_nondegenerate H) x) = ((~ (((edge_map H) x) = x)) /\ ((~ (((node_map H) x) = x)) /\ (~ (((face_map H) x) = x)))))) x)) = ((\x. (((dart_nondegenerate H) x) = ((~ (((edge_map H) x) = x)) /\ ((~ (((node_map H) x) = x)) /\ (~ (((face_map H) x) = x)))))) x))
T c= c==> ! c= cdart_nondegenerate f0 b0 c/\ c~ c= cedge_map f0 b0 b0 c/\ c~ c= cnode_map f0 b0 b0 c~ c= cface_map f0 b0 b0 * / c= cdart_nondegenerate f0 b0 c/\ c~ c= cedge_map f0 b0 b0 c/\ c~ c= cnode_map f0 b0 b0 c~ c= cface_map f0 b0 b0 f1 * / c= cdart_nondegenerate f0 b0 c/\ c~ c= cedge_map f0 b0 b0 c/\ c~ c= cnode_map f0 b0 b0 c~ c= cface_map f0 b0 b0 f1
+ (~ (((face_map H) x) = x)), (x IN (dart H)) |- ((((face_map H) x) IN (dart ((edge_walkup H) x))) /\ (((inverse (face_map H)) x) IN (dart ((edge_walkup H) x))))
T c==> c~ c= cface_map f0 f1 f1 c==> cIN f1 * part cdart f0 c/\ cIN cface_map f0 f1 * part cdart cedge_walkup f0 f1 cIN cinverse * part cface_map f0 f1 * part cdart cedge_walkup f0 f1
+ |- (((!q'. (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) = p') ==> ((p' ==> ((((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) = q')) ==> (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))) = (p' ==> q'))))) ==> ((\q'. (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) = p') ==> ((p' ==> ((((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) = q')) ==> (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))) = (p' ==> q'))))) q')) = ((\q'. (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) = p') ==> ((p' ==> ((((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) = q')) ==> (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 f2 c==> c==> f2 c= cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 b0 c= c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> f2 b0 * / c==> c= c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 f2 c==> c==> f2 c= cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 b0 c= c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> f2 b0 f3 * / c==> c= c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 f2 c==> c==> f2 c= cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 b0 c= c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> f2 b0 f3
+ |- ((t \/ F) = t)
T c= c\/ f0 cF f0
+ (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- (((((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x))) ==> (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((inverse (edge_map H)) x)))) ==> ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0))))))
T c==> cIN f0 * part cdart f1 c==> cdart_nondegenerate f1 f0 c==> cis_edge_split f1 f0 c==> c==> c= cedge_map cedge_walkup f1 f0 cinverse * part cedge_map f1 f0 cedge_map cedge_walkup f1 f0 cinverse * part cedge_map f1 f0 cIN cinverse * part cface_map f1 f0 * * part corbit_map * part cedge_map cedge_walkup f1 f0 cinverse * part cedge_map f1 f0 c= cCARD * part cedge_set cedge_walkup f1 f0 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cinverse * part cedge_map f1 f0 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
- |- ((((int_le (int_of_num (NUMERAL _0))) (int_of_num k)) ==> (((int_add (int_of_num k)) (int_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((int_add (int_of_num k)) (int_of_num (NUMERAL (BIT0 (BIT1 _0))))))) = (((int_add (int_of_num k)) (int_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((int_add (int_of_num k)) (int_of_num (NUMERAL (BIT0 (BIT1 _0)))))))
T c= c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f0 c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0
+ |- ((\H. (!x. (((x IN (dart H)) /\ ((is_edge_split H) x)) ==> ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) /\ (((edge H) x) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x))))))))) H)
T * / ! c==> c/\ cIN b1 * part cdart b0 cis_edge_split b0 b1 c/\ c~ cIN cinverse * part cface_map b0 b1 * * part cedge cedge_walkup b0 b1 cnode_map b0 b1 c= * * part cedge b0 b1 * * part cUNION * * part cINSERT b1 part cEMPTY * * part cUNION * * part cedge cedge_walkup b0 b1 cnode_map b0 b1 * * part cedge cedge_walkup b0 b1 cinverse * part cface_map b0 b1 f0
+ |- ((\x. (((orbit_map (edge_map H)) x) = ((edge H) x))) x)
T * / c= * * part corbit_map * part cedge_map f0 b0 * * part cedge f0 b0 f1
+ (x IN (dart H)), ((is_edge_split H) x) |- ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) /\ (((edge H) x) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x))))))
T c==> cIN f0 * part cdart f1 c==> cis_edge_split f1 f0 c/\ c~ cIN cinverse * part cface_map f1 f0 * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 c= * * part cedge f1 f0 * * part cUNION * * part cINSERT f0 part cEMPTY * * part cUNION * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cedge cedge_walkup f1 f0 cinverse * part cface_map f1 f0
+ |- (((((edge_set H) DELETE ((edge H) x)) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) ==> (((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x))))) = ((((edge_set H) DIFF (((edge H) x) INSERT (((edge H) x) INSERT EMPTY))) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) ==> (((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x))))))
T c= c==> c= * * part cDELETE * part cedge_set f0 * * part cedge f0 f1 * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY c= c+ cCARD * part cedge_set f0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1 c==> c= * * part cDIFF * part cedge_set f0 * * part cINSERT * * part cedge f0 f1 * * part cINSERT * * part cedge f0 f1 part cEMPTY * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY c= c+ cCARD * part cedge_set f0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1
+ |- ((\x. (!y. ((y IN ((edge H) x)) ==> (((edge H) x) = ((edge H) y))))) x)
T * / ! c==> cIN b1 * * part cedge f0 b0 c= * * part cedge f0 b0 * * part cedge f0 b1 f1
- (!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))) |- (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY)))))))
T c==> ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY ! c==> c/\ cFINITE f0 c/\ cIN f1 f0 cIN b0 f0 c= cCARD f0 c+ cCARD * * part cDIFF f0 * * part cINSERT f1 * * part cINSERT b0 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT b0 part cEMPTY
+ (x IN (dart H)) |- (((((edge H) x) IN (edge_set H)) ==> ((((edge_set H) DELETE ((edge H) x)) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) ==> (((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x)))))) = (((x IN (dart H)) = (((edge H) x) IN (edge_set H))) ==> ((((edge_set H) DELETE ((edge H) x)) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) ==> (((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x)))))))
T c==> cIN f0 * part cdart f1 c= c==> cIN * * part cedge f1 f0 * part cedge_set f1 c==> c= * * part cDELETE * part cedge_set f1 * * part cedge f1 f0 * * part cDIFF * part cedge_set cedge_walkup f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cinverse * part cedge_map f1 f0 part cEMPTY c= c+ cCARD * part cedge_set f1 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f1 f0 c==> c= cIN f0 * part cdart f1 cIN * * part cedge f1 f0 * part cedge_set f1 c==> c= * * part cDELETE * part cedge_set f1 * * part cedge f1 f0 * * part cDIFF * part cedge_set cedge_walkup f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cinverse * part cedge_map f1 f0 part cEMPTY c= c+ cCARD * part cedge_set f1 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f1 f0
- |- ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)
T * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
+ (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- ((FINITE (edge_set ((edge_walkup H) x))) /\ ((((edge ((edge_walkup H) x)) ((node_map H) x)) IN (edge_set ((edge_walkup H) x))) /\ (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))))
T c==> cIN f0 * part cdart f1 c==> cdart_nondegenerate f1 f0 c==> cis_edge_split f1 f0 c/\ cFINITE * part cedge_set cedge_walkup f1 f0 c/\ cIN * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * part cedge_set cedge_walkup f1 f0 cIN * * part cedge cedge_walkup f1 f0 cinverse * part cface_map f1 f0 * part cedge_set cedge_walkup f1 f0
+ |- (((!H. ((FINITE (edge_set H)) /\ ((FINITE (node_set H)) /\ (FINITE (face_set H))))) ==> ((\H. ((FINITE (edge_set H)) /\ ((FINITE (node_set H)) /\ (FINITE (face_set H))))) H)) = ((\H. ((FINITE (edge_set H)) /\ ((FINITE (node_set H)) /\ (FINITE (face_set H))))) H))
T c= c==> ! c/\ cFINITE * part cedge_set b0 c/\ cFINITE * part cnode_set b0 cFINITE * part cface_set b0 * / c/\ cFINITE * part cedge_set b0 c/\ cFINITE * part cnode_set b0 cFINITE * part cface_set b0 f0 * / c/\ cFINITE * part cedge_set b0 c/\ cFINITE * part cnode_set b0 cFINITE * part cface_set b0 f0
- |- (((int_add (int_of_num k)) (int_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((int_add (int_of_num k)) (int_of_num (NUMERAL (BIT0 (BIT1 _0))))))
T c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0
+ ((CARD (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) INSERT EMPTY))) = (NUMERAL (BIT0 (BIT1 _0)))), (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- (((CARD (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) INSERT EMPTY))) = (NUMERAL (BIT0 (BIT1 _0)))) /\ ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0))))))
T c==> c= cCARD * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c==> cIN f1 * part cdart f0 c==> cdart_nondegenerate f0 f1 c==> cis_edge_split f0 f1 c/\ c= cCARD * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
+ (~ (((edge ((edge_walkup H) x)) ((node_map H) x)) = ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)))) |- ((((CARD (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) INSERT EMPTY))) = (NUMERAL (BIT0 (BIT1 _0)))) ==> ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0)))))) = ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0))))))
T c==> c~ c= * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 c= c==> c= cCARD * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
+ ((~ (((inverse (edge_map H)) x) = x)) /\ ((~ (((inverse (node_map H)) x) = x)) /\ (~ (((inverse (face_map H)) x) = x)))), (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- (((~ (((inverse (edge_map H)) x) = x)) /\ ((~ (((inverse (node_map H)) x) = x)) /\ (~ (((inverse (face_map H)) x) = x)))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) ==> ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0)))))))
T c==> c/\ c~ c= cinverse * part cedge_map f0 f1 f1 c/\ c~ c= cinverse * part cnode_map f0 f1 f1 c~ c= cinverse * part cface_map f0 f1 f1 c==> cIN f1 * part cdart f0 c==> cdart_nondegenerate f0 f1 c==> cis_edge_split f0 f1 c/\ c/\ c~ c= cinverse * part cedge_map f0 f1 f1 c/\ c~ c= cinverse * part cnode_map f0 f1 f1 c~ c= cinverse * part cface_map f0 f1 f1 c==> c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
- |- ((T /\ F) = F)
T c= c/\ cT cF cF
- (~ (((inverse (edge_map H)) x) = x)) |- (((~ (x = ((inverse (edge_map H)) x))) ==> ((x = ((inverse (edge_map H)) x)) = F)) = ((x = ((inverse (edge_map H)) x)) = F))
T c==> c~ c= cinverse * part cedge_map f0 f1 f1 c= c==> c~ c= f1 cinverse * part cedge_map f0 f1 c= c= f1 cinverse * part cedge_map f0 f1 cF c= c= f1 cinverse * part cedge_map f0 f1 cF
+ (((dart_nondegenerate H) x) /\ (((node_map H) x) IN ((edge H) x))), (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- ((((edge_set H) DIFF (((edge H) x) INSERT (((edge H) ((node_map H) x)) INSERT EMPTY))) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) ==> (((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x)))))
T c==> c/\ cdart_nondegenerate f0 f1 cIN cnode_map f0 f1 * * part cedge f0 f1 c==> cIN f1 * part cdart f0 c==> cdart_nondegenerate f0 f1 c==> cis_edge_split f0 f1 c==> c= * * part cDIFF * part cedge_set f0 * * part cINSERT * * part cedge f0 f1 * * part cINSERT * * part cedge f0 cnode_map f0 f1 part cEMPTY * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY c= c+ cCARD * part cedge_set f0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1
- (~ (((inverse (face_map H)) x) = x)) |- ((x = ((inverse (face_map H)) x)) = F)
T c==> c~ c= cinverse * part cface_map f0 f1 f1 c= c= f1 cinverse * part cface_map f0 f1 cF
+ ((CARD (edge_set ((edge_walkup H) x))) = (((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT1 _0))) + (NUMERAL (BIT1 _0)))) |- ((((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT1 _0))) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x))))
T c==> c= cCARD * part cedge_set cedge_walkup f0 f1 c+ c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 c= c+ c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1
+ (x IN (dart H)), ((is_edge_split H) x) |- (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0)))))) = ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0))))))
T c==> cIN f0 * part cdart f1 c==> cis_edge_split f1 f0 c= c==> c~ cIN cinverse * part cface_map f1 f0 * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 c= cCARD * part cedge_set cedge_walkup f1 f0 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cinverse * part cface_map f1 f0 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c= cCARD * part cedge_set cedge_walkup f1 f0 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cinverse * part cface_map f1 f0 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
- |- ((~ (x = y)) = (((int_le ((int_add x) (int_of_num (NUMERAL (BIT1 _0))))) y) \/ ((int_le ((int_add y) (int_of_num (NUMERAL (BIT1 _0))))) x)))
T c= c~ c= f0 f1 c\/ cint_le cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 f1 cint_le cint_add f1 cint_of_num cNUMERAL cBIT1 c_0 f0
+ (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- ((((edge ((edge_walkup H) x)) ((node_map H) x)) IN (edge_set ((edge_walkup H) x))) /\ (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))))
T c==> cIN f0 * part cdart f1 c==> cdart_nondegenerate f1 f0 c==> cis_edge_split f1 f0 c/\ cIN * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * part cedge_set cedge_walkup f1 f0 cIN * * part cedge cedge_walkup f1 f0 cinverse * part cface_map f1 f0 * part cedge_set cedge_walkup f1 f0
+ |- (((!y. ((~ (x = y)) ==> ((CARD (x INSERT (y INSERT EMPTY))) = (NUMERAL (BIT0 (BIT1 _0)))))) ==> ((\y. ((~ (x = y)) ==> ((CARD (x INSERT (y INSERT EMPTY))) = (NUMERAL (BIT0 (BIT1 _0)))))) y)) = ((\y. ((~ (x = y)) ==> ((CARD (x INSERT (y INSERT EMPTY))) = (NUMERAL (BIT0 (BIT1 _0)))))) y))
T c= c==> ! c==> c~ c= f0 b0 c= cCARD * * part cINSERT f0 * * part cINSERT b0 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 * / c==> c~ c= f0 b0 c= cCARD * * part cINSERT f0 * * part cINSERT b0 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 f1 * / c==> c~ c= f0 b0 c= cCARD * * part cINSERT f0 * * part cINSERT b0 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 f1
+ (((dart_nondegenerate H) x) /\ (((node_map H) x) IN ((edge H) x))), (x IN (dart H)), ((is_edge_split H) x) |- ((((edge_set H) DIFF (((edge H) x) INSERT (((edge H) ((node_map H) x)) INSERT EMPTY))) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) ==> (((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x)))))
T c==> c/\ cdart_nondegenerate f0 f1 cIN cnode_map f0 f1 * * part cedge f0 f1 c==> cIN f1 * part cdart f0 c==> cis_edge_split f0 f1 c==> c= * * part cDIFF * part cedge_set f0 * * part cINSERT * * part cedge f0 f1 * * part cINSERT * * part cedge f0 cnode_map f0 f1 part cEMPTY * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY c= c+ cCARD * part cedge_set f0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1
- (x = ((inverse (edge_map H)) x)) |- (((inverse (edge_map H)) x) = x)
T c==> c= f0 cinverse * part cedge_map f1 f0 c= cinverse * part cedge_map f1 f0 f0
- (~ (((inverse (edge_map H)) x) = x)) |- (~ (x = ((inverse (edge_map H)) x)))
T c==> c~ c= cinverse * part cedge_map f0 f1 f1 c~ c= f1 cinverse * part cedge_map f0 f1
- (!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))) |- ((\y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))) y)
T c==> ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY * / c==> c/\ cFINITE f0 c/\ cIN f1 f0 cIN b0 f0 c= cCARD f0 c+ cCARD * * part cDIFF f0 * * part cINSERT f1 * * part cINSERT b0 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT b0 part cEMPTY f2
+ (((edge_set H) DELETE ((edge H) x)) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))), (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- ((((CARD ((edge_set H) DELETE ((edge H) x))) + (NUMERAL (BIT1 _0))) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x))))
T c==> c= * * part cDELETE * part cedge_set f0 * * part cedge f0 f1 * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY c==> cIN f1 * part cdart f0 c==> cdart_nondegenerate f0 f1 c==> cis_edge_split f0 f1 c= c+ c+ cCARD * * part cDELETE * part cedge_set f0 * * part cedge f0 f1 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1
- |- (((!x. (((x IN (dart H)) = (((edge H) x) IN (edge_set H))) /\ (((x IN (dart H)) = (((node H) x) IN (node_set H))) /\ ((x IN (dart H)) = (((face H) x) IN (face_set H)))))) ==> ((\x. (((x IN (dart H)) = (((edge H) x) IN (edge_set H))) /\ (((x IN (dart H)) = (((node H) x) IN (node_set H))) /\ ((x IN (dart H)) = (((face H) x) IN (face_set H)))))) x)) = ((\x. (((x IN (dart H)) = (((edge H) x) IN (edge_set H))) /\ (((x IN (dart H)) = (((node H) x) IN (node_set H))) /\ ((x IN (dart H)) = (((face H) x) IN (face_set H)))))) x))
T c= c==> ! c/\ c= cIN b0 * part cdart f0 cIN * * part cedge f0 b0 * part cedge_set f0 c/\ c= cIN b0 * part cdart f0 cIN * * part cnode f0 b0 * part cnode_set f0 c= cIN b0 * part cdart f0 cIN * * part cface f0 b0 * part cface_set f0 * / c/\ c= cIN b0 * part cdart f0 cIN * * part cedge f0 b0 * part cedge_set f0 c/\ c= cIN b0 * part cdart f0 cIN * * part cnode f0 b0 * part cnode_set f0 c= cIN b0 * part cdart f0 cIN * * part cface f0 b0 * part cface_set f0 f1 * / c/\ c= cIN b0 * part cdart f0 cIN * * part cedge f0 b0 * part cedge_set f0 c/\ c= cIN b0 * part cdart f0 cIN * * part cnode f0 b0 * part cnode_set f0 c= cIN b0 * part cdart f0 cIN * * part cface f0 b0 * part cface_set f0 f1
+ |- ((((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) = (~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x))))) ==> (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> ((((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) = q')) ==> (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))) = ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> q')))) = (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> ((((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) = q')) ==> (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))) = ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> q'))))
T c= c==> c= c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 c==> c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 c= cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 f2 c= c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 f2 c==> c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 c= cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 f2 c= c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 f2
+ |- ((\x. (((dart_nondegenerate H) x) ==> ((~ (((inverse (edge_map H)) x) = x)) /\ ((~ (((inverse (node_map H)) x) = x)) /\ (~ (((inverse (face_map H)) x) = x)))))) x)
T * / c==> cdart_nondegenerate f0 b0 c/\ c~ c= cinverse * part cedge_map f0 b0 b0 c/\ c~ c= cinverse * part cnode_map f0 b0 b0 c~ c= cinverse * part cface_map f0 b0 b0 f1
+ |- ((((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) ==> ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))))
T c==> cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1
+ |- ((\x. (!y. ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y)))))))) x)
T * / ! c/\ c= cedge_map cedge_walkup f0 b0 b0 b0 c/\ c==> c/\ c~ c= cnode_map f0 b0 b0 c~ c= cedge_map f0 b0 b0 c= cedge_map cedge_walkup f0 b0 cnode_map f0 b0 cedge_map f0 b0 c/\ c==> c/\ c~ c= cinverse * part cface_map f0 b0 b0 c~ c= cinverse * part cedge_map f0 b0 b0 c= cedge_map cedge_walkup f0 b0 cinverse * part cedge_map f0 b0 cinverse * part cface_map f0 b0 c==> c/\ c~ c= b1 b0 c/\ c~ c= b1 cinverse * part cedge_map f0 b0 c~ c= b1 cnode_map f0 b0 c= cedge_map cedge_walkup f0 b0 b1 cedge_map f0 b1 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((\x. (((dart_nondegenerate H) x) = ((~ (((edge_map H) x) = x)) /\ ((~ (((node_map H) x) = x)) /\ (~ (((face_map H) x) = x)))))) x)
T * / c= cdart_nondegenerate f0 b0 c/\ c~ c= cedge_map f0 b0 b0 c/\ c~ c= cnode_map f0 b0 b0 c~ c= cface_map f0 b0 b0 f1
+ |- ((t ==> T) = T)
T c= c==> f0 cT cT
- |- ((\x. (((x IN (dart H)) = (((edge H) x) IN (edge_set H))) /\ (((x IN (dart H)) = (((node H) x) IN (node_set H))) /\ ((x IN (dart H)) = (((face H) x) IN (face_set H)))))) x)
T * / c/\ c= cIN b0 * part cdart f0 cIN * * part cedge f0 b0 * part cedge_set f0 c/\ c= cIN b0 * part cdart f0 cIN * * part cnode f0 b0 * part cnode_set f0 c= cIN b0 * part cdart f0 cIN * * part cface f0 b0 * part cface_set f0 f1
+ |- (T = ((((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) ==> ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))))))
T c= cT c==> cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1
+ (((edge ((edge_walkup H) x)) ((node_map H) x)) IN (edge_set ((edge_walkup H) x))) |- ((((edge ((edge_walkup H) x)) ((node_map H) x)) IN (edge_set ((edge_walkup H) x))) = T)
T c==> cIN * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * part cedge_set cedge_walkup f0 f1 c= cIN * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * part cedge_set cedge_walkup f0 f1 cT
+ |- ((\p'. (!q'. (((((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) = p') ==> ((p' ==> (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))) = q')) ==> (((((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) ==> ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))))) = (p' ==> q')))))) p')
T * / ! c==> c= cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 b0 c==> c==> b0 c= c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 b1 c= c==> cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> b0 b1 f2
+ |- (((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) ==> ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0)))))) = ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0))))))
T c= c==> c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
- |- (((!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))) ==> (!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY)))))))))) = (!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))))
T c= c==> ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY
+ |- ((\H. (!x. (((orbit_map (edge_map H)) x) = ((edge H) x)))) H)
T * / ! c= * * part corbit_map * part cedge_map b0 b1 * * part cedge b0 b1 f0
+ |- (!x. (((FINITE (edge_set H)) /\ (x IN (edge_set H))) ==> ((CARD (edge_set H)) = ((CARD ((edge_set H) DELETE x)) + (NUMERAL (BIT1 _0))))))
T c==> c/\ cFINITE * part cedge_set f0 cIN f1 * part cedge_set f0 c= cCARD * part cedge_set f0 c+ cCARD * * part cDELETE * part cedge_set f0 f1 cNUMERAL cBIT1 c_0
+ |- (!y. ((y = (((POWER (edge_map ((edge_walkup H) x))) (NUMERAL (BIT1 _0))) ((inverse (edge_map H)) x))) ==> (y IN ((orbit_map (edge_map ((edge_walkup H) x))) ((inverse (edge_map H)) x)))))
T c==> c= f0 cPOWER * part cedge_map cedge_walkup f1 f2 cNUMERAL cBIT1 c_0 cinverse * part cedge_map f1 f2 cIN f0 * * part corbit_map * part cedge_map cedge_walkup f1 f2 cinverse * part cedge_map f1 f2
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ ((((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT1 _0))) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x)))) |- ((CARD (edge_set ((edge_walkup H) x))) = (((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT1 _0))) + (NUMERAL (BIT1 _0))))
T c==> c= c+ c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0
+ |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
+ (x IN (dart H)), ((is_edge_split H) x) |- (((x IN (dart H)) ==> (((edge_set H) DIFF (((edge H) x) INSERT (((edge H) ((node_map H) x)) INSERT EMPTY))) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY))))) ==> (((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x)))))
T c==> cIN f0 * part cdart f1 c==> cis_edge_split f1 f0 c==> c==> cIN f0 * part cdart f1 c= * * part cDIFF * part cedge_set f1 * * part cINSERT * * part cedge f1 f0 * * part cINSERT * * part cedge f1 cnode_map f1 f0 part cEMPTY * * part cDIFF * part cedge_set cedge_walkup f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cinverse * part cedge_map f1 f0 part cEMPTY c= c+ cCARD * part cedge_set f1 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f1 f0
+ |- (((!H. (!x. (((x IN (dart H)) /\ ((is_edge_split H) x)) ==> ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) /\ (((edge H) x) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x))))))))) ==> ((\H. (!x. (((x IN (dart H)) /\ ((is_edge_split H) x)) ==> ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) /\ (((edge H) x) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x))))))))) H)) = ((\H. (!x. (((x IN (dart H)) /\ ((is_edge_split H) x)) ==> ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) /\ (((edge H) x) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x))))))))) H))
T c= c==> ! ! c==> c/\ cIN b1 * part cdart b0 cis_edge_split b0 b1 c/\ c~ cIN cinverse * part cface_map b0 b1 * * part cedge cedge_walkup b0 b1 cnode_map b0 b1 c= * * part cedge b0 b1 * * part cUNION * * part cINSERT b1 part cEMPTY * * part cUNION * * part cedge cedge_walkup b0 b1 cnode_map b0 b1 * * part cedge cedge_walkup b0 b1 cinverse * part cface_map b0 b1 * / ! c==> c/\ cIN b1 * part cdart b0 cis_edge_split b0 b1 c/\ c~ cIN cinverse * part cface_map b0 b1 * * part cedge cedge_walkup b0 b1 cnode_map b0 b1 c= * * part cedge b0 b1 * * part cUNION * * part cINSERT b1 part cEMPTY * * part cUNION * * part cedge cedge_walkup b0 b1 cnode_map b0 b1 * * part cedge cedge_walkup b0 b1 cinverse * part cface_map b0 b1 f0 * / ! c==> c/\ cIN b1 * part cdart b0 cis_edge_split b0 b1 c/\ c~ cIN cinverse * part cface_map b0 b1 * * part cedge cedge_walkup b0 b1 cnode_map b0 b1 c= * * part cedge b0 b1 * * part cUNION * * part cINSERT b1 part cEMPTY * * part cUNION * * part cedge cedge_walkup b0 b1 cnode_map b0 b1 * * part cedge cedge_walkup b0 b1 cinverse * part cface_map b0 b1 f0
+ (~ (((face_map H) x) = x)), (x IN (dart H)) |- ((x IN (dart H)) /\ (~ (((face_map H) x) = x)))
T c==> c~ c= cface_map f0 f1 f1 c==> cIN f1 * part cdart f0 c/\ cIN f1 * part cdart f0 c~ c= cface_map f0 f1 f1
+ (~ (((inverse (edge_map H)) x) = x)) |- ((((inverse (edge_map H)) x) = x) = F)
T c==> c~ c= cinverse * part cedge_map f0 f1 f1 c= c= cinverse * part cedge_map f0 f1 f1 cF
+ (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0))))))
T c==> cIN f0 * part cdart f1 c==> cdart_nondegenerate f1 f0 c==> cis_edge_split f1 f0 c==> c~ cIN cinverse * part cface_map f1 f0 * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 c= cCARD * part cedge_set cedge_walkup f1 f0 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cinverse * part cface_map f1 f0 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
- (~ (((inverse (node_map H)) x) = x)) |- (~ (x = ((inverse (node_map H)) x)))
T c==> c~ c= cinverse * part cnode_map f0 f1 f1 c~ c= f1 cinverse * part cnode_map f0 f1
- |- ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)
T * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
+ (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x))), (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0)))))
T c==> c= * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 c==> cIN f1 * part cdart f0 c==> cdart_nondegenerate f0 f1 c==> cis_edge_split f0 f1 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
+ (~ (((face_map H) x) = x)), (x IN (dart H)), (((edge ((edge_walkup H) x)) ((node_map H) x)) IN (edge_set ((edge_walkup H) x))) |- ((((edge ((edge_walkup H) x)) ((node_map H) x)) IN (edge_set ((edge_walkup H) x))) /\ ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> ((((edge ((edge_walkup H) x)) ((node_map H) x)) IN (edge_set ((edge_walkup H) x))) /\ (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))))))
T c==> c~ c= cface_map f0 f1 f1 c==> cIN f1 * part cdart f0 c==> cIN * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * part cedge_set cedge_walkup f0 f1 c/\ cIN * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 c/\ cIN * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * part cedge_set cedge_walkup f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1
- |- ((((int_add (int_of_num k)) (int_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((int_add (int_of_num k)) (int_of_num (NUMERAL (BIT0 (BIT1 _0)))))) = (((k + (NUMERAL (BIT1 _0))) + (NUMERAL (BIT1 _0))) = (k + (NUMERAL (BIT0 (BIT1 _0))))))
T c= c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 c= c+ c+ f0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 c+ f0 cNUMERAL cBIT0 cBIT1 c_0
- |- (((real_mul (real_of_num m)) (real_of_num n)) = (real_of_num (m * n)))
T c= creal_mul creal_of_num f0 creal_of_num f1 creal_of_num c* f0 f1
+ |- (((!H. (!x. (((dart_nondegenerate H) x) = ((~ (((edge_map H) x) = x)) /\ ((~ (((node_map H) x) = x)) /\ (~ (((face_map H) x) = x))))))) ==> ((\H. (!x. (((dart_nondegenerate H) x) = ((~ (((edge_map H) x) = x)) /\ ((~ (((node_map H) x) = x)) /\ (~ (((face_map H) x) = x))))))) H)) = ((\H. (!x. (((dart_nondegenerate H) x) = ((~ (((edge_map H) x) = x)) /\ ((~ (((node_map H) x) = x)) /\ (~ (((face_map H) x) = x))))))) H))
T c= c==> ! ! c= cdart_nondegenerate b0 b1 c/\ c~ c= cedge_map b0 b1 b1 c/\ c~ c= cnode_map b0 b1 b1 c~ c= cface_map b0 b1 b1 * / ! c= cdart_nondegenerate b0 b1 c/\ c~ c= cedge_map b0 b1 b1 c/\ c~ c= cnode_map b0 b1 b1 c~ c= cface_map b0 b1 b1 f0 * / ! c= cdart_nondegenerate b0 b1 c/\ c~ c= cedge_map b0 b1 b1 c/\ c~ c= cnode_map b0 b1 b1 c~ c= cface_map b0 b1 b1 f0
+ (((edge_set H) DELETE ((edge H) x)) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) |- (((((CARD ((edge_set H) DELETE ((edge H) x))) + (NUMERAL (BIT1 _0))) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x)))) = ((((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT1 _0))) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x)))))
T c==> c= * * part cDELETE * part cedge_set f0 * * part cedge f0 f1 * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY c= c= c+ c+ cCARD * * part cDELETE * part cedge_set f0 * * part cedge f0 f1 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1 c= c+ c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1
- |- (((NUMERAL (BIT1 _0)) = (NUMERAL _0)) = F)
T c= c= cNUMERAL cBIT1 c_0 cNUMERAL c_0 cF
+ (~ (((node_map H) x) = x)), (x IN (dart H)) |- ((((x IN (dart H)) /\ (~ (((node_map H) x) = x))) ==> ((((node_map H) x) IN (dart ((edge_walkup H) x))) /\ (((inverse (node_map H)) x) IN (dart ((edge_walkup H) x))))) = ((((node_map H) x) IN (dart ((edge_walkup H) x))) /\ (((inverse (node_map H)) x) IN (dart ((edge_walkup H) x)))))
T c==> c~ c= cnode_map f0 f1 f1 c==> cIN f1 * part cdart f0 c= c==> c/\ cIN f1 * part cdart f0 c~ c= cnode_map f0 f1 f1 c/\ cIN cnode_map f0 f1 * part cdart cedge_walkup f0 f1 cIN cinverse * part cnode_map f0 f1 * part cdart cedge_walkup f0 f1 c/\ cIN cnode_map f0 f1 * part cdart cedge_walkup f0 f1 cIN cinverse * part cnode_map f0 f1 * part cdart cedge_walkup f0 f1
+ (~ (((face_map H) x) = x)), (x IN (dart H)) |- ((((node_map H) x) IN (dart ((edge_walkup H) x))) ==> ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> ((((edge ((edge_walkup H) x)) ((node_map H) x)) IN (edge_set ((edge_walkup H) x))) /\ (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))))))
T c==> c~ c= cface_map f0 f1 f1 c==> cIN f1 * part cdart f0 c==> cIN cnode_map f0 f1 * part cdart cedge_walkup f0 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 c/\ cIN * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * part cedge_set cedge_walkup f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1
+ |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
+ (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x)), (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0)))))
T c==> c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c==> cIN f1 * part cdart f0 c==> cdart_nondegenerate f0 f1 c==> cis_edge_split f0 f1 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
+ |- ((!x. t) = t)
T c= ! f0 f0
+ |- (((!H. (!x. (((is_edge_split H) x) = (((dart_nondegenerate H) x) /\ (((node_map H) x) IN ((edge H) x)))))) ==> ((\H. (!x. (((is_edge_split H) x) = (((dart_nondegenerate H) x) /\ (((node_map H) x) IN ((edge H) x)))))) H)) = ((\H. (!x. (((is_edge_split H) x) = (((dart_nondegenerate H) x) /\ (((node_map H) x) IN ((edge H) x)))))) H))
T c= c==> ! ! c= cis_edge_split b0 b1 c/\ cdart_nondegenerate b0 b1 cIN cnode_map b0 b1 * * part cedge b0 b1 * / ! c= cis_edge_split b0 b1 c/\ cdart_nondegenerate b0 b1 cIN cnode_map b0 b1 * * part cedge b0 b1 f0 * / ! c= cis_edge_split b0 b1 c/\ cdart_nondegenerate b0 b1 cIN cnode_map b0 b1 * * part cedge b0 b1 f0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (x IN (dart H)), ((is_edge_split H) x) |- ((((x IN (dart H)) /\ ((is_edge_split H) x)) ==> ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) /\ (((edge H) x) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x))))))) = ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) /\ (((edge H) x) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)))))))
T c==> cIN f0 * part cdart f1 c==> cis_edge_split f1 f0 c= c==> c/\ cIN f0 * part cdart f1 cis_edge_split f1 f0 c/\ c~ cIN cinverse * part cface_map f1 f0 * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 c= * * part cedge f1 f0 * * part cUNION * * part cINSERT f0 part cEMPTY * * part cUNION * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cedge cedge_walkup f1 f0 cinverse * part cface_map f1 f0 c/\ c~ cIN cinverse * part cface_map f1 f0 * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 c= * * part cedge f1 f0 * * part cUNION * * part cINSERT f0 part cEMPTY * * part cUNION * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cedge cedge_walkup f1 f0 cinverse * part cface_map f1 f0
- |- ((int_of_num (m + n)) = ((int_add (int_of_num m)) (int_of_num n)))
T c= cint_of_num c+ f0 f1 cint_add cint_of_num f0 cint_of_num f1
+ |- (((!H. (!x. (!y. ((y IN ((edge H) x)) ==> (((edge H) x) = ((edge H) y)))))) ==> ((\H. (!x. (!y. ((y IN ((edge H) x)) ==> (((edge H) x) = ((edge H) y)))))) H)) = ((\H. (!x. (!y. ((y IN ((edge H) x)) ==> (((edge H) x) = ((edge H) y)))))) H))
T c= c==> ! ! ! c==> cIN b2 * * part cedge b0 b1 c= * * part cedge b0 b1 * * part cedge b0 b2 * / ! ! c==> cIN b2 * * part cedge b0 b1 c= * * part cedge b0 b1 * * part cedge b0 b2 f0 * / ! ! c==> cIN b2 * * part cedge b0 b1 c= * * part cedge b0 b1 * * part cedge b0 b2 f0
+ |- (((((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) ==> ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))))) = ((((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) ==> T))
T c= c==> cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 cT
+ |- (T = (!x. ((x IN (s DIFF (a INSERT (a INSERT EMPTY)))) = (x IN (s DELETE a)))))
T c= cT ! c= cIN b0 * * part cDIFF f0 * * part cINSERT f1 * * part cINSERT f1 part cEMPTY cIN b0 * * part cDELETE f0 f1
- |- (((real_add (real_of_num m)) (real_neg (real_of_num m))) = (real_of_num (NUMERAL _0)))
T c= creal_add creal_of_num f0 creal_neg creal_of_num f0 creal_of_num cNUMERAL c_0
+ (~ (((face_map H) x) = x)), (x IN (dart H)) |- ((((edge ((edge_walkup H) x)) ((node_map H) x)) IN (edge_set ((edge_walkup H) x))) ==> ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> ((((edge ((edge_walkup H) x)) ((node_map H) x)) IN (edge_set ((edge_walkup H) x))) /\ (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))))))
T c==> c~ c= cface_map f0 f1 f1 c==> cIN f1 * part cdart f0 c==> cIN * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 c/\ cIN * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * part cedge_set cedge_walkup f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1
+ (~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))), (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) |- ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) /\ ((((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) = T))
T c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 c==> cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c/\ c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 c= cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 cT
+ |- (((!x. (((orbit_map (edge_map H)) x) = ((edge H) x))) ==> ((\x. (((orbit_map (edge_map H)) x) = ((edge H) x))) x)) = ((\x. (((orbit_map (edge_map H)) x) = ((edge H) x))) x))
T c= c==> ! c= * * part corbit_map * part cedge_map f0 b0 * * part cedge f0 b0 * / c= * * part corbit_map * part cedge_map f0 b0 * * part cedge f0 b0 f1 * / c= * * part corbit_map * part cedge_map f0 b0 * * part cedge f0 b0 f1
+ (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) |- (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))) = ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> T))
T c==> cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c= c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cT
+ (~ (((node_map H) x) = x)), (x IN (dart H)) |- ((x IN (dart H)) /\ (~ (((node_map H) x) = x)))
T c==> c~ c= cnode_map f0 f1 f1 c==> cIN f1 * part cdart f0 c/\ cIN f1 * part cdart f0 c~ c= cnode_map f0 f1 f1
+ |- ((((~ (((edge_map H) x) = x)) /\ ((~ (((node_map H) x) = x)) /\ (~ (((face_map H) x) = x)))) ==> ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> ((((edge ((edge_walkup H) x)) ((node_map H) x)) IN (edge_set ((edge_walkup H) x))) /\ (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))))) = (((dart_nondegenerate H) x) ==> ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> ((((edge ((edge_walkup H) x)) ((node_map H) x)) IN (edge_set ((edge_walkup H) x))) /\ (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))))))
T c= c==> c/\ c~ c= cedge_map f0 f1 f1 c/\ c~ c= cnode_map f0 f1 f1 c~ c= cface_map f0 f1 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 c/\ cIN * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * part cedge_set cedge_walkup f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> cdart_nondegenerate f0 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 c/\ cIN * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * part cedge_set cedge_walkup f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1
+ (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- (((CARD (edge_set H)) = ((CARD ((edge_set H) DELETE ((edge H) x))) + (NUMERAL (BIT1 _0)))) ==> ((((edge_set H) DELETE ((edge H) x)) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) ==> (((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x))))))
T c==> cIN f0 * part cdart f1 c==> cdart_nondegenerate f1 f0 c==> cis_edge_split f1 f0 c==> c= cCARD * part cedge_set f1 c+ cCARD * * part cDELETE * part cedge_set f1 * * part cedge f1 f0 cNUMERAL cBIT1 c_0 c==> c= * * part cDELETE * part cedge_set f1 * * part cedge f1 f0 * * part cDIFF * part cedge_set cedge_walkup f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cinverse * part cedge_map f1 f0 part cEMPTY c= c+ cCARD * part cedge_set f1 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f1 f0
+ (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- ((((edge_set H) DELETE ((edge H) x)) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) ==> (((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x)))))
T c==> cIN f0 * part cdart f1 c==> cdart_nondegenerate f1 f0 c==> cis_edge_split f1 f0 c==> c= * * part cDELETE * part cedge_set f1 * * part cedge f1 f0 * * part cDIFF * part cedge_set cedge_walkup f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cinverse * part cedge_map f1 f0 part cEMPTY c= c+ cCARD * part cedge_set f1 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f1 f0
+ (((edge_set H) DELETE ((edge H) x)) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) |- (((((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT1 _0))) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x)))) = ((((CARD ((edge_set H) DELETE ((edge H) x))) + (NUMERAL (BIT1 _0))) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x)))))
T c==> c= * * part cDELETE * part cedge_set f0 * * part cedge f0 f1 * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY c= c= c+ c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1 c= c+ c+ cCARD * * part cDELETE * part cedge_set f0 * * part cedge f0 f1 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (((dart_nondegenerate H) x) /\ (((node_map H) x) IN ((edge H) x))), (x IN (dart H)), ((is_edge_split H) x) |- ((((dart_nondegenerate H) x) /\ (((node_map H) x) IN ((edge H) x))) /\ ((((edge_set H) DIFF (((edge H) x) INSERT (((edge H) ((node_map H) x)) INSERT EMPTY))) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) ==> (((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x))))))
T c==> c/\ cdart_nondegenerate f0 f1 cIN cnode_map f0 f1 * * part cedge f0 f1 c==> cIN f1 * part cdart f0 c==> cis_edge_split f0 f1 c/\ c/\ cdart_nondegenerate f0 f1 cIN cnode_map f0 f1 * * part cedge f0 f1 c==> c= * * part cDIFF * part cedge_set f0 * * part cINSERT * * part cedge f0 f1 * * part cINSERT * * part cedge f0 cnode_map f0 f1 part cEMPTY * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY c= c+ cCARD * part cedge_set f0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1
+ ((dart_nondegenerate H) x) |- ((((~ (((inverse (edge_map H)) x) = x)) /\ ((~ (((inverse (node_map H)) x) = x)) /\ (~ (((inverse (face_map H)) x) = x)))) ==> ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) ==> ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0))))))) = ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) ==> ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0)))))))
T c==> cdart_nondegenerate f0 f1 c= c==> c/\ c~ c= cinverse * part cedge_map f0 f1 f1 c/\ c~ c= cinverse * part cnode_map f0 f1 f1 c~ c= cinverse * part cface_map f0 f1 f1 c==> c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c==> c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- ((((edge H) x) IN (edge_set H)) ==> ((((edge_set H) DELETE ((edge H) x)) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) ==> (((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x))))))
T c==> cIN f0 * part cdart f1 c==> cdart_nondegenerate f1 f0 c==> cis_edge_split f1 f0 c==> cIN * * part cedge f1 f0 * part cedge_set f1 c==> c= * * part cDELETE * part cedge_set f1 * * part cedge f1 f0 * * part cDIFF * part cedge_set cedge_walkup f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cinverse * part cedge_map f1 f0 part cEMPTY c= c+ cCARD * part cedge_set f1 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f1 f0
+ (((node_map H) x) IN ((edge H) x)) |- (((((edge H) x) = ((edge H) ((node_map H) x))) ==> ((((edge_set H) DIFF (((edge H) x) INSERT (((edge H) ((node_map H) x)) INSERT EMPTY))) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) ==> (((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x)))))) = ((((edge_set H) DIFF (((edge H) x) INSERT (((edge H) ((node_map H) x)) INSERT EMPTY))) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) ==> (((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x))))))
T c==> cIN cnode_map f0 f1 * * part cedge f0 f1 c= c==> c= * * part cedge f0 f1 * * part cedge f0 cnode_map f0 f1 c==> c= * * part cDIFF * part cedge_set f0 * * part cINSERT * * part cedge f0 f1 * * part cINSERT * * part cedge f0 cnode_map f0 f1 part cEMPTY * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY c= c+ cCARD * part cedge_set f0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1 c==> c= * * part cDIFF * part cedge_set f0 * * part cINSERT * * part cedge f0 f1 * * part cINSERT * * part cedge f0 cnode_map f0 f1 part cEMPTY * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY c= c+ cCARD * part cedge_set f0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1
+ (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) |- ((((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) = T)
T c==> cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c= cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 cT
+ (~ (((node_map H) x) = x)), (x IN (dart H)) |- ((((node_map H) x) IN (dart ((edge_walkup H) x))) /\ (((inverse (node_map H)) x) IN (dart ((edge_walkup H) x))))
T c==> c~ c= cnode_map f0 f1 f1 c==> cIN f1 * part cdart f0 c/\ cIN cnode_map f0 f1 * part cdart cedge_walkup f0 f1 cIN cinverse * part cnode_map f0 f1 * part cdart cedge_walkup f0 f1
+ (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) |- ((((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) /\ (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))) = T))
T c==> cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c/\ cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c= c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 cT
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
+ (((edge ((edge_walkup H) x)) ((node_map H) x)) IN (edge_set ((edge_walkup H) x))) |- (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))) = ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> ((((edge ((edge_walkup H) x)) ((node_map H) x)) IN (edge_set ((edge_walkup H) x))) /\ (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))))))
T c==> cIN * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * part cedge_set cedge_walkup f0 f1 c= c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 c/\ cIN * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * part cedge_set cedge_walkup f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1
+ |- (((!x. ((x IN (dart H)) ==> (((edge_set H) DIFF (((edge H) x) INSERT (((edge H) ((node_map H) x)) INSERT EMPTY))) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))))) ==> ((\x. ((x IN (dart H)) ==> (((edge_set H) DIFF (((edge H) x) INSERT (((edge H) ((node_map H) x)) INSERT EMPTY))) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))))) x)) = ((\x. ((x IN (dart H)) ==> (((edge_set H) DIFF (((edge H) x) INSERT (((edge H) ((node_map H) x)) INSERT EMPTY))) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))))) x))
T c= c==> ! c==> cIN b0 * part cdart f0 c= * * part cDIFF * part cedge_set f0 * * part cINSERT * * part cedge f0 b0 * * part cINSERT * * part cedge f0 cnode_map f0 b0 part cEMPTY * * part cDIFF * part cedge_set cedge_walkup f0 b0 * * part cINSERT * * part cedge cedge_walkup f0 b0 cnode_map f0 b0 * * part cINSERT * * part cedge cedge_walkup f0 b0 cinverse * part cedge_map f0 b0 part cEMPTY * / c==> cIN b0 * part cdart f0 c= * * part cDIFF * part cedge_set f0 * * part cINSERT * * part cedge f0 b0 * * part cINSERT * * part cedge f0 cnode_map f0 b0 part cEMPTY * * part cDIFF * part cedge_set cedge_walkup f0 b0 * * part cINSERT * * part cedge cedge_walkup f0 b0 cnode_map f0 b0 * * part cINSERT * * part cedge cedge_walkup f0 b0 cinverse * part cedge_map f0 b0 part cEMPTY f1 * / c==> cIN b0 * part cdart f0 c= * * part cDIFF * part cedge_set f0 * * part cINSERT * * part cedge f0 b0 * * part cINSERT * * part cedge f0 cnode_map f0 b0 part cEMPTY * * part cDIFF * part cedge_set cedge_walkup f0 b0 * * part cINSERT * * part cedge cedge_walkup f0 b0 cnode_map f0 b0 * * part cINSERT * * part cedge cedge_walkup f0 b0 cinverse * part cedge_map f0 b0 part cEMPTY f1
+ |- (((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0))))) = ((CARD (edge_set ((edge_walkup H) x))) = (((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT1 _0))) + (NUMERAL (BIT1 _0)))))
T c= c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0
- |- ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))
T c= c\/ f0 c\/ f1 f2 c\/ c\/ f0 f1 f2
+ |- (!x. ((x IN (s DIFF (a INSERT (a INSERT EMPTY)))) = (x IN (s DELETE a))))
T c= cIN f0 * * part cDIFF f1 * * part cINSERT f2 * * part cINSERT f2 part cEMPTY cIN f0 * * part cDELETE f1 f2
+ (x IN (dart H)), ((is_edge_split H) x) |- (((is_edge_split H) x) ==> ((((edge_set H) DIFF (((edge H) x) INSERT (((edge H) ((node_map H) x)) INSERT EMPTY))) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) ==> (((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x))))))
T c==> cIN f0 * part cdart f1 c==> cis_edge_split f1 f0 c==> cis_edge_split f1 f0 c==> c= * * part cDIFF * part cedge_set f1 * * part cINSERT * * part cedge f1 f0 * * part cINSERT * * part cedge f1 cnode_map f1 f0 part cEMPTY * * part cDIFF * part cedge_set cedge_walkup f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cinverse * part cedge_map f1 f0 part cEMPTY c= c+ cCARD * part cedge_set f1 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f1 f0
- (!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))) |- ((((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY)))))) = T)
T c==> ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY c= c==> c/\ cFINITE f0 c/\ cIN f1 f0 cIN f2 f0 c= cCARD f0 c+ cCARD * * part cDIFF f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cT
- (~ (((inverse (node_map H)) x) = x)) |- (((~ (x = ((inverse (node_map H)) x))) ==> ((x = ((inverse (node_map H)) x)) = F)) = ((x = ((inverse (node_map H)) x)) = F))
T c==> c~ c= cinverse * part cnode_map f0 f1 f1 c= c==> c~ c= f1 cinverse * part cnode_map f0 f1 c= c= f1 cinverse * part cnode_map f0 f1 cF c= c= f1 cinverse * part cnode_map f0 f1 cF
+ ((~ (((inverse (edge_map H)) x) = x)) /\ ((~ (((inverse (node_map H)) x) = x)) /\ (~ (((inverse (face_map H)) x) = x)))), (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) ==> ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0))))))
T c==> c/\ c~ c= cinverse * part cedge_map f0 f1 f1 c/\ c~ c= cinverse * part cnode_map f0 f1 f1 c~ c= cinverse * part cface_map f0 f1 f1 c==> cIN f1 * part cdart f0 c==> cdart_nondegenerate f0 f1 c==> cis_edge_split f0 f1 c==> c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
+ |- ((\p'. (!q'. (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) = p') ==> ((p' ==> ((((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) = q')) ==> (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))) = (p' ==> q')))))) p')
T * / ! c==> c= c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 b0 c==> c==> b0 c= cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 b1 c= c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> b0 b1 f2
- |- (((real_mul (real_neg (real_of_num x))) (real_of_num (NUMERAL _0))) = (real_of_num (NUMERAL _0)))
T c= creal_mul creal_neg creal_of_num f0 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
- |- ((FINITE (face_set H)) = T)
T c= cFINITE * part cface_set f0 cT
- ((dart_nondegenerate H) x) |- (((dart_nondegenerate H) x) = T)
T c==> cdart_nondegenerate f0 f1 c= cdart_nondegenerate f0 f1 cT
+ |- (((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x)))
T c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1
+ |- (((!H. (!x. (((orbit_map (edge_map H)) x) = ((edge H) x)))) ==> ((\H. (!x. (((orbit_map (edge_map H)) x) = ((edge H) x)))) H)) = ((\H. (!x. (((orbit_map (edge_map H)) x) = ((edge H) x)))) H))
T c= c==> ! ! c= * * part corbit_map * part cedge_map b0 b1 * * part cedge b0 b1 * / ! c= * * part corbit_map * part cedge_map b0 b1 * * part cedge b0 b1 f0 * / ! c= * * part corbit_map * part cedge_map b0 b1 * * part cedge b0 b1 f0
+ |- (((((FINITE (edge_set H)) /\ (((edge H) x) IN (edge_set H))) ==> ((CARD (edge_set H)) = ((CARD ((edge_set H) DELETE ((edge H) x))) + (NUMERAL (BIT1 _0))))) ==> ((((edge_set H) DELETE ((edge H) x)) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) ==> (((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x)))))) = ((((edge_set H) DELETE ((edge H) x)) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) ==> (((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x))))))
T c= c==> c==> c/\ cFINITE * part cedge_set f0 cIN * * part cedge f0 f1 * part cedge_set f0 c= cCARD * part cedge_set f0 c+ cCARD * * part cDELETE * part cedge_set f0 * * part cedge f0 f1 cNUMERAL cBIT1 c_0 c==> c= * * part cDELETE * part cedge_set f0 * * part cedge f0 f1 * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY c= c+ cCARD * part cedge_set f0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1 c==> c= * * part cDELETE * part cedge_set f0 * * part cedge f0 f1 * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY c= c+ cCARD * part cedge_set f0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1
+ |- (((((dart_nondegenerate H) x) /\ (((node_map H) x) IN ((edge H) x))) ==> ((((edge_set H) DIFF (((edge H) x) INSERT (((edge H) ((node_map H) x)) INSERT EMPTY))) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) ==> (((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x)))))) = (((is_edge_split H) x) ==> ((((edge_set H) DIFF (((edge H) x) INSERT (((edge H) ((node_map H) x)) INSERT EMPTY))) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) ==> (((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x)))))))
T c= c==> c/\ cdart_nondegenerate f0 f1 cIN cnode_map f0 f1 * * part cedge f0 f1 c==> c= * * part cDIFF * part cedge_set f0 * * part cINSERT * * part cedge f0 f1 * * part cINSERT * * part cedge f0 cnode_map f0 f1 part cEMPTY * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY c= c+ cCARD * part cedge_set f0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1 c==> cis_edge_split f0 f1 c==> c= * * part cDIFF * part cedge_set f0 * * part cINSERT * * part cedge f0 f1 * * part cINSERT * * part cedge f0 cnode_map f0 f1 part cEMPTY * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY c= c+ cCARD * part cedge_set f0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1
+ |- ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (x = x)) /\ ((~ (x = ((inverse (edge_map H)) x))) /\ (~ (x = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) x) = ((edge_map H) x)))))
T c/\ c==> c/\ c~ c= cnode_map f0 f1 f1 c~ c= cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1 c/\ c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c==> c/\ c~ c= f1 f1 c/\ c~ c= f1 cinverse * part cedge_map f0 f1 c~ c= f1 cnode_map f0 f1 c= cedge_map cedge_walkup f0 f1 f1 cedge_map f0 f1
+ (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- ((((edge_set H) DIFF (((edge H) x) INSERT (((edge H) x) INSERT EMPTY))) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) ==> (((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x)))))
T c==> cIN f0 * part cdart f1 c==> cdart_nondegenerate f1 f0 c==> cis_edge_split f1 f0 c==> c= * * part cDIFF * part cedge_set f1 * * part cINSERT * * part cedge f1 f0 * * part cINSERT * * part cedge f1 f0 part cEMPTY * * part cDIFF * part cedge_set cedge_walkup f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cinverse * part cedge_map f1 f0 part cEMPTY c= c+ cCARD * part cedge_set f1 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f1 f0
+ |- ((\x. (((FINITE (edge_set H)) /\ (x IN (edge_set H))) ==> ((CARD (edge_set H)) = ((CARD ((edge_set H) DELETE x)) + (NUMERAL (BIT1 _0)))))) ((edge H) x))
T * / c==> c/\ cFINITE * part cedge_set f0 cIN b0 * part cedge_set f0 c= cCARD * part cedge_set f0 c+ cCARD * * part cDELETE * part cedge_set f0 b0 cNUMERAL cBIT1 c_0 * * part cedge f0 f1
- |- (((real_ge x) y) = ((real_le y) x))
T c= creal_ge f0 f1 creal_le f1 f0
+ |- ((!q'. ((p = p') ==> ((p' ==> (q = q')) ==> ((p ==> q) = (p' ==> q'))))) = T)
T c= ! c==> c= f0 f1 c==> c==> f1 c= f2 b0 c= c==> f0 f2 c==> f1 b0 cT
+ (~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))), (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0)))))
T c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 c==> cIN f1 * part cdart f0 c==> cdart_nondegenerate f0 f1 c==> cis_edge_split f0 f1 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
- |- ((real_of_int ((int_add x) y)) = ((real_add (real_of_int x)) (real_of_int y)))
T c= creal_of_int cint_add f0 f1 creal_add creal_of_int f0 creal_of_int f1
+ (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- ((((FINITE (edge_set ((edge_walkup H) x))) /\ ((((edge ((edge_walkup H) x)) ((node_map H) x)) IN (edge_set ((edge_walkup H) x))) /\ (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))))) ==> ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) INSERT EMPTY)))) + (CARD (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) INSERT EMPTY)))))) = ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) INSERT EMPTY)))) + (CARD (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) INSERT EMPTY))))))
T c==> cIN f0 * part cdart f1 c==> cdart_nondegenerate f1 f0 c==> cis_edge_split f1 f0 c= c==> c/\ cFINITE * part cedge_set cedge_walkup f1 f0 c/\ cIN * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * part cedge_set cedge_walkup f1 f0 cIN * * part cedge cedge_walkup f1 f0 cinverse * part cface_map f1 f0 * part cedge_set cedge_walkup f1 f0 c= cCARD * part cedge_set cedge_walkup f1 f0 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cinverse * part cface_map f1 f0 part cEMPTY cCARD * * part cINSERT * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cinverse * part cface_map f1 f0 part cEMPTY c= cCARD * part cedge_set cedge_walkup f1 f0 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cinverse * part cface_map f1 f0 part cEMPTY cCARD * * part cINSERT * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cinverse * part cface_map f1 f0 part cEMPTY
+ (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- ((((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x))) ==> ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0))))))
T c==> cIN f0 * part cdart f1 c==> cdart_nondegenerate f1 f0 c==> cis_edge_split f1 f0 c==> cIN cinverse * part cface_map f1 f0 * * part cedge cedge_walkup f1 f0 cinverse * part cedge_map f1 f0 c= cCARD * part cedge_set cedge_walkup f1 f0 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cinverse * part cedge_map f1 f0 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((\x'. (!y. ((y = (((POWER (edge_map ((edge_walkup H) x))) (NUMERAL (BIT1 _0))) x')) ==> (y IN ((orbit_map (edge_map ((edge_walkup H) x))) x'))))) ((inverse (edge_map H)) x))
T * / ! c==> c= b1 cPOWER * part cedge_map cedge_walkup f0 f1 cNUMERAL cBIT1 c_0 b0 cIN b1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 b0 cinverse * part cedge_map f0 f1
+ |- (((!y. ((y = (((POWER (edge_map ((edge_walkup H) x))) (NUMERAL (BIT1 _0))) ((inverse (edge_map H)) x))) ==> (y IN ((orbit_map (edge_map ((edge_walkup H) x))) ((inverse (edge_map H)) x))))) ==> ((\y. ((y = (((POWER (edge_map ((edge_walkup H) x))) (NUMERAL (BIT1 _0))) ((inverse (edge_map H)) x))) ==> (y IN ((orbit_map (edge_map ((edge_walkup H) x))) ((inverse (edge_map H)) x))))) ((inverse (face_map H)) x))) = ((\y. ((y = (((POWER (edge_map ((edge_walkup H) x))) (NUMERAL (BIT1 _0))) ((inverse (edge_map H)) x))) ==> (y IN ((orbit_map (edge_map ((edge_walkup H) x))) ((inverse (edge_map H)) x))))) ((inverse (face_map H)) x)))
T c= c==> ! c==> c= b0 cPOWER * part cedge_map cedge_walkup f0 f1 cNUMERAL cBIT1 c_0 cinverse * part cedge_map f0 f1 cIN b0 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 * / c==> c= b0 cPOWER * part cedge_map cedge_walkup f0 f1 cNUMERAL cBIT1 c_0 cinverse * part cedge_map f0 f1 cIN b0 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 * / c==> c= b0 cPOWER * part cedge_map cedge_walkup f0 f1 cNUMERAL cBIT1 c_0 cinverse * part cedge_map f0 f1 cIN b0 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1
+ (~ (((inverse (edge_map H)) x) = x)), (~ (((inverse (face_map H)) x) = x)) |- (((((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x)) ==> ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0)))))) = ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) ==> ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0)))))))
T c==> c~ c= cinverse * part cedge_map f0 f1 f1 c==> c~ c= cinverse * part cface_map f0 f1 f1 c= c==> c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c==> c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
- |- (((real_div x) (real_of_num (NUMERAL (BIT1 _0)))) = x)
T c= creal_div f0 creal_of_num cNUMERAL cBIT1 c_0 f0
- |- ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)
T * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
+ |- ((\s. (!x. (((FINITE s) /\ (x IN s)) ==> ((CARD s) = ((CARD (s DELETE x)) + (NUMERAL (BIT1 _0))))))) (edge_set H))
T * / ! c==> c/\ cFINITE b0 cIN b1 b0 c= cCARD b0 c+ cCARD * * part cDELETE b0 b1 cNUMERAL cBIT1 c_0 * part cedge_set f0
+ |- ((\H. (!x. (((dart_nondegenerate H) x) ==> ((~ (((inverse (edge_map H)) x) = x)) /\ ((~ (((inverse (node_map H)) x) = x)) /\ (~ (((inverse (face_map H)) x) = x))))))) H)
T * / ! c==> cdart_nondegenerate b0 b1 c/\ c~ c= cinverse * part cedge_map b0 b1 b1 c/\ c~ c= cinverse * part cnode_map b0 b1 b1 c~ c= cinverse * part cface_map b0 b1 b1 f0
+ (~ (((inverse (edge_map H)) x) = x)), ((~ (((inverse (node_map H)) x) = x)) /\ (~ (((inverse (face_map H)) x) = x))), (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) ==> ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0))))))
T c==> c~ c= cinverse * part cedge_map f0 f1 f1 c==> c/\ c~ c= cinverse * part cnode_map f0 f1 f1 c~ c= cinverse * part cface_map f0 f1 f1 c==> cIN f1 * part cdart f0 c==> cdart_nondegenerate f0 f1 c==> cis_edge_split f0 f1 c==> c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
- |- ((real_neg (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((NUMERAL (BIT1 (BIT1 _0))) * (NUMERAL (BIT1 _0))) = (NUMERAL (BIT1 (BIT1 _0))))
T c= c* cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
+ (((edge_set H) DELETE ((edge H) x)) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))), (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- ((((edge_set H) DELETE ((edge H) x)) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) /\ ((((CARD ((edge_set H) DELETE ((edge H) x))) + (NUMERAL (BIT1 _0))) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x)))))
T c==> c= * * part cDELETE * part cedge_set f0 * * part cedge f0 f1 * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY c==> cIN f1 * part cdart f0 c==> cdart_nondegenerate f0 f1 c==> cis_edge_split f0 f1 c/\ c= * * part cDELETE * part cedge_set f0 * * part cedge f0 f1 * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY c= c+ c+ cCARD * * part cDELETE * part cedge_set f0 * * part cedge f0 f1 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1
- |- (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ ((CARD (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) INSERT EMPTY))) = (NUMERAL (BIT0 (BIT1 _0)))), (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0)))))
T c==> c= cCARD * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c==> cIN f1 * part cdart f0 c==> cdart_nondegenerate f0 f1 c==> cis_edge_split f0 f1 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
- |- (((int_le (int_of_num (NUMERAL _0))) _2493247) ==> (((int_add _2493247) (int_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((int_add _2493247) (int_of_num (NUMERAL (BIT0 (BIT1 _0)))))))
T c==> cint_le cint_of_num cNUMERAL c_0 f0 c= cint_add f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 cint_add f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0
+ |- ((!x. ((x IN (s DIFF (a INSERT (a INSERT EMPTY)))) = (x IN (s DELETE a)))) = ((s DIFF (a INSERT (a INSERT EMPTY))) = (s DELETE a)))
T c= ! c= cIN b0 * * part cDIFF f0 * * part cINSERT f1 * * part cINSERT f1 part cEMPTY cIN b0 * * part cDELETE f0 f1 c= * * part cDIFF f0 * * part cINSERT f1 * * part cINSERT f1 part cEMPTY * * part cDELETE f0 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ ((x IN (dart H)) /\ ((is_edge_split H) x)) |- (((x IN (dart H)) /\ ((is_edge_split H) x)) /\ (((number_of_edges H) + (NUMERAL (BIT1 _0))) = (number_of_edges ((edge_walkup H) x))))
T c==> c/\ cIN f0 * part cdart f1 cis_edge_split f1 f0 c/\ c/\ cIN f0 * part cdart f1 cis_edge_split f1 f0 c= c+ cnumber_of_edges f1 cNUMERAL cBIT1 c_0 cnumber_of_edges cedge_walkup f1 f0
+ |- (((!f. (((POWER f) (NUMERAL (BIT1 _0))) = f)) ==> ((\f. (((POWER f) (NUMERAL (BIT1 _0))) = f)) f)) = ((\f. (((POWER f) (NUMERAL (BIT1 _0))) = f)) f))
T c= c==> ! c= * * part cPOWER b0 cNUMERAL cBIT1 c_0 b0 * / c= * * part cPOWER b0 cNUMERAL cBIT1 c_0 b0 f0 * / c= * * part cPOWER b0 cNUMERAL cBIT1 c_0 b0 f0
+ |- (((((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x))) ==> ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0)))))) = (((((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x))) ==> (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((inverse (edge_map H)) x)))) ==> ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0)))))))
T c= c==> cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c==> c==> c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
+ |- (((!y. ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y))))))) ==> ((\y. ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y))))))) x)) = ((\y. ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y))))))) x))
T c= c==> ! c/\ c= cedge_map cedge_walkup f0 f1 f1 f1 c/\ c==> c/\ c~ c= cnode_map f0 f1 f1 c~ c= cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1 c/\ c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c==> c/\ c~ c= b0 f1 c/\ c~ c= b0 cinverse * part cedge_map f0 f1 c~ c= b0 cnode_map f0 f1 c= cedge_map cedge_walkup f0 f1 b0 cedge_map f0 b0 * / c/\ c= cedge_map cedge_walkup f0 f1 f1 f1 c/\ c==> c/\ c~ c= cnode_map f0 f1 f1 c~ c= cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1 c/\ c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c==> c/\ c~ c= b0 f1 c/\ c~ c= b0 cinverse * part cedge_map f0 f1 c~ c= b0 cnode_map f0 f1 c= cedge_map cedge_walkup f0 f1 b0 cedge_map f0 b0 f1 * / c/\ c= cedge_map cedge_walkup f0 f1 f1 f1 c/\ c==> c/\ c~ c= cnode_map f0 f1 f1 c~ c= cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1 c/\ c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c==> c/\ c~ c= b0 f1 c/\ c~ c= b0 cinverse * part cedge_map f0 f1 c~ c= b0 cnode_map f0 f1 c= cedge_map cedge_walkup f0 f1 b0 cedge_map f0 b0 f1
+ (~ (((face_map H) x) = x)), (x IN (dart H)) |- (((((inverse (face_map H)) x) IN (dart ((edge_walkup H) x))) ==> ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))))) = ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))))
T c==> c~ c= cface_map f0 f1 f1 c==> cIN f1 * part cdart f0 c= c==> cIN cinverse * part cface_map f0 f1 * part cdart cedge_walkup f0 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1
+ |- (((!x. (((x IN (dart H)) /\ (~ (((node_map H) x) = x))) ==> ((((node_map H) x) IN (dart ((edge_walkup H) x))) /\ (((inverse (node_map H)) x) IN (dart ((edge_walkup H) x)))))) ==> ((\x. (((x IN (dart H)) /\ (~ (((node_map H) x) = x))) ==> ((((node_map H) x) IN (dart ((edge_walkup H) x))) /\ (((inverse (node_map H)) x) IN (dart ((edge_walkup H) x)))))) x)) = ((\x. (((x IN (dart H)) /\ (~ (((node_map H) x) = x))) ==> ((((node_map H) x) IN (dart ((edge_walkup H) x))) /\ (((inverse (node_map H)) x) IN (dart ((edge_walkup H) x)))))) x))
T c= c==> ! c==> c/\ cIN b0 * part cdart f0 c~ c= cnode_map f0 b0 b0 c/\ cIN cnode_map f0 b0 * part cdart cedge_walkup f0 b0 cIN cinverse * part cnode_map f0 b0 * part cdart cedge_walkup f0 b0 * / c==> c/\ cIN b0 * part cdart f0 c~ c= cnode_map f0 b0 b0 c/\ cIN cnode_map f0 b0 * part cdart cedge_walkup f0 b0 cIN cinverse * part cnode_map f0 b0 * part cdart cedge_walkup f0 b0 f1 * / c==> c/\ cIN b0 * part cdart f0 c~ c= cnode_map f0 b0 b0 c/\ cIN cnode_map f0 b0 * part cdart cedge_walkup f0 b0 cIN cinverse * part cnode_map f0 b0 * part cdart cedge_walkup f0 b0 f1
- |- (((real_add (real_neg (real_of_num m))) (real_of_num m)) = (real_of_num (NUMERAL _0)))
T c= creal_add creal_neg creal_of_num f0 creal_of_num f0 creal_of_num cNUMERAL c_0
+ (((edge H) x) IN (edge_set H)) |- ((((edge H) x) IN (edge_set H)) = T)
T c==> cIN * * part cedge f0 f1 * part cedge_set f0 c= cIN * * part cedge f0 f1 * part cedge_set f0 cT
- |- (((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) ==> ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)) = ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2))
T c= c==> ! ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
- |- ((\n. ((int_le (int_of_num (NUMERAL _0))) (int_of_num n))) k)
T * / cint_le cint_of_num cNUMERAL c_0 cint_of_num b0 f0
+ (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0)))))
T c==> cIN f0 * part cdart f1 c==> cdart_nondegenerate f1 f0 c==> cis_edge_split f1 f0 c= cCARD * part cedge_set cedge_walkup f1 f0 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cINSERT * * part cedge cedge_walkup f1 f0 cinverse * part cedge_map f1 f0 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
+ |- (((!x. (!y. ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y)))))))) ==> ((\x. (!y. ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y)))))))) x)) = ((\x. (!y. ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y)))))))) x))
T c= c==> ! ! c/\ c= cedge_map cedge_walkup f0 b0 b0 b0 c/\ c==> c/\ c~ c= cnode_map f0 b0 b0 c~ c= cedge_map f0 b0 b0 c= cedge_map cedge_walkup f0 b0 cnode_map f0 b0 cedge_map f0 b0 c/\ c==> c/\ c~ c= cinverse * part cface_map f0 b0 b0 c~ c= cinverse * part cedge_map f0 b0 b0 c= cedge_map cedge_walkup f0 b0 cinverse * part cedge_map f0 b0 cinverse * part cface_map f0 b0 c==> c/\ c~ c= b1 b0 c/\ c~ c= b1 cinverse * part cedge_map f0 b0 c~ c= b1 cnode_map f0 b0 c= cedge_map cedge_walkup f0 b0 b1 cedge_map f0 b1 * / ! c/\ c= cedge_map cedge_walkup f0 b0 b0 b0 c/\ c==> c/\ c~ c= cnode_map f0 b0 b0 c~ c= cedge_map f0 b0 b0 c= cedge_map cedge_walkup f0 b0 cnode_map f0 b0 cedge_map f0 b0 c/\ c==> c/\ c~ c= cinverse * part cface_map f0 b0 b0 c~ c= cinverse * part cedge_map f0 b0 b0 c= cedge_map cedge_walkup f0 b0 cinverse * part cedge_map f0 b0 cinverse * part cface_map f0 b0 c==> c/\ c~ c= b1 b0 c/\ c~ c= b1 cinverse * part cedge_map f0 b0 c~ c= b1 cnode_map f0 b0 c= cedge_map cedge_walkup f0 b0 b1 cedge_map f0 b1 f1 * / ! c/\ c= cedge_map cedge_walkup f0 b0 b0 b0 c/\ c==> c/\ c~ c= cnode_map f0 b0 b0 c~ c= cedge_map f0 b0 b0 c= cedge_map cedge_walkup f0 b0 cnode_map f0 b0 cedge_map f0 b0 c/\ c==> c/\ c~ c= cinverse * part cface_map f0 b0 b0 c~ c= cinverse * part cedge_map f0 b0 b0 c= cedge_map cedge_walkup f0 b0 cinverse * part cedge_map f0 b0 cinverse * part cface_map f0 b0 c==> c/\ c~ c= b1 b0 c/\ c~ c= b1 cinverse * part cedge_map f0 b0 c~ c= b1 cnode_map f0 b0 c= cedge_map cedge_walkup f0 b0 b1 cedge_map f0 b1 f1
+ (x IN (dart H)), ((is_edge_split H) x) |- (~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x))))
T c==> cIN f0 * part cdart f1 c==> cis_edge_split f1 f0 c~ cIN cinverse * part cface_map f1 f0 * * part cedge cedge_walkup f1 f0 cnode_map f1 f0
+ ((CARD (edge_set H)) = ((CARD ((edge_set H) DELETE ((edge H) x))) + (NUMERAL (BIT1 _0)))), (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- (((CARD (edge_set H)) = ((CARD ((edge_set H) DELETE ((edge H) x))) + (NUMERAL (BIT1 _0)))) /\ ((((edge_set H) DELETE ((edge H) x)) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) ==> (((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x))))))
T c==> c= cCARD * part cedge_set f0 c+ cCARD * * part cDELETE * part cedge_set f0 * * part cedge f0 f1 cNUMERAL cBIT1 c_0 c==> cIN f1 * part cdart f0 c==> cdart_nondegenerate f0 f1 c==> cis_edge_split f0 f1 c/\ c= cCARD * part cedge_set f0 c+ cCARD * * part cDELETE * part cedge_set f0 * * part cedge f0 f1 cNUMERAL cBIT1 c_0 c==> c= * * part cDELETE * part cedge_set f0 * * part cedge f0 f1 * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY c= c+ cCARD * part cedge_set f0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1
+ |- ((\q'. (((((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) = p') ==> ((p' ==> (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))) = q')) ==> (((((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) ==> ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))))) = (p' ==> q'))))) q')
T * / c==> c= cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 f2 c==> c==> f2 c= c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 b0 c= c==> cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> f2 b0 f3
+ (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x)), (x IN (dart H)), ((dart_nondegenerate H) x), ((is_edge_split H) x) |- ((((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x)) /\ ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0))))))
T c==> c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c==> cIN f1 * part cdart f0 c==> cdart_nondegenerate f0 f1 c==> cis_edge_split f0 f1 c/\ c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
- (~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _2493247)) /\ (((real_le ((real_add ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) \/ ((real_le ((real_add ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))))))) |- (((real_ge (real_of_int _2493247)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ (x IN (dart H)), ((dart_nondegenerate H) x) |- ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> ((((edge ((edge_walkup H) x)) ((node_map H) x)) IN (edge_set ((edge_walkup H) x))) /\ (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))))
T c==> cIN f0 * part cdart f1 c==> cdart_nondegenerate f1 f0 c==> c~ cIN cinverse * part cface_map f1 f0 * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 c/\ cIN * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * part cedge_set cedge_walkup f1 f0 cIN * * part cedge cedge_walkup f1 f0 cinverse * part cface_map f1 f0 * part cedge_set cedge_walkup f1 f0
+ (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) |- ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> ((((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) = T))
T c==> cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 c= cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 cT
- (!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))) |- (((!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY)))))))) ==> ((\x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY)))))))) x)) = ((\x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY)))))))) x))
T c==> ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY c= c==> ! ! c==> c/\ cFINITE f0 c/\ cIN b0 f0 cIN b1 f0 c= cCARD f0 c+ cCARD * * part cDIFF f0 * * part cINSERT b0 * * part cINSERT b1 part cEMPTY cCARD * * part cINSERT b0 * * part cINSERT b1 part cEMPTY * / ! c==> c/\ cFINITE f0 c/\ cIN b0 f0 cIN b1 f0 c= cCARD f0 c+ cCARD * * part cDIFF f0 * * part cINSERT b0 * * part cINSERT b1 part cEMPTY cCARD * * part cINSERT b0 * * part cINSERT b1 part cEMPTY f1 * / ! c==> c/\ cFINITE f0 c/\ cIN b0 f0 cIN b1 f0 c= cCARD f0 c+ cCARD * * part cDIFF f0 * * part cINSERT b0 * * part cINSERT b1 part cEMPTY cCARD * * part cINSERT b0 * * part cINSERT b1 part cEMPTY f1
+ (x IN (dart H)), ((is_edge_split H) x) |- (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> ((((edge ((edge_walkup H) x)) ((node_map H) x)) IN (edge_set ((edge_walkup H) x))) /\ (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))))) = ((((edge ((edge_walkup H) x)) ((node_map H) x)) IN (edge_set ((edge_walkup H) x))) /\ (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))))
T c==> cIN f0 * part cdart f1 c==> cis_edge_split f1 f0 c= c==> c~ cIN cinverse * part cface_map f1 f0 * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 c/\ cIN * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * part cedge_set cedge_walkup f1 f0 cIN * * part cedge cedge_walkup f1 f0 cinverse * part cface_map f1 f0 * part cedge_set cedge_walkup f1 f0 c/\ cIN * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * part cedge_set cedge_walkup f1 f0 cIN * * part cedge cedge_walkup f1 f0 cinverse * part cface_map f1 f0 * part cedge_set cedge_walkup f1 f0
+ |- ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (x = x)) /\ ((~ (x = ((inverse (edge_map H)) x))) /\ (~ (x = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) x) = ((edge_map H) x))))))
T c/\ c= cedge_map cedge_walkup f0 f1 f1 f1 c/\ c==> c/\ c~ c= cnode_map f0 f1 f1 c~ c= cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1 c/\ c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c==> c/\ c~ c= f1 f1 c/\ c~ c= f1 cinverse * part cedge_map f0 f1 c~ c= f1 cnode_map f0 f1 c= cedge_map cedge_walkup f0 f1 f1 cedge_map f0 f1
+ |- ((\H. (!x. (!y. ((y IN ((edge H) x)) ==> (((edge H) x) = ((edge H) y)))))) H)
T * / ! ! c==> cIN b2 * * part cedge b0 b1 c= * * part cedge b0 b1 * * part cedge b0 b2 f0
+ |- ((((CARD (edge_set H)) + (NUMERAL (BIT1 _0))) = (CARD (edge_set ((edge_walkup H) x)))) = (((number_of_edges H) + (NUMERAL (BIT1 _0))) = (number_of_edges ((edge_walkup H) x))))
T c= c= c+ cCARD * part cedge_set f0 cNUMERAL cBIT1 c_0 cCARD * part cedge_set cedge_walkup f0 f1 c= c+ cnumber_of_edges f0 cNUMERAL cBIT1 c_0 cnumber_of_edges cedge_walkup f0 f1
+ |- ((\H. (!x. (((x IN (dart H)) /\ (~ (((face_map H) x) = x))) ==> ((((face_map H) x) IN (dart ((edge_walkup H) x))) /\ (((inverse (face_map H)) x) IN (dart ((edge_walkup H) x))))))) H)
T * / ! c==> c/\ cIN b1 * part cdart b0 c~ c= cface_map b0 b1 b1 c/\ cIN cface_map b0 b1 * part cdart cedge_walkup b0 b1 cIN cinverse * part cface_map b0 b1 * part cdart cedge_walkup b0 b1 f0
+ |- ((\x. (!y. ((~ (x IN ((edge H) y))) ==> (~ (((edge H) x) = ((edge H) y)))))) x)
T * / ! c==> c~ cIN b0 * * part cedge f0 b1 c~ c= * * part cedge f0 b0 * * part cedge f0 b1 f1
+ |- (((!H. (!x. ((x IN (dart H)) ==> (((edge_set H) DIFF (((edge H) x) INSERT (((edge H) ((node_map H) x)) INSERT EMPTY))) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY))))))) ==> ((\H. (!x. ((x IN (dart H)) ==> (((edge_set H) DIFF (((edge H) x) INSERT (((edge H) ((node_map H) x)) INSERT EMPTY))) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY))))))) H)) = ((\H. (!x. ((x IN (dart H)) ==> (((edge_set H) DIFF (((edge H) x) INSERT (((edge H) ((node_map H) x)) INSERT EMPTY))) = ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY))))))) H))
T c= c==> ! ! c==> cIN b1 * part cdart b0 c= * * part cDIFF * part cedge_set b0 * * part cINSERT * * part cedge b0 b1 * * part cINSERT * * part cedge b0 cnode_map b0 b1 part cEMPTY * * part cDIFF * part cedge_set cedge_walkup b0 b1 * * part cINSERT * * part cedge cedge_walkup b0 b1 cnode_map b0 b1 * * part cINSERT * * part cedge cedge_walkup b0 b1 cinverse * part cedge_map b0 b1 part cEMPTY * / ! c==> cIN b1 * part cdart b0 c= * * part cDIFF * part cedge_set b0 * * part cINSERT * * part cedge b0 b1 * * part cINSERT * * part cedge b0 cnode_map b0 b1 part cEMPTY * * part cDIFF * part cedge_set cedge_walkup b0 b1 * * part cINSERT * * part cedge cedge_walkup b0 b1 cnode_map b0 b1 * * part cINSERT * * part cedge cedge_walkup b0 b1 cinverse * part cedge_map b0 b1 part cEMPTY f0 * / ! c==> cIN b1 * part cdart b0 c= * * part cDIFF * part cedge_set b0 * * part cINSERT * * part cedge b0 b1 * * part cINSERT * * part cedge b0 cnode_map b0 b1 part cEMPTY * * part cDIFF * part cedge_set cedge_walkup b0 b1 * * part cINSERT * * part cedge cedge_walkup b0 b1 cnode_map b0 b1 * * part cINSERT * * part cedge cedge_walkup b0 b1 cinverse * part cedge_map b0 b1 part cEMPTY f0
+ |- (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> ((((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x))) = q')) ==> (((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))) = ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> q')))
T c==> c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 c= cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 f2 c= c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 f2
+ |- ((x = x) = T)
T c= c= f0 f0 cT
+ |- ((((inverse (face_map H)) x) IN (dart ((edge_walkup H) x))) ==> ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) ==> (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) IN (edge_set ((edge_walkup H) x)))))
T c==> cIN cinverse * part cface_map f0 f1 * part cdart cedge_walkup f0 f1 c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cIN * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 * part cedge_set cedge_walkup f0 f1
+ |- (((!x'. (!y. ((y = (((POWER (edge_map ((edge_walkup H) x))) (NUMERAL (BIT1 _0))) x')) ==> (y IN ((orbit_map (edge_map ((edge_walkup H) x))) x'))))) ==> ((\x'. (!y. ((y = (((POWER (edge_map ((edge_walkup H) x))) (NUMERAL (BIT1 _0))) x')) ==> (y IN ((orbit_map (edge_map ((edge_walkup H) x))) x'))))) ((inverse (edge_map H)) x))) = ((\x'. (!y. ((y = (((POWER (edge_map ((edge_walkup H) x))) (NUMERAL (BIT1 _0))) x')) ==> (y IN ((orbit_map (edge_map ((edge_walkup H) x))) x'))))) ((inverse (edge_map H)) x)))
T c= c==> ! ! c==> c= b1 cPOWER * part cedge_map cedge_walkup f0 f1 cNUMERAL cBIT1 c_0 b0 cIN b1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 b0 * / ! c==> c= b1 cPOWER * part cedge_map cedge_walkup f0 f1 cNUMERAL cBIT1 c_0 b0 cIN b1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 b0 cinverse * part cedge_map f0 f1 * / ! c==> c= b1 cPOWER * part cedge_map cedge_walkup f0 f1 cNUMERAL cBIT1 c_0 b0 cIN b1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 b0 cinverse * part cedge_map f0 f1
+ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x))) |- (((((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x))) ==> ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0)))))) = ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0))))))
T c==> cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 c= c==> c= * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
- (!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))), ((FINITE s) /\ ((x IN s) /\ (y IN s))) |- (((FINITE s) /\ ((x IN s) /\ (y IN s))) /\ ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))
T c==> ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY c==> c/\ cFINITE f0 c/\ cIN f1 f0 cIN f2 f0 c/\ c/\ cFINITE f0 c/\ cIN f1 f0 cIN f2 f0 c= cCARD f0 c+ cCARD * * part cDIFF f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- (((!n. ((int_le (int_of_num (NUMERAL _0))) (int_of_num n))) ==> ((\n. ((int_le (int_of_num (NUMERAL _0))) (int_of_num n))) k)) = ((\n. ((int_le (int_of_num (NUMERAL _0))) (int_of_num n))) k))
T c= c==> ! cint_le cint_of_num cNUMERAL c_0 cint_of_num b0 * / cint_le cint_of_num cNUMERAL c_0 cint_of_num b0 f0 * / cint_le cint_of_num cNUMERAL c_0 cint_of_num b0 f0
- (~ (((inverse (node_map H)) x) = x)) |- ((((inverse (node_map H)) x) = x) = F)
T c==> c~ c= cinverse * part cnode_map f0 f1 f1 c= c= cinverse * part cnode_map f0 f1 f1 cF
+ (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x))) |- (((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0))))) = ((CARD (edge_set ((edge_walkup H) x))) = ((CARD ((edge_set ((edge_walkup H) x)) DIFF (((edge ((edge_walkup H) x)) ((node_map H) x)) INSERT (((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)) INSERT EMPTY)))) + (NUMERAL (BIT0 (BIT1 _0))))))
T c==> c= * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 c= c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c= cCARD * part cedge_set cedge_walkup f0 f1 c+ cCARD * * part cDIFF * part cedge_set cedge_walkup f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cINSERT * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
- (~ (((inverse (face_map H)) x) = x)) |- (~ (x = ((inverse (face_map H)) x)))
T c==> c~ c= cinverse * part cface_map f0 f1 f1 c~ c= f1 cinverse * part cface_map f0 f1
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (((node_map H) x) IN ((edge H) x)) |- (((edge H) x) = ((edge H) ((node_map H) x)))
T c==> cIN cnode_map f0 f1 * * part cedge f0 f1 c= * * part cedge f0 f1 * * part cedge f0 cnode_map f0 f1
- ((FINITE s) /\ ((x IN s) /\ (y IN s))) |- ((!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))
T c==> c/\ cFINITE f0 c/\ cIN f1 f0 cIN f2 f0 c==> ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY c= cCARD f0 c+ cCARD * * part cDIFF f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))) |- ((!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY)))))))) = T)
T c==> ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY c= ! ! c==> c/\ cFINITE f0 c/\ cIN b0 f0 cIN b1 f0 c= cCARD f0 c+ cCARD * * part cDIFF f0 * * part cINSERT b0 * * part cINSERT b1 part cEMPTY cCARD * * part cINSERT b0 * * part cINSERT b1 part cEMPTY cT
- |- (((x IN (dart H)) = (((edge H) x) IN (edge_set H))) /\ (((x IN (dart H)) = (((node H) x) IN (node_set H))) /\ ((x IN (dart H)) = (((face H) x) IN (face_set H)))))
T c/\ c= cIN f0 * part cdart f1 cIN * * part cedge f1 f0 * part cedge_set f1 c/\ c= cIN f0 * part cdart f1 cIN * * part cnode f1 f0 * part cnode_set f1 c= cIN f0 * part cdart f1 cIN * * part cface f1 f0 * part cface_set f1
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))) |- ((\s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))) s)
T c==> ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY * / ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY f0
- (!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))) |- ((!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))) = T)
T c==> ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY c= ! c==> c/\ cFINITE f0 c/\ cIN f1 f0 cIN b0 f0 c= cCARD f0 c+ cCARD * * part cDIFF f0 * * part cINSERT f1 * * part cINSERT b0 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT b0 part cEMPTY cT
- ((is_edge_split H) x) |- (((is_edge_split H) x) = T)
T c==> cis_edge_split f0 f1 c= cis_edge_split f0 f1 cT
- |- ((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _2493247)) /\ (((real_le ((real_add ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) \/ ((real_le ((real_add ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))))))) ==> F)
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 cF
- |- (((t1 \/ t2) \/ t3) = (t1 \/ (t2 \/ t3)))
T c= c\/ c\/ f0 f1 f2 c\/ f0 c\/ f1 f2
- |- (((!H. (!x. (((x IN (dart H)) = (((edge H) x) IN (edge_set H))) /\ (((x IN (dart H)) = (((node H) x) IN (node_set H))) /\ ((x IN (dart H)) = (((face H) x) IN (face_set H))))))) ==> ((\H. (!x. (((x IN (dart H)) = (((edge H) x) IN (edge_set H))) /\ (((x IN (dart H)) = (((node H) x) IN (node_set H))) /\ ((x IN (dart H)) = (((face H) x) IN (face_set H))))))) H)) = ((\H. (!x. (((x IN (dart H)) = (((edge H) x) IN (edge_set H))) /\ (((x IN (dart H)) = (((node H) x) IN (node_set H))) /\ ((x IN (dart H)) = (((face H) x) IN (face_set H))))))) H))
T c= c==> ! ! c/\ c= cIN b1 * part cdart b0 cIN * * part cedge b0 b1 * part cedge_set b0 c/\ c= cIN b1 * part cdart b0 cIN * * part cnode b0 b1 * part cnode_set b0 c= cIN b1 * part cdart b0 cIN * * part cface b0 b1 * part cface_set b0 * / ! c/\ c= cIN b1 * part cdart b0 cIN * * part cedge b0 b1 * part cedge_set b0 c/\ c= cIN b1 * part cdart b0 cIN * * part cnode b0 b1 * part cnode_set b0 c= cIN b1 * part cdart b0 cIN * * part cface b0 b1 * part cface_set b0 f0 * / ! c/\ c= cIN b1 * part cdart b0 cIN * * part cedge b0 b1 * part cedge_set b0 c/\ c= cIN b1 * part cdart b0 cIN * * part cnode b0 b1 * part cnode_set b0 c= cIN b1 * part cdart b0 cIN * * part cface b0 b1 * part cface_set b0 f0
- (((node_map H) x) IN ((edge H) x)) |- ((((node_map H) x) IN ((edge H) x)) = T)
T c==> cIN cnode_map f0 f1 * * part cedge f0 f1 c= cIN cnode_map f0 f1 * * part cedge f0 f1 cT
- |- (((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))) |- (((!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))) ==> ((\y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))) y)) = ((\y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))) y))
T c==> ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY c= c==> ! c==> c/\ cFINITE f0 c/\ cIN f1 f0 cIN b0 f0 c= cCARD f0 c+ cCARD * * part cDIFF f0 * * part cINSERT f1 * * part cINSERT b0 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT b0 part cEMPTY * / c==> c/\ cFINITE f0 c/\ cIN f1 f0 cIN b0 f0 c= cCARD f0 c+ cCARD * * part cDIFF f0 * * part cINSERT f1 * * part cINSERT b0 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT b0 part cEMPTY f2 * / c==> c/\ cFINITE f0 c/\ cIN f1 f0 cIN b0 f0 c= cCARD f0 c+ cCARD * * part cDIFF f0 * * part cINSERT f1 * * part cINSERT b0 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT b0 part cEMPTY f2
- (~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) |- ((((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x))) = F)
T c==> c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 c= cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 cF
- |- (((NUMERAL (BIT1 _0)) * (NUMERAL (BIT1 (BIT1 _0)))) = (NUMERAL (BIT1 (BIT1 _0))))
T c= c* cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- ((real_of_int (int_of_num n)) = (real_of_num n))
T c= creal_of_int cint_of_num f0 creal_of_num f0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((NUMERAL (BIT1 _0)) * (NUMERAL (BIT1 _0))) = (NUMERAL (BIT1 _0)))
T c= c* cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0
- |- ((((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _2493247)) /\ (((real_le ((real_add ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) \/ ((real_le ((real_add ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))))))) ==> F) ==> (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _2493247)) /\ (((real_le ((real_add ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) \/ ((real_le ((real_add ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))))))) = (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _2493247)) /\ (((real_le ((real_add ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) \/ ((real_le ((real_add ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))))))
T c= c==> c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 cF c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))) |- ((\x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY)))))))) x)
T c==> ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY * / ! c==> c/\ cFINITE f0 c/\ cIN b0 f0 cIN b1 f0 c= cCARD f0 c+ cCARD * * part cDIFF f0 * * part cINSERT b0 * * part cINSERT b1 part cEMPTY cCARD * * part cINSERT b0 * * part cINSERT b1 part cEMPTY f1
- |- (~ (~ (((int_le (int_of_num (NUMERAL _0))) _2493247) ==> (((int_add _2493247) (int_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((int_add _2493247) (int_of_num (NUMERAL (BIT0 (BIT1 _0)))))))))
T c~ c~ c==> cint_le cint_of_num cNUMERAL c_0 f0 c= cint_add f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 cint_add f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0
- |- (((real_le (real_of_num m)) (real_neg (real_of_num n))) = ((m = (NUMERAL _0)) /\ (n = (NUMERAL _0))))
T c= creal_le creal_of_num f0 creal_neg creal_of_num f1 c/\ c= f0 cNUMERAL c_0 c= f1 cNUMERAL c_0
- |- (((!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) ==> ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)) = ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3))
T c= c==> ! c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
- |- (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- ((FINITE (node_set H)) = T)
T c= cFINITE * part cnode_set f0 cT
- |- ((int_le (int_of_num (NUMERAL _0))) (int_of_num k))
T cint_le cint_of_num cNUMERAL c_0 cint_of_num f0
- |- (((NUMERAL (BIT0 (BIT1 _0))) * (NUMERAL (BIT1 _0))) = (NUMERAL (BIT0 (BIT1 _0))))
T c= c* cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0
- (x = ((inverse (face_map H)) x)) |- (((inverse (face_map H)) x) = x)
T c==> c= f0 cinverse * part cface_map f1 f0 c= cinverse * part cface_map f1 f0 f0
- (~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _2493247)) /\ (((real_le ((real_add ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) \/ ((real_le ((real_add ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))))))) |- ((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _2493247)) /\ (((real_le ((real_add ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) \/ ((real_le ((real_add ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))))))) /\ F)
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 c/\ c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 cF
- (~ (((inverse (face_map H)) x) = x)) |- (((~ (x = ((inverse (face_map H)) x))) ==> ((x = ((inverse (face_map H)) x)) = F)) = ((x = ((inverse (face_map H)) x)) = F))
T c==> c~ c= cinverse * part cface_map f0 f1 f1 c= c==> c~ c= f1 cinverse * part cface_map f0 f1 c= c= f1 cinverse * part cface_map f0 f1 cF c= c= f1 cinverse * part cface_map f0 f1 cF
- |- ((real_of_num (NUMERAL _0)) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((real_of_num (NUMERAL (BIT1 (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))), ((FINITE s) /\ ((x IN s) /\ (y IN s))) |- ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY)))))
T c==> ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY c==> c/\ cFINITE f0 c/\ cIN f1 f0 cIN f2 f0 c= cCARD f0 c+ cCARD * * part cDIFF f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- (FINITE (node_set H))
T cFINITE * part cnode_set f0
- |- (((int_le x) y) = ((real_le (real_of_int x)) (real_of_int y)))
T c= cint_le f0 f1 creal_le creal_of_int f0 creal_of_int f1
- |- (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _2493247)) /\ (((real_le ((real_add ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) \/ ((real_le ((real_add ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))))))
T c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0
- (((inverse (node_map H)) x) = x) |- (x = ((inverse (node_map H)) x))
T c==> c= cinverse * part cnode_map f0 f1 f1 c= f1 cinverse * part cnode_map f0 f1
- (((real_ge (real_of_int _2493247)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))) |- F
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF
- (((inverse (face_map H)) x) = x) |- (x = ((inverse (face_map H)) x))
T c==> c= cinverse * part cface_map f0 f1 f1 c= f1 cinverse * part cface_map f0 f1
- (~ (((inverse (edge_map H)) x) = x)) |- ((x = ((inverse (edge_map H)) x)) = F)
T c==> c~ c= cinverse * part cedge_map f0 f1 f1 c= c= f1 cinverse * part cedge_map f0 f1 cF
- (x = ((inverse (node_map H)) x)) |- (((inverse (node_map H)) x) = x)
T c==> c= f0 cinverse * part cnode_map f1 f0 c= cinverse * part cnode_map f1 f0 f0
- |- (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (T = ((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= cT creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((!t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) ==> ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)) = ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1))
T c= c==> ! ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
- |- (FINITE (face_set H))
T cFINITE * part cface_set f0
- |- ((~ (~ t)) = t)
T c= c~ c~ f0 f0
- |- ((NUMERAL (BIT1 (BIT1 _0))) = ((NUMERAL (BIT0 (BIT1 _0))) + (NUMERAL (BIT1 _0))))
T c= cNUMERAL cBIT1 cBIT1 c_0 c+ cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0
- |- (((NUMERAL _0) < (NUMERAL (BIT1 _0))) = T)
T c= c< cNUMERAL c_0 cNUMERAL cBIT1 c_0 cT
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))) |- ((!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))) /\ (!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))))
T c==> ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY c/\ ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY
- |- ((((real_le (real_of_num (NUMERAL _0))) (real_of_int _2493247)) /\ (((real_le ((real_add ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) \/ ((real_le ((real_add ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _2493247)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))))) = (~ (((int_le (int_of_num (NUMERAL _0))) _2493247) ==> (((int_add _2493247) (int_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((int_add _2493247) (int_of_num (NUMERAL (BIT0 (BIT1 _0)))))))))
T c= c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 c~ c==> cint_le cint_of_num cNUMERAL c_0 f0 c= cint_add f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 cint_add f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0
- |- (((y IN ((edge H) x)) ==> (((edge H) x) = ((edge H) y))) = T)
T c= c==> cIN f0 * * part cedge f1 f2 c= * * part cedge f1 f2 * * part cedge f1 f0 cT
- (!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))) |- (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))
T c==> ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY ! ! c==> c/\ cFINITE f0 c/\ cIN b0 f0 cIN b1 f0 c= cCARD f0 c+ cCARD * * part cDIFF f0 * * part cINSERT b0 * * part cINSERT b1 part cEMPTY cCARD * * part cINSERT b0 * * part cINSERT b1 part cEMPTY
- |- (((real_mul (real_of_num (NUMERAL _0))) (real_of_num x)) = (real_of_num (NUMERAL _0)))
T c= creal_mul creal_of_num cNUMERAL c_0 creal_of_num f0 creal_of_num cNUMERAL c_0
- |- ((real_of_num x) = ((real_div (real_of_num x)) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_of_num f0 creal_div creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))) ==> (!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))))
T c==> ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (((inverse (edge_map H)) x) = x) |- (x = ((inverse (edge_map H)) x))
T c==> c= cinverse * part cedge_map f0 f1 f1 c= f1 cinverse * part cedge_map f0 f1
- (!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))), ((FINITE s) /\ ((x IN s) /\ (y IN s))) |- ((!s. (!x. (!y. (((FINITE s) /\ ((x IN s) /\ (y IN s))) ==> ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))))) /\ ((CARD s) = ((CARD (s DIFF (x INSERT (y INSERT EMPTY)))) + (CARD (x INSERT (y INSERT EMPTY))))))
T c==> ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY c==> c/\ cFINITE f0 c/\ cIN f1 f0 cIN f2 f0 c/\ ! ! ! c==> c/\ cFINITE b0 c/\ cIN b1 b0 cIN b2 b0 c= cCARD b0 c+ cCARD * * part cDIFF b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cCARD * * part cINSERT b1 * * part cINSERT b2 part cEMPTY c= cCARD f0 c+ cCARD * * part cDIFF f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- (((real_mul (real_neg (real_of_num m))) (real_of_num n)) = (real_neg (real_of_num (m * n))))
T c= creal_mul creal_neg creal_of_num f0 creal_of_num f1 creal_neg creal_of_num c* f0 f1
- |- (((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((NUMERAL (BIT0 (BIT1 _0))) + (NUMERAL (BIT1 _0))) = (NUMERAL (BIT1 (BIT1 _0))))
T c= c+ cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- (((real_lt (real_of_num m)) (real_of_num n)) = (m < n))
T c= creal_lt creal_of_num f0 creal_of_num f1 c< f0 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((\H. (!x. (((x IN (dart H)) = (((edge H) x) IN (edge_set H))) /\ (((x IN (dart H)) = (((node H) x) IN (node_set H))) /\ ((x IN (dart H)) = (((face H) x) IN (face_set H))))))) H)
T * / ! c/\ c= cIN b1 * part cdart b0 cIN * * part cedge b0 b1 * part cedge_set b0 c/\ c= cIN b1 * part cdart b0 cIN * * part cnode b0 b1 * part cnode_set b0 c= cIN b1 * part cdart b0 cIN * * part cface b0 b1 * part cface_set b0 f0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((real_neg (real_of_num x)) = ((real_div (real_neg (real_of_num x))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_neg creal_of_num f0 creal_div creal_neg creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
- (~ (((inverse (node_map H)) x) = x)) |- ((x = ((inverse (node_map H)) x)) = F)
T c==> c~ c= cinverse * part cnode_map f0 f1 f1 c= c= f1 cinverse * part cnode_map f0 f1 cF
