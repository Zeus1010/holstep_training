N Tame_list.set_of_list_cat
C |- (!u. (!v. ((set_of_list ((cat u) v)) = ((set_of_list u) UNION (set_of_list v)))))
T c= * part cset_of_list ccat f0 f1 * * part cUNION * part cset_of_list f0 * part cset_of_list f1
D TRUTH
A |- T
T cT
D SET_OF_LIST_APPEND
A |- (!l1. (!l2. ((set_of_list ((APPEND l1) l2)) = ((set_of_list l1) UNION (set_of_list l2)))))
T c= * part cset_of_list cAPPEND f0 f1 * * part cUNION * part cset_of_list f0 * part cset_of_list f1
D Tame_list.upper_case
A |- ((map = MAP) /\ ((sizel = LENGTH) /\ ((filter = FILTER) /\ ((rev = REVERSE) /\ ((!s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) /\ ((cat = APPEND) /\ (all = ALL)))))))
T c/\ c= part cmap part cMAP c/\ c= part csizel part cLENGTH c/\ c= part cfilter part cFILTER c/\ c= part crev part cREVERSE c/\ ! ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 c/\ c= part ccat part cAPPEND c= part call part cALL
- |- ((\x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s)))) x0)
T * / c==> c~ c= f0 cNIL c= clast b0 f0 cLAST f0 f1
+ |- ((!s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) /\ ((cat = APPEND) /\ (all = ALL)))
T c/\ ! ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 c/\ c= part ccat part cAPPEND c= part call part cALL
- |- (((!s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) ==> ((\s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) s)) = ((\s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) s))
T c= c==> ! ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 * / ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 f0 * / ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 f0
+ |- ((!v. t) = t)
T c= ! f0 f0
+ |- ((filter = FILTER) /\ ((rev = REVERSE) /\ ((!s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) /\ ((cat = APPEND) /\ (all = ALL)))))
T c/\ c= part cfilter part cFILTER c/\ c= part crev part cREVERSE c/\ ! ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 c/\ c= part ccat part cAPPEND c= part call part cALL
+ |- (((!l1. (!l2. ((set_of_list ((APPEND l1) l2)) = ((set_of_list l1) UNION (set_of_list l2))))) ==> ((\l1. (!l2. ((set_of_list ((APPEND l1) l2)) = ((set_of_list l1) UNION (set_of_list l2))))) l1)) = ((\l1. (!l2. ((set_of_list ((APPEND l1) l2)) = ((set_of_list l1) UNION (set_of_list l2))))) l1))
T c= c==> ! ! c= * part cset_of_list cAPPEND b0 b1 * * part cUNION * part cset_of_list b0 * part cset_of_list b1 * / ! c= * part cset_of_list cAPPEND b0 b1 * * part cUNION * part cset_of_list b0 * part cset_of_list b1 f0 * / ! c= * part cset_of_list cAPPEND b0 b1 * * part cUNION * part cset_of_list b0 * part cset_of_list b1 f0
- |- ((\s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) s)
T * / ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 f0
- |- (all = ALL)
T c= part call part cALL
+ |- ((rev = REVERSE) /\ ((!s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) /\ ((cat = APPEND) /\ (all = ALL))))
T c/\ c= part crev part cREVERSE c/\ ! ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 c/\ c= part ccat part cAPPEND c= part call part cALL
- |- (((~ (s = NIL)) ==> (((last x0) s) = (LAST s))) = T)
T c= c==> c~ c= f0 cNIL c= clast f1 f0 cLAST f0 cT
+ |- ((\l2. ((set_of_list ((APPEND l1) l2)) = ((set_of_list l1) UNION (set_of_list l2)))) l2)
T * / c= * part cset_of_list cAPPEND f0 b0 * * part cUNION * part cset_of_list f0 * part cset_of_list b0 f1
+ |- ((x = x) = T)
T c= c= f0 f0 cT
+ |- ((cat = APPEND) /\ (all = ALL))
T c/\ c= part ccat part cAPPEND c= part call part cALL
- |- (((!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s)))) ==> ((\x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s)))) x0)) = ((\x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s)))) x0))
T c= c==> ! c==> c~ c= f0 cNIL c= clast b0 f0 cLAST f0 * / c==> c~ c= f0 cNIL c= clast b0 f0 cLAST f0 f1 * / c==> c~ c= f0 cNIL c= clast b0 f0 cLAST f0 f1
- |- (rev = REVERSE)
T c= part crev part cREVERSE
- |- ((~ (s = NIL)) ==> (((last x0) s) = (LAST s)))
T c==> c~ c= f0 cNIL c= clast f1 f0 cLAST f0
