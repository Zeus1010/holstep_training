N Tame_list.size_replacefacesAt
C |- (!ns. (!f. (!fs. (!Fs. ((sizel ((((replacefacesAt ns) f) fs) Fs)) = (sizel Fs))))))
T c= csizel creplacefacesAt f0 f1 f2 f3 csizel f3
D TRUTH
A |- T
T cT
D COND_ELIM_THM
A |- ((P (((COND c) x) y)) = ((c ==> (P x)) /\ ((~ c) ==> (P y))))
T c= * f0 cCOND f1 f2 f3 c/\ c==> f1 * f0 f2 c==> c~ f1 * f0 f3
D list_INDUCT
A |- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))))
T c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
D Tame_defs2.mapAt
A |- (((((mapAt NIL) f) xs) = xs) /\ ((((mapAt ((CONS n) ns)) f) xs) = (((COND (n < (LENGTH xs))) (((mapAt ns) f) (((list_update xs) n) (f ((EL n) xs))))) (((mapAt ns) f) xs))))
T c/\ c= cmapAt cNIL f0 f1 f1 c= cmapAt cCONS f2 f3 f0 f1 cCOND c< f2 cLENGTH f1 cmapAt f3 f0 clist_update f1 f2 * f0 cEL f2 f1 cmapAt f3 f0 f1
D Tame_defs2.replacefacesAt
A |- (!ns. (!f. (!fs. (!Fs. (((((replacefacesAt ns) f) fs) Fs) = (((mapAt ns) ((replace f) fs)) Fs))))))
T c= creplacefacesAt f0 f1 f2 f3 cmapAt f0 * * part creplace f1 f2 f3
D Tame_list.size_list_update
A |- (!xs. (!i. (!v. ((sizel (((list_update xs) i) v)) = (sizel xs)))))
T c= csizel clist_update f0 f1 f2 csizel f0
+ |- ((!f. (!fs. (!Fs. ((sizel (((mapAt NIL) ((replace f) fs)) Fs)) = (sizel Fs))))) /\ (!h. (!t. ((!f. (!fs. (!Fs. ((sizel (((mapAt t) ((replace f) fs)) Fs)) = (sizel Fs))))) ==> (!f. (!fs. (!Fs. ((sizel (((mapAt ((CONS h) t)) ((replace f) fs)) Fs)) = (sizel Fs)))))))))
T c/\ ! ! ! c= csizel cmapAt cNIL * * part creplace b0 b1 b2 csizel b2 ! ! c==> ! ! ! c= csizel cmapAt b1 * * part creplace b2 b3 b4 csizel b4 ! ! ! c= csizel cmapAt cCONS b0 b1 * * part creplace b2 b3 b4 csizel b4
+ |- ((!ns. (!f. (!fs. (!Fs. ((sizel (((mapAt ns) ((replace f) fs)) Fs)) = (sizel Fs)))))) = (!ns. (!f. (!fs. (!Fs. ((sizel ((((replacefacesAt ns) f) fs) Fs)) = (sizel Fs)))))))
T c= ! ! ! ! c= csizel cmapAt b0 * * part creplace b1 b2 b3 csizel b3 ! ! ! ! c= csizel creplacefacesAt b0 b1 b2 b3 csizel b3
+ |- (!f. (!fs. (!Fs. ((sizel (((mapAt NIL) ((replace f) fs)) Fs)) = (sizel Fs)))))
T c= csizel cmapAt cNIL * * part creplace f0 f1 f2 csizel f2
+ (!f. (!fs. (!Fs. ((sizel (((mapAt t) ((replace f) fs)) Fs)) = (sizel Fs))))) |- (!Fs. ((sizel (((mapAt t) ((replace f) fs)) Fs)) = (sizel Fs)))
T c==> ! ! ! c= csizel cmapAt f0 * * part creplace b0 b1 b2 csizel b2 ! c= csizel cmapAt f0 * * part creplace f1 f2 b0 csizel b0
+ |- (((sizel (((COND (h < (LENGTH Fs))) (((mapAt t) ((replace f) fs)) (((list_update Fs) h) (((replace f) fs) ((EL h) Fs))))) (((mapAt t) ((replace f) fs)) Fs))) = (sizel Fs)) = (((h < (LENGTH Fs)) ==> ((sizel (((mapAt t) ((replace f) fs)) (((list_update Fs) h) (((replace f) fs) ((EL h) Fs))))) = (sizel Fs))) /\ ((~ (h < (LENGTH Fs))) ==> ((sizel (((mapAt t) ((replace f) fs)) Fs)) = (sizel Fs)))))
T c= c= csizel cCOND c< f0 cLENGTH f1 cmapAt f2 * * part creplace f3 f4 clist_update f1 f0 creplace f3 f4 cEL f0 f1 cmapAt f2 * * part creplace f3 f4 f1 csizel f1 c/\ c==> c< f0 cLENGTH f1 c= csizel cmapAt f2 * * part creplace f3 f4 clist_update f1 f0 creplace f3 f4 cEL f0 f1 csizel f1 c==> c~ c< f0 cLENGTH f1 c= csizel cmapAt f2 * * part creplace f3 f4 f1 csizel f1
- (~ (h < (LENGTH Fs))) |- (((sizel (((mapAt t) ((replace f) fs)) Fs)) = (sizel Fs)) = ((sizel (((mapAt t) ((replace f) fs)) Fs)) = (sizel Fs)))
T c==> c~ c< f0 cLENGTH f1 c= c= csizel cmapAt f2 * * part creplace f3 f4 f1 csizel f1 c= csizel cmapAt f2 * * part creplace f3 f4 f1 csizel f1
+ |- (((!fs. (!Fs. (((((replacefacesAt ns) f) fs) Fs) = (((mapAt ns) ((replace f) fs)) Fs)))) ==> ((\fs. (!Fs. (((((replacefacesAt ns) f) fs) Fs) = (((mapAt ns) ((replace f) fs)) Fs)))) fs)) = ((\fs. (!Fs. (((((replacefacesAt ns) f) fs) Fs) = (((mapAt ns) ((replace f) fs)) Fs)))) fs))
T c= c==> ! ! c= creplacefacesAt f0 f1 b0 b1 cmapAt f0 * * part creplace f1 b0 b1 * / ! c= creplacefacesAt f0 f1 b0 b1 cmapAt f0 * * part creplace f1 b0 b1 f2 * / ! c= creplacefacesAt f0 f1 b0 b1 cmapAt f0 * * part creplace f1 b0 b1 f2
- (!f. (!fs. (!Fs. ((sizel (((mapAt t) ((replace f) fs)) Fs)) = (sizel Fs))))) |- (T = ((sizel (((mapAt t) ((replace f) fs)) (((list_update Fs) h) (((replace f) fs) ((EL h) Fs))))) = (sizel Fs)))
T c==> ! ! ! c= csizel cmapAt f0 * * part creplace b0 b1 b2 csizel b2 c= cT c= csizel cmapAt f0 * * part creplace f1 f2 clist_update f3 f4 creplace f1 f2 cEL f4 f3 csizel f3
- (h < (LENGTH Fs)) |- (((sizel (((mapAt t) ((replace f) fs)) (((list_update Fs) h) (((replace f) fs) ((EL h) Fs))))) = (sizel Fs)) = ((sizel (((mapAt t) ((replace f) fs)) (((list_update Fs) h) (((replace f) fs) ((EL h) Fs))))) = (sizel Fs)))
T c==> c< f0 cLENGTH f1 c= c= csizel cmapAt f2 * * part creplace f3 f4 clist_update f1 f0 creplace f3 f4 cEL f0 f1 csizel f1 c= csizel cmapAt f2 * * part creplace f3 f4 clist_update f1 f0 creplace f3 f4 cEL f0 f1 csizel f1
- (h < (LENGTH Fs)) |- ((h < (LENGTH Fs)) = T)
T c==> c< f0 cLENGTH f1 c= c< f0 cLENGTH f1 cT
- (~ (h < (LENGTH Fs))) |- ((h < (LENGTH Fs)) = F)
T c==> c~ c< f0 cLENGTH f1 c= c< f0 cLENGTH f1 cF
- (!f. (!fs. (!Fs. ((sizel (((mapAt t) ((replace f) fs)) Fs)) = (sizel Fs))))) |- (T = ((sizel (((mapAt t) ((replace f) fs)) Fs)) = (sizel Fs)))
T c==> ! ! ! c= csizel cmapAt f0 * * part creplace b0 b1 b2 csizel b2 c= cT c= csizel cmapAt f0 * * part creplace f1 f2 f3 csizel f3
