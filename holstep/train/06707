N Tame_list.all_uniq_seed
C |- (!p. ((all uniq) (fgraph (Seed p))))
T call part cuniq cfgraph cSeed f0
D TRUTH
A |- T
T cT
D LET_DEF
A |- (!f. (!x. (((LET f) x) = (f x))))
T c= cLET f0 f1 * f0 f1
D LET_END_DEF
A |- (!t. ((LET_END t) = t))
T c= cLET_END f0 f0
D FST
A |- (!x. (!y. ((FST (x , y)) = x)))
T c= cFST c, f0 f1 f0
D MAP
A |- ((!f. (((MAP f) NIL) = NIL)) /\ (!f. (!h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t)))))))
T c/\ ! c= cMAP b0 cNIL cNIL ! ! ! c= cMAP b0 cCONS b1 b2 cCONS * b0 b1 cMAP b0 b2
D Tame_defs.graphl
A |- (!n. ((graphl n) = ((LET (\vs. (LET_END ((LET (\fs. (LET_END ((((Graph fs) n) ((REPLICATE n) fs)) ((REPLICATE n) (NUMERAL _0)))))) ((CONS (vs , T)) ((CONS ((REVERSE vs) , F)) NIL)))))) ((upt (NUMERAL _0)) n))))
T c= cgraphl f0 cLET / cLET_END cLET / cLET_END cGraph b1 f0 cREPLICATE f0 b1 cREPLICATE f0 cNUMERAL c_0 cCONS c, b0 cT cCONS c, cREVERSE b0 cF cNIL cupt cNUMERAL c_0 f0
D Tame_defs.maxGon
A |- (!p. ((maxGon p) = (p + (NUMERAL (BIT1 (BIT1 _0))))))
T c= cmaxGon f0 c+ f0 cNUMERAL cBIT1 cBIT1 c_0
D Tame_defs.SEED
A |- (!p. ((Seed p) = (graphl (maxGon p))))
T c= cSeed f0 cgraphl cmaxGon f0
D Seq.all
A |- (!a. (!x. (!s'. ((((all a) NIL) = T) /\ (((all a) ((CONS x) s')) = ((a x) /\ ((all a) s')))))))
T c/\ c= call f0 cNIL cT c= call f0 cCONS f1 f2 c/\ * f0 f1 call f0 f2
D Seq.rev_uniq
A |- (!s. ((uniq (rev s)) = (uniq s)))
T c= cuniq crev f0 cuniq f0
D Seq.iota_uniq
A |- (!m. (!n. (uniq ((iota m) n))))
T cuniq ciota f0 f1
D Tame_list.fgraph_graph
A |- (!f. (!n. (!a. (!b. ((fgraph ((((Graph f) n) a) b)) = ((MAP FST) f))))))
T c= cfgraph cGraph f0 f1 f2 f3 cMAP part cFST f0
D Tame_list.upt0
A |- (!i. (((upt (NUMERAL _0)) i) = ((iota (NUMERAL _0)) i)))
T c= cupt cNUMERAL c_0 f0 ciota cNUMERAL c_0 f0
D Tame_list.REVERSE_rev
A |- (REVERSE = rev)
T c= part cREVERSE part crev
- |- (((!g. ((vertices_set2 g) = (set_of_list (vertices_graph g)))) ==> ((\g. ((vertices_set2 g) = (set_of_list (vertices_graph g)))) g)) = ((\g. ((vertices_set2 g) = (set_of_list (vertices_graph g)))) g))
T c= c==> ! c= * part cvertices_set2 b0 * part cset_of_list cvertices_graph b0 * / c= * part cvertices_set2 b0 * part cset_of_list cvertices_graph b0 f0 * / c= * part cvertices_set2 b0 * part cset_of_list cvertices_graph b0 f0
+ |- ((t /\ T) = t)
T c= c/\ f0 cT f0
+ |- ((\x. (((LET f) x) = (f x))) x)
T * / c= cLET f0 b0 * f0 b0 f1
+ |- (((!n. ((graphl n) = ((LET (\vs. (LET_END ((LET (\fs. (LET_END ((((Graph fs) n) ((REPLICATE n) fs)) ((REPLICATE n) (NUMERAL _0)))))) ((CONS (vs , T)) ((CONS ((REVERSE vs) , F)) NIL)))))) ((upt (NUMERAL _0)) n)))) ==> ((\n. ((graphl n) = ((LET (\vs. (LET_END ((LET (\fs. (LET_END ((((Graph fs) n) ((REPLICATE n) fs)) ((REPLICATE n) (NUMERAL _0)))))) ((CONS (vs , T)) ((CONS ((REVERSE vs) , F)) NIL)))))) ((upt (NUMERAL _0)) n)))) n)) = ((\n. ((graphl n) = ((LET (\vs. (LET_END ((LET (\fs. (LET_END ((((Graph fs) n) ((REPLICATE n) fs)) ((REPLICATE n) (NUMERAL _0)))))) ((CONS (vs , T)) ((CONS ((REVERSE vs) , F)) NIL)))))) ((upt (NUMERAL _0)) n)))) n))
T c= c==> ! c= cgraphl b0 cLET / cLET_END cLET / cLET_END cGraph b2 b0 cREPLICATE b0 b2 cREPLICATE b0 cNUMERAL c_0 cCONS c, b1 cT cCONS c, cREVERSE b1 cF cNIL cupt cNUMERAL c_0 b0 * / c= cgraphl b0 cLET / cLET_END cLET / cLET_END cGraph b2 b0 cREPLICATE b0 b2 cREPLICATE b0 cNUMERAL c_0 cCONS c, b1 cT cCONS c, cREVERSE b1 cF cNIL cupt cNUMERAL c_0 b0 f0 * / c= cgraphl b0 cLET / cLET_END cLET / cLET_END cGraph b2 b0 cREPLICATE b0 b2 cREPLICATE b0 cNUMERAL c_0 cCONS c, b1 cT cCONS c, cREVERSE b1 cF cNIL cupt cNUMERAL c_0 b0 f0
+ |- (((!f. (!h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t)))))) ==> ((\f. (!h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t)))))) f)) = ((\f. (!h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t)))))) f))
T c= c==> ! ! ! c= cMAP b0 cCONS b1 b2 cCONS * b0 b1 cMAP b0 b2 * / ! ! c= cMAP b0 cCONS b1 b2 cCONS * b0 b1 cMAP b0 b2 f0 * / ! ! c= cMAP b0 cCONS b1 b2 cCONS * b0 b1 cMAP b0 b2 f0
+ |- (((!x. (((LET f) x) = (f x))) ==> ((\x. (((LET f) x) = (f x))) x)) = ((\x. (((LET f) x) = (f x))) x))
T c= c==> ! c= cLET f0 b0 * f0 b0 * / c= cLET f0 b0 * f0 b0 f1 * / c= cLET f0 b0 * f0 b0 f1
+ |- ((!p. ((all uniq) (fgraph ((((Graph ((CONS (((upt (NUMERAL _0)) (p + (NUMERAL (BIT1 (BIT1 _0))))) , T)) ((CONS ((REVERSE ((upt (NUMERAL _0)) (p + (NUMERAL (BIT1 (BIT1 _0)))))) , F)) NIL))) (p + (NUMERAL (BIT1 (BIT1 _0))))) ((REPLICATE (p + (NUMERAL (BIT1 (BIT1 _0))))) ((CONS (((upt (NUMERAL _0)) (p + (NUMERAL (BIT1 (BIT1 _0))))) , T)) ((CONS ((REVERSE ((upt (NUMERAL _0)) (p + (NUMERAL (BIT1 (BIT1 _0)))))) , F)) NIL)))) ((REPLICATE (p + (NUMERAL (BIT1 (BIT1 _0))))) (NUMERAL _0)))))) = (!p. ((all uniq) (fgraph (Seed p)))))
T c= ! call part cuniq cfgraph cGraph cCONS c, cupt cNUMERAL c_0 c+ b0 cNUMERAL cBIT1 cBIT1 c_0 cT cCONS c, cREVERSE cupt cNUMERAL c_0 c+ b0 cNUMERAL cBIT1 cBIT1 c_0 cF cNIL c+ b0 cNUMERAL cBIT1 cBIT1 c_0 cREPLICATE c+ b0 cNUMERAL cBIT1 cBIT1 c_0 cCONS c, cupt cNUMERAL c_0 c+ b0 cNUMERAL cBIT1 cBIT1 c_0 cT cCONS c, cREVERSE cupt cNUMERAL c_0 c+ b0 cNUMERAL cBIT1 cBIT1 c_0 cF cNIL cREPLICATE c+ b0 cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL c_0 ! call part cuniq cfgraph cSeed b0
+ |- (((!b. ((fgraph ((((Graph f) n) a) b)) = ((MAP FST) f))) ==> ((\b. ((fgraph ((((Graph f) n) a) b)) = ((MAP FST) f))) b)) = ((\b. ((fgraph ((((Graph f) n) a) b)) = ((MAP FST) f))) b))
T c= c==> ! c= cfgraph cGraph f0 f1 f2 b0 cMAP part cFST f0 * / c= cfgraph cGraph f0 f1 f2 b0 cMAP part cFST f0 f3 * / c= cfgraph cGraph f0 f1 f2 b0 cMAP part cFST f0 f3
- |- ((vertices_graph g) = ((upt (NUMERAL _0)) (countVertices g)))
T c= cvertices_graph f0 cupt cNUMERAL c_0 ccountVertices f0
- |- ((vertices_set2 g) = (set_of_list (vertices_graph g)))
T c= * part cvertices_set2 f0 * part cset_of_list cvertices_graph f0
- |- (((!g. ((vertices_graph g) = ((upt (NUMERAL _0)) (countVertices g)))) ==> ((\g. ((vertices_graph g) = ((upt (NUMERAL _0)) (countVertices g)))) g)) = ((\g. ((vertices_graph g) = ((upt (NUMERAL _0)) (countVertices g)))) g))
T c= c==> ! c= cvertices_graph b0 cupt cNUMERAL c_0 ccountVertices b0 * / c= cvertices_graph b0 cupt cNUMERAL c_0 ccountVertices b0 f0 * / c= cvertices_graph b0 cupt cNUMERAL c_0 ccountVertices b0 f0
- |- ((\g. ((vertices_graph g) = ((upt (NUMERAL _0)) (countVertices g)))) g)
T * / c= cvertices_graph b0 cupt cNUMERAL c_0 ccountVertices b0 f0
- |- (((\fs. (f fs)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- |- ((\g. ((vertices_set2 g) = (set_of_list (vertices_graph g)))) g)
T * / c= * part cvertices_set2 b0 * part cset_of_list cvertices_graph b0 f0
